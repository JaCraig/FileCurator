{
  "api/FileCurator.BaseClasses.DirectoryBase-2.html": {
    "href": "api/FileCurator.BaseClasses.DirectoryBase-2.html",
    "title": "Class DirectoryBase<TInternalDirectoryType, TDirectoryType> | FileCurator API Reference",
    "summary": "Class DirectoryBase<TInternalDirectoryType, TDirectoryType> Namespace FileCurator.BaseClasses Assembly FileCurator.dll Directory base class public abstract class DirectoryBase<TInternalDirectoryType, TDirectoryType> : IDirectory, IComparable<IDirectory>, IEnumerable<IFile>, IEnumerable, IComparable, IEquatable<IDirectory> where TDirectoryType : DirectoryBase<TInternalDirectoryType, TDirectoryType>, new() Type Parameters TInternalDirectoryType Data type internally to hold true directory info TDirectoryType Directory type Inheritance object DirectoryBase<TInternalDirectoryType, TDirectoryType> Implements IDirectory IComparable<IDirectory> IEnumerable<IFile> IEnumerable IComparable IEquatable<IDirectory> Derived FtpDirectory LocalDirectory MemoryDirectory ResourceDirectory WebDirectory Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DirectoryBase() Constructor protected DirectoryBase() DirectoryBase(TInternalDirectoryType, Credentials?) Constructor protected DirectoryBase(TInternalDirectoryType internalDirectory, Credentials? credentials = null) Parameters internalDirectory TInternalDirectoryType Internal directory object credentials Credentials The credentials. Properties Accessed Last time accessed (UTC time) public abstract DateTime Accessed { get; } Property Value DateTime Created Date created (UTC time) public abstract DateTime Created { get; } Property Value DateTime Credentials Gets the credentials. public Credentials? Credentials { get; } Property Value Credentials The credentials. Exists Does it exist? public abstract bool Exists { get; } Property Value bool FullName Full path public abstract string FullName { get; } Property Value string InternalDirectory Internal directory protected TInternalDirectoryType InternalDirectory { get; set; } Property Value TInternalDirectoryType Modified Date modified (UTC time) public abstract DateTime Modified { get; } Property Value DateTime Name Name public abstract string Name { get; } Property Value string Parent Parent directory public abstract IDirectory? Parent { get; } Property Value IDirectory Root Root directory public abstract IDirectory? Root { get; } Property Value IDirectory Size Size of the directory public abstract long Size { get; } Property Value long Methods CompareTo(IDirectory) Compares this to another directory public int CompareTo(IDirectory other) Parameters other IDirectory Directory to compare to Returns int CompareTo(object) Compares this object to another object public int CompareTo(object obj) Parameters obj object Object to compare it to Returns int CopyTo(IDirectory, CopyOptions) Copies the directory to the specified parent directory public virtual IDirectory CopyTo(IDirectory directory, CopyOptions options = CopyOptions.CopyAlways) Parameters directory IDirectory Directory to copy to options CopyOptions Copy options Returns IDirectory Returns the new directory CopyToAsync(IDirectory, CopyOptions) Copies the directory to the specified parent directory public Task<IDirectory> CopyToAsync(IDirectory directory, CopyOptions options = CopyOptions.CopyAlways) Parameters directory IDirectory Directory to copy to options CopyOptions Copy options Returns Task<IDirectory> Create() Creates the directory public abstract IDirectory Create() Returns IDirectory CreateAsync() Creates the directory if it does not currently exist public virtual Task<IDirectory> CreateAsync() Returns Task<IDirectory> Delete() Deletes the directory public abstract IDirectory Delete() Returns IDirectory DeleteAsync() Deletes the directory public virtual Task<IDirectory> DeleteAsync() Returns Task<IDirectory> EnumerateDirectories(Predicate<IDirectory>, SearchOption) Enumerates sub directories (defaults to top level sub directories) public IEnumerable<IDirectory> EnumerateDirectories(Predicate<IDirectory> predicate, SearchOption options = SearchOption.TopDirectoryOnly) Parameters predicate Predicate<IDirectory> Predicate used to filter directories options SearchOption Search options to use Returns IEnumerable<IDirectory> The list of directories EnumerateDirectories(string, SearchOption) Enumerates directories under this directory public abstract IEnumerable<IDirectory> EnumerateDirectories(string searchPattern = \"*\", SearchOption options = SearchOption.TopDirectoryOnly) Parameters searchPattern string Search pattern options SearchOption Search options Returns IEnumerable<IDirectory> List of directories under this directory EnumerateFiles(Predicate<IFile>, SearchOption) Enumerates files within the directory (defaults to top level directory and not the sub directories) public IEnumerable<IFile> EnumerateFiles(Predicate<IFile> predicate, SearchOption options = SearchOption.TopDirectoryOnly) Parameters predicate Predicate<IFile> Predicate used to filter files options SearchOption Search options to use Returns IEnumerable<IFile> The list of files EnumerateFiles(string, SearchOption) Enumerates files under this directory public abstract IEnumerable<IFile> EnumerateFiles(string searchPattern = \"*\", SearchOption options = SearchOption.TopDirectoryOnly) Parameters searchPattern string Search pattern options SearchOption Search options Returns IEnumerable<IFile> List of files under this directory Equals(IDirectory) Determines if the directories are equal public bool Equals(IDirectory other) Parameters other IDirectory Other directory Returns bool True if they are equal, false otherwise Equals(object) Determines if the two directories are the same public override bool Equals(object obj) Parameters obj object Object to compare to Returns bool True if they're the same, false otherwise GetEnumerator() Enumerates the files in the directory public IEnumerator<IFile> GetEnumerator() Returns IEnumerator<IFile> The files in the directory GetHashCode() Returns the hash code for the directory public override int GetHashCode() Returns int The hash code for the directory MoveTo(IDirectory) Moves this directory under another directory public virtual IDirectory MoveTo(IDirectory directory) Parameters directory IDirectory Directory to move to Returns IDirectory MoveToAsync(IDirectory) Moves the directory to the specified parent directory public Task<IDirectory> MoveToAsync(IDirectory directory) Parameters directory IDirectory Directory to move to Returns Task<IDirectory> Rename(string) Renames the directory public abstract IDirectory Rename(string name) Parameters name string Name of the new directory Returns IDirectory RenameAsync(string) Renames the directory public virtual Task<IDirectory> RenameAsync(string name) Parameters name string The new name of the directory Returns Task<IDirectory> ToString() Gets info for the directory public override string ToString() Returns string The full path to the directory Operators operator ==(DirectoryBase<TInternalDirectoryType, TDirectoryType>, IDirectory) Determines if two directories are equal public static bool operator ==(DirectoryBase<TInternalDirectoryType, TDirectoryType> directory1, IDirectory directory2) Parameters directory1 DirectoryBase<TInternalDirectoryType, TDirectoryType> Directory 1 directory2 IDirectory Directory 2 Returns bool True if they are, false otherwise operator >(DirectoryBase<TInternalDirectoryType, TDirectoryType>, IDirectory) Greater than public static bool operator >(DirectoryBase<TInternalDirectoryType, TDirectoryType> directory1, IDirectory directory2) Parameters directory1 DirectoryBase<TInternalDirectoryType, TDirectoryType> Directory 1 directory2 IDirectory Directory 2 Returns bool The result operator >=(DirectoryBase<TInternalDirectoryType, TDirectoryType>, IDirectory) Greater than or equal public static bool operator >=(DirectoryBase<TInternalDirectoryType, TDirectoryType> directory1, IDirectory directory2) Parameters directory1 DirectoryBase<TInternalDirectoryType, TDirectoryType> Directory 1 directory2 IDirectory Directory 2 Returns bool The result operator !=(DirectoryBase<TInternalDirectoryType, TDirectoryType>, IDirectory) Determines if two directories are not equal public static bool operator !=(DirectoryBase<TInternalDirectoryType, TDirectoryType> directory1, IDirectory directory2) Parameters directory1 DirectoryBase<TInternalDirectoryType, TDirectoryType> Directory 1 directory2 IDirectory Directory 2 Returns bool True if they are not equal, false otherwise operator <(DirectoryBase<TInternalDirectoryType, TDirectoryType>, IDirectory) Less than public static bool operator <(DirectoryBase<TInternalDirectoryType, TDirectoryType> directory1, IDirectory directory2) Parameters directory1 DirectoryBase<TInternalDirectoryType, TDirectoryType> Directory 1 directory2 IDirectory Directory 2 Returns bool The result operator <=(DirectoryBase<TInternalDirectoryType, TDirectoryType>, IDirectory) Less than or equal public static bool operator <=(DirectoryBase<TInternalDirectoryType, TDirectoryType> directory1, IDirectory directory2) Parameters directory1 DirectoryBase<TInternalDirectoryType, TDirectoryType> Directory 1 directory2 IDirectory Directory 2 Returns bool The result"
  },
  "api/FileCurator.BaseClasses.FileBase-2.html": {
    "href": "api/FileCurator.BaseClasses.FileBase-2.html",
    "title": "Class FileBase<InternalFileType, FileType> | FileCurator API Reference",
    "summary": "Class FileBase<InternalFileType, FileType> Namespace FileCurator.BaseClasses Assembly FileCurator.dll Directory base class public abstract class FileBase<InternalFileType, FileType> : IFile, IComparable<IFile>, IComparable, IEquatable<IFile> where FileType : FileBase<InternalFileType, FileType>, new() Type Parameters InternalFileType Internal file type FileType File type Inheritance object FileBase<InternalFileType, FileType> Implements IFile IComparable<IFile> IComparable IEquatable<IFile> Derived FtpFile LocalFile MemoryFile ResourceFile WebFile Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FileBase() Constructor protected FileBase() FileBase(InternalFileType) Constructor protected FileBase(InternalFileType internalFile) Parameters internalFile InternalFileType Internal file FileBase(InternalFileType, Credentials?) Constructor protected FileBase(InternalFileType internalFile, Credentials? credentials = null) Parameters internalFile InternalFileType Internal file credentials Credentials The credentials. Properties Accessed Last time accessed (UTC time) public abstract DateTime Accessed { get; } Property Value DateTime Created Time created (UTC time) public abstract DateTime Created { get; } Property Value DateTime Credentials Gets the credentials. public Credentials? Credentials { get; } Property Value Credentials The credentials. Directory Directory the file is within public abstract IDirectory? Directory { get; } Property Value IDirectory Exists Does the file exist? public abstract bool Exists { get; } Property Value bool Extension File extension public abstract string Extension { get; } Property Value string FormatManager Gets or sets the internal manager. protected Manager? FormatManager { get; } Property Value Manager The internal manager. FullName Full path public abstract string FullName { get; } Property Value string InternalFile Internal directory protected InternalFileType InternalFile { get; set; } Property Value InternalFileType Length Size of the file public abstract long Length { get; } Property Value long Modified Time modified (UTC time) public abstract DateTime Modified { get; } Property Value DateTime Name Name of the file public abstract string Name { get; } Property Value string Methods CompareTo(IFile) Compares this to another file public int CompareTo(IFile other) Parameters other IFile File to compare to Returns int CompareTo(object) Compares this object to another object public int CompareTo(object obj) Parameters obj object Object to compare it to Returns int CopyTo(IDirectory, bool) Copies the file to another directory public abstract IFile CopyTo(IDirectory directory, bool overwrite) Parameters directory IDirectory Directory to copy the file to overwrite bool Should the file overwrite another file if found Returns IFile The newly created file CopyToAsync(IDirectory, bool) Copies the file to another directory public virtual Task<IFile?> CopyToAsync(IDirectory directory, bool overwrite) Parameters directory IDirectory Directory to copy the file to overwrite bool Should the file overwrite another file if found Returns Task<IFile> The newly created file Delete() Deletes the file public abstract string Delete() Returns string Any response for deleting the resource (usually FTP, HTTP, etc) DeleteAsync() Deletes the file public virtual Task<string> DeleteAsync() Returns Task<string> Any response for deleting the resource (usually FTP, HTTP, etc) Equals(IFile) Determines if the files are equal public bool Equals(IFile other) Parameters other IFile Other file Returns bool True if they are equal, false otherwise Equals(object) Determines if the objects are equal public override bool Equals(object obj) Parameters obj object Object to compare to Returns bool True if they are equal, false otherwise GetHashCode() Gets the hash code for the file public override int GetHashCode() Returns int The hash code MoveTo(IDirectory) Moves the file to a new directory public abstract IFile MoveTo(IDirectory directory) Parameters directory IDirectory Directory to move to Returns IFile MoveToAsync(IDirectory) Moves the file to another directory public virtual Task<IFile> MoveToAsync(IDirectory directory) Parameters directory IDirectory Directory to move the file to Returns Task<IFile> Parse() Parses this instance. public IGenericFile Parse() Returns IGenericFile The parsed file Exceptions ArgumentException Could not find file format that returns the specified object type ParseAsync() Parses this instance. public Task<IGenericFile> ParseAsync() Returns Task<IGenericFile> The parsed file Exceptions ArgumentException Could not find file format that returns the specified object type ParseAsync<TFile>() Parses this instance. public Task<TFile> ParseAsync<TFile>() where TFile : IGenericFile Returns Task<TFile> The parsed file Type Parameters TFile The type of the file object expected. Exceptions ArgumentException Could not find file format that returns the specified object type Parse<TFile>() Parses this instance. public TFile Parse<TFile>() where TFile : IGenericFile Returns TFile The parsed file Type Parameters TFile The type of the file object expected. Exceptions ArgumentException Could not find file format that returns the specified object type Read() Reads the file in as a string public abstract string Read() Returns string The file contents as a string ReadAsync() Reads the file to the end as a string public virtual Task<string> ReadAsync() Returns Task<string> A string containing the contents of the file ReadBinary() Reads a file as binary public abstract byte[] ReadBinary() Returns byte[] The file contents as a byte array ReadBinaryAsync() Reads the file to the end as a byte array public virtual Task<byte[]> ReadBinaryAsync() Returns Task<byte[]> A byte array containing the contents of the file Rename(string) Renames the file public abstract IFile Rename(string newName) Parameters newName string New name for the file Returns IFile RenameAsync(string) Renames the file public virtual Task<IFile> RenameAsync(string newName) Parameters newName string New file name Returns Task<IFile> ToString() Returns the name of the file public override string ToString() Returns string The name of the file Write(IGenericFile, FileMode) Writes the specified data. public bool Write(IGenericFile data, FileMode mode = FileMode.Create) Parameters data IGenericFile The data. mode FileMode The mode. Returns bool True if it was written successfully, false otherwise. Write(byte[], FileMode) Writes content to the file public abstract byte[] Write(byte[] content, FileMode mode = FileMode.Create) Parameters content byte[] Content to write mode FileMode Mode to open the file as Returns byte[] The result of the write or original content Write(string, FileMode, Encoding?) Writes content to the file public abstract string Write(string content, FileMode mode = FileMode.Create, Encoding? encoding = null) Parameters content string Content to write mode FileMode Mode to open the file as encoding Encoding Encoding to use for the content Returns string The result of the write or original content WriteAsync(IGenericFile, FileMode) Writes the specified data. public Task<bool> WriteAsync(IGenericFile data, FileMode mode = FileMode.Create) Parameters data IGenericFile The data. mode FileMode The mode. Returns Task<bool> True if it was written successfully, false otherwise. WriteAsync(byte[], FileMode) Writes content to the file public virtual Task<byte[]> WriteAsync(byte[] content, FileMode mode = FileMode.Create) Parameters content byte[] Content to write mode FileMode File mode Returns Task<byte[]> The result of the write or original content WriteAsync(string, FileMode, Encoding?) Writes content to the file public virtual Task<string> WriteAsync(string content, FileMode mode = FileMode.Create, Encoding? encoding = null) Parameters content string Content to write mode FileMode File mode encoding Encoding Encoding that the content should be saved as (default is UTF8) Returns Task<string> The result of the write or original content Operators operator ==(FileBase<InternalFileType, FileType>, IFile) Determines if two directories are equal public static bool operator ==(FileBase<InternalFileType, FileType> file1, IFile file2) Parameters file1 FileBase<InternalFileType, FileType> File 1 file2 IFile File 2 Returns bool True if they are, false otherwise operator >(FileBase<InternalFileType, FileType>, IFile) Greater than public static bool operator >(FileBase<InternalFileType, FileType> file1, IFile file2) Parameters file1 FileBase<InternalFileType, FileType> File 1 file2 IFile File 2 Returns bool The result operator >=(FileBase<InternalFileType, FileType>, IFile) Greater than or equal public static bool operator >=(FileBase<InternalFileType, FileType> file1, IFile file2) Parameters file1 FileBase<InternalFileType, FileType> File 1 file2 IFile File 2 Returns bool The result implicit operator byte[](FileBase<InternalFileType, FileType>) Reads the file and converts it to a byte array public static implicit operator byte[](FileBase<InternalFileType, FileType> file) Parameters file FileBase<InternalFileType, FileType> File to read Returns byte[] The file as a byte array implicit operator string(FileBase<InternalFileType, FileType>) Reads the file and converts it to a string public static implicit operator string(FileBase<InternalFileType, FileType> file) Parameters file FileBase<InternalFileType, FileType> File to read Returns string The file as a string operator !=(FileBase<InternalFileType, FileType>, IFile) Determines if two directories are not equal public static bool operator !=(FileBase<InternalFileType, FileType> file1, IFile file2) Parameters file1 FileBase<InternalFileType, FileType> File 1 file2 IFile File 2 Returns bool True if they are not equal, false otherwise operator <(FileBase<InternalFileType, FileType>, IFile) Less than public static bool operator <(FileBase<InternalFileType, FileType> file1, IFile file2) Parameters file1 FileBase<InternalFileType, FileType> File 1 file2 IFile File 2 Returns bool The result operator <=(FileBase<InternalFileType, FileType>, IFile) Less than or equal public static bool operator <=(FileBase<InternalFileType, FileType> file1, IFile file2) Parameters file1 FileBase<InternalFileType, FileType> File 1 file2 IFile File 2 Returns bool The result"
  },
  "api/FileCurator.BaseClasses.FileSystemBase.html": {
    "href": "api/FileCurator.BaseClasses.FileSystemBase.html",
    "title": "Class FileSystemBase | FileCurator API Reference",
    "summary": "Class FileSystemBase Namespace FileCurator.BaseClasses Assembly FileCurator.dll File system base class public abstract class FileSystemBase : IDisposable, IFileSystem Inheritance object FileSystemBase Implements IDisposable IFileSystem Derived LocalFileSystemBase FtpFileSystem HttpFileSystem MemoryFileSystem ResourceFileSystem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileSystemBase() Constructor protected FileSystemBase() Properties HandleRegex Regex used to determine if the file system can handle the path protected Regex HandleRegex { get; } Property Value Regex HandleRegexString Regex string used to determine if the file system can handle the path protected abstract string HandleRegexString { get; } Property Value string Name Name of the file system public abstract string Name { get; } Property Value string Order Gets the order (lower numbers occur first). public abstract int Order { get; } Property Value int The order. Methods AbsolutePath(string) Gets the absolute path of the variable passed in protected abstract string AbsolutePath(string path) Parameters path string Path to convert to absolute Returns string The absolute path of the path passed in CanHandle(string) Returns true if it can handle the path, false otherwise public bool CanHandle(string path) Parameters path string The path to check against Returns bool True if it can handle the path, false otherwise Directory(string, Credentials?) Gets the directory representation for the directory public abstract IDirectory Directory(string path, Credentials? credentials = null) Parameters path string Path to the directory credentials Credentials The credentials. Returns IDirectory The directory object Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. protected abstract void Dispose(bool managed) Parameters managed bool true to release both managed and unmanaged resources; false to release only unmanaged resources. File(string, Credentials?) Gets the class representation for the file public abstract IFile File(string path, Credentials? credentials = null) Parameters path string Path to the file credentials Credentials The credentials. Returns IFile The file object See Also IDisposable IFileSystem"
  },
  "api/FileCurator.BaseClasses.LocalFileSystemBase.html": {
    "href": "api/FileCurator.BaseClasses.LocalFileSystemBase.html",
    "title": "Class LocalFileSystemBase | FileCurator API Reference",
    "summary": "Class LocalFileSystemBase Namespace FileCurator.BaseClasses Assembly FileCurator.dll Local file system base class public abstract class LocalFileSystemBase : FileSystemBase, IDisposable, IFileSystem Inheritance object FileSystemBase LocalFileSystemBase Implements IDisposable IFileSystem Derived AbsoluteLocalFileSystem NetworkFileSystem RelativeLocalFileSystem Inherited Members FileSystemBase.Name FileSystemBase.Order FileSystemBase.HandleRegex FileSystemBase.HandleRegexString FileSystemBase.CanHandle(string) FileSystemBase.Dispose() FileSystemBase.AbsolutePath(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LocalFileSystemBase() Constructor protected LocalFileSystemBase() Methods Directory(string, Credentials?) Gets the directory representation for the directory public override IDirectory Directory(string path, Credentials? credentials = null) Parameters path string Path to the directory credentials Credentials The credentials. Returns IDirectory The directory object Dispose(bool) Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. protected override void Dispose(bool managed) Parameters managed bool true to release both managed and unmanaged resources; false to release only unmanaged resources. File(string, Credentials?) Gets the class representation for the file public override IFile File(string path, Credentials? credentials = null) Parameters path string Path to the file credentials Credentials The credentials. Returns IFile The file object See Also FileSystemBase"
  },
  "api/FileCurator.BaseClasses.html": {
    "href": "api/FileCurator.BaseClasses.html",
    "title": "Namespace FileCurator.BaseClasses | FileCurator API Reference",
    "summary": "Namespace FileCurator.BaseClasses Classes DirectoryBase<TInternalDirectoryType, TDirectoryType> Directory base class FileBase<InternalFileType, FileType> Directory base class FileSystemBase File system base class LocalFileSystemBase Local file system base class"
  },
  "api/FileCurator.Credentials.html": {
    "href": "api/FileCurator.Credentials.html",
    "title": "Class Credentials | FileCurator API Reference",
    "summary": "Class Credentials Namespace FileCurator Assembly FileCurator.dll Credentials info public class Credentials Inheritance object Credentials Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Domain Gets or sets the domain. public string? Domain { get; set; } Property Value string The domain. NoCredentials Gets the no credentials. public static Credentials NoCredentials { get; } Property Value Credentials The no credentials. Password Gets or sets the password. public string? Password { get; set; } Property Value string The password. UseDefaultCredentials Gets or sets a value indicating whether [use default credentials]. public bool UseDefaultCredentials { get; set; } Property Value bool true if [use default credentials]; otherwise, false. UserName Gets or sets the name of the user. public string? UserName { get; set; } Property Value string The name of the user. Methods Equals(object) Determines whether the specified object, is equal to this instance. public override bool Equals(object obj) Parameters obj object The object to compare with this instance. Returns bool true if the specified object is equal to this instance; otherwise, false. GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table."
  },
  "api/FileCurator.Data.FixedLength.BaseClasses.FieldBaseClass-1.html": {
    "href": "api/FileCurator.Data.FixedLength.BaseClasses.FieldBaseClass-1.html",
    "title": "Class FieldBaseClass<TField> | FileCurator API Reference",
    "summary": "Class FieldBaseClass<TField> Namespace FileCurator.Data.FixedLength.BaseClasses Assembly FileCurator.dll Field base class public abstract class FieldBaseClass<TField> : IField<TField> Type Parameters TField The type of the field. Inheritance object FieldBaseClass<TField> Implements IField<TField> Derived StringField Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Length Gets or sets the length. public int Length { get; set; } Property Value int The length. Value Gets or sets the value. public TField Value { get; set; } Property Value TField The value. Methods Parse(string, int, string) Parses the specified value. public abstract void Parse(string value, int length = -1, string fillerCharacter = \" \") Parameters value string The value. length int The length. fillerCharacter string The filler character. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. See Also IField<TField>"
  },
  "api/FileCurator.Data.FixedLength.BaseClasses.FixedLengthBaseClass.html": {
    "href": "api/FileCurator.Data.FixedLength.BaseClasses.FixedLengthBaseClass.html",
    "title": "Class FixedLengthBaseClass | FileCurator API Reference",
    "summary": "Class FixedLengthBaseClass Namespace FileCurator.Data.FixedLength.BaseClasses Assembly FileCurator.dll Fixed length base class public abstract class FixedLengthBaseClass : FileBaseClass<FixedLengthBaseClass>, IGenericFile Inheritance object FileBaseClass<FixedLengthBaseClass> FixedLengthBaseClass Implements IGenericFile Inherited Members FileBaseClass<FixedLengthBaseClass>.Content FileBaseClass<FixedLengthBaseClass>.Meta FileBaseClass<FixedLengthBaseClass>.Title FileBaseClass<FixedLengthBaseClass>.CompareTo(object) FileBaseClass<FixedLengthBaseClass>.CompareTo(FixedLengthBaseClass) FileBaseClass<FixedLengthBaseClass>.Equals(FixedLengthBaseClass) FileBaseClass<FixedLengthBaseClass>.Equals(object) FileBaseClass<FixedLengthBaseClass>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FixedLengthBaseClass() Initializes a new instance of the FixedLengthBaseClass class. protected FixedLengthBaseClass() Properties Records Gets or sets the records. protected IList<IRecord> Records { get; set; } Property Value IList<IRecord> The records. Methods Parse(string, int) Parses the specified value. public abstract void Parse(string Value, int Length = -1) Parameters Value string The value. Length int The length. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. See Also FileBaseClass<FormatFileType>"
  },
  "api/FileCurator.Data.FixedLength.BaseClasses.RecordBase-1.html": {
    "href": "api/FileCurator.Data.FixedLength.BaseClasses.RecordBase-1.html",
    "title": "Class RecordBase<TField> | FileCurator API Reference",
    "summary": "Class RecordBase<TField> Namespace FileCurator.Data.FixedLength.BaseClasses Assembly FileCurator.dll Record base class public abstract class RecordBase<TField> : IRecord, IList<IField<TField>>, ICollection<IField<TField>>, IEnumerable<IField<TField>>, IEnumerable Type Parameters TField The type of the field. Inheritance object RecordBase<TField> Implements IRecord IList<IField<TField>> ICollection<IField<TField>> IEnumerable<IField<TField>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors RecordBase() Constructor protected RecordBase() Properties Count Number of Fields public int Count { get; } Property Value int Fields The list of fields protected IList<IField<TField>> Fields { get; } Property Value IList<IField<TField>> IsReadOnly Is the file read only public bool IsReadOnly { get; } Property Value bool this[int] Individual records public IField<TField> this[int index] { get; set; } Parameters index int The record that you want to get Property Value IField<TField> The record requested Length Length public int Length { get; set; } Property Value int Methods Add(IField<TField>) Adds a Field to the file public void Add(IField<TField> item) Parameters item IField<TField> Field to add Clear() Clears the file public void Clear() Contains(IField<TField>) Determines if the file contains a Field public bool Contains(IField<TField> item) Parameters item IField<TField> Field to check for Returns bool True if it does, false otherwise CopyTo(IField<TField>[], int) Copies the delimited file to an array public void CopyTo(IField<TField>[] array, int arrayIndex) Parameters array IField<TField>[] Array to copy to arrayIndex int Index to start at GetEnumerator() Gets the enumerator for the file public IEnumerator<IField<TField>> GetEnumerator() Returns IEnumerator<IField<TField>> The enumerator for this file IndexOf(IField<TField>) Index of a specific Field public int IndexOf(IField<TField> item) Parameters item IField<TField> Field to search for Returns int The index of a specific Field Insert(int, IField<TField>) Inserts a Field at a specific index public void Insert(int index, IField<TField> item) Parameters index int Index to insert at item IField<TField> Field to insert Parse(string, int) Parses the record public abstract void Parse(string value, int length = -1) Parameters value string Value length int Length of the record Remove(IField<TField>) Removes a Field from the file public bool Remove(IField<TField> item) Parameters item IField<TField> Field to remove Returns bool True if it is removed, false otherwise RemoveAt(int) Removes a Field at a specific index public void RemoveAt(int index) Parameters index int Index of the Field to remove ToString() Converts the record to a string public override string ToString() Returns string The record as a string See Also IRecord"
  },
  "api/FileCurator.Data.FixedLength.BaseClasses.html": {
    "href": "api/FileCurator.Data.FixedLength.BaseClasses.html",
    "title": "Namespace FileCurator.Data.FixedLength.BaseClasses | FileCurator API Reference",
    "summary": "Namespace FileCurator.Data.FixedLength.BaseClasses Classes FieldBaseClass<TField> Field base class FixedLengthBaseClass Fixed length base class RecordBase<TField> Record base class"
  },
  "api/FileCurator.Data.FixedLength.Interfaces.IField-1.html": {
    "href": "api/FileCurator.Data.FixedLength.Interfaces.IField-1.html",
    "title": "Interface IField<TField> | FileCurator API Reference",
    "summary": "Interface IField<TField> Namespace FileCurator.Data.FixedLength.Interfaces Assembly FileCurator.dll Field interface public interface IField<TField> Type Parameters TField The type of the field. Properties Length Gets or sets the length. int Length { get; set; } Property Value int The length. Value Gets or sets the value. TField Value { get; set; } Property Value TField The value. Methods Parse(string, int, string) Parses the specified value. void Parse(string value, int length = -1, string fillerCharacter = \" \") Parameters value string The value. length int The length. fillerCharacter string The filler character."
  },
  "api/FileCurator.Data.FixedLength.Interfaces.IRecord.html": {
    "href": "api/FileCurator.Data.FixedLength.Interfaces.IRecord.html",
    "title": "Interface IRecord | FileCurator API Reference",
    "summary": "Interface IRecord Namespace FileCurator.Data.FixedLength.Interfaces Assembly FileCurator.dll Record interface public interface IRecord Properties Length Gets or sets the length. int Length { get; set; } Property Value int The length. Methods Parse(string, int) Parses the specified value. void Parse(string value, int length = -1) Parameters value string The value. length int The length."
  },
  "api/FileCurator.Data.FixedLength.Interfaces.html": {
    "href": "api/FileCurator.Data.FixedLength.Interfaces.html",
    "title": "Namespace FileCurator.Data.FixedLength.Interfaces | FileCurator API Reference",
    "summary": "Namespace FileCurator.Data.FixedLength.Interfaces Interfaces IField<TField> Field interface IRecord Record interface"
  },
  "api/FileCurator.Data.FixedLength.StringField.html": {
    "href": "api/FileCurator.Data.FixedLength.StringField.html",
    "title": "Class StringField | FileCurator API Reference",
    "summary": "Class StringField Namespace FileCurator.Data.FixedLength Assembly FileCurator.dll Basic string field public class StringField : FieldBaseClass<string>, IField<string> Inheritance object FieldBaseClass<string> StringField Implements IField<string> Inherited Members FieldBaseClass<string>.Length FieldBaseClass<string>.Value FieldBaseClass<string>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors StringField(string, int) Initializes a new instance of the StringField class. public StringField(string value, int length = -1) Parameters value string The value. length int The length. Methods Parse(string, int, string) Parses the specified value. public override void Parse(string value, int length = -1, string fillerCharacter = \" \") Parameters value string The value. length int The length. fillerCharacter string The filler character. See Also FieldBaseClass<TField>"
  },
  "api/FileCurator.Data.FixedLength.html": {
    "href": "api/FileCurator.Data.FixedLength.html",
    "title": "Namespace FileCurator.Data.FixedLength | FileCurator API Reference",
    "summary": "Namespace FileCurator.Data.FixedLength Classes StringField Basic string field"
  },
  "api/FileCurator.Default.AbsoluteLocalFileSystem.html": {
    "href": "api/FileCurator.Default.AbsoluteLocalFileSystem.html",
    "title": "Class AbsoluteLocalFileSystem | FileCurator API Reference",
    "summary": "Class AbsoluteLocalFileSystem Namespace FileCurator.Default Assembly FileCurator.dll Absolute local file system public class AbsoluteLocalFileSystem : LocalFileSystemBase, IDisposable, IFileSystem Inheritance object FileSystemBase LocalFileSystemBase AbsoluteLocalFileSystem Implements IDisposable IFileSystem Inherited Members LocalFileSystemBase.Directory(string, Credentials) LocalFileSystemBase.File(string, Credentials) LocalFileSystemBase.Dispose(bool) FileSystemBase.HandleRegex FileSystemBase.CanHandle(string) FileSystemBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HandleRegexString Relative starter protected override string HandleRegexString { get; } Property Value string Name Name of the file system public override string Name { get; } Property Value string Order Gets the order (lower numbers occur first). public override int Order { get; } Property Value int The order. Methods AbsolutePath(string) Gets the absolute path of the variable passed in protected override string AbsolutePath(string path) Parameters path string Path to convert to absolute Returns string The absolute path of the path passed in"
  },
  "api/FileCurator.Default.Ftp.FtpDirectory.html": {
    "href": "api/FileCurator.Default.Ftp.FtpDirectory.html",
    "title": "Class FtpDirectory | FileCurator API Reference",
    "summary": "Class FtpDirectory Namespace FileCurator.Default.Ftp Assembly FileCurator.dll Ftp directory public class FtpDirectory : DirectoryBase<Uri, FtpDirectory>, IDirectory, IComparable<IDirectory>, IEnumerable<IFile>, IEnumerable, IComparable, IEquatable<IDirectory> Inheritance object DirectoryBase<Uri, FtpDirectory> FtpDirectory Implements IDirectory IComparable<IDirectory> IEnumerable<IFile> IEnumerable IComparable IEquatable<IDirectory> Inherited Members DirectoryBase<Uri, FtpDirectory>.Accessed DirectoryBase<Uri, FtpDirectory>.Created DirectoryBase<Uri, FtpDirectory>.Credentials DirectoryBase<Uri, FtpDirectory>.Exists DirectoryBase<Uri, FtpDirectory>.FullName DirectoryBase<Uri, FtpDirectory>.Modified DirectoryBase<Uri, FtpDirectory>.Name DirectoryBase<Uri, FtpDirectory>.Parent DirectoryBase<Uri, FtpDirectory>.Root DirectoryBase<Uri, FtpDirectory>.Size DirectoryBase<Uri, FtpDirectory>.InternalDirectory DirectoryBase<Uri, FtpDirectory>.CompareTo(IDirectory) DirectoryBase<Uri, FtpDirectory>.CompareTo(object) DirectoryBase<Uri, FtpDirectory>.CopyTo(IDirectory, CopyOptions) DirectoryBase<Uri, FtpDirectory>.CopyToAsync(IDirectory, CopyOptions) DirectoryBase<Uri, FtpDirectory>.Create() DirectoryBase<Uri, FtpDirectory>.CreateAsync() DirectoryBase<Uri, FtpDirectory>.Delete() DirectoryBase<Uri, FtpDirectory>.DeleteAsync() DirectoryBase<Uri, FtpDirectory>.EnumerateDirectories(string, SearchOption) DirectoryBase<Uri, FtpDirectory>.EnumerateDirectories(Predicate<IDirectory>, SearchOption) DirectoryBase<Uri, FtpDirectory>.EnumerateFiles(string, SearchOption) DirectoryBase<Uri, FtpDirectory>.EnumerateFiles(Predicate<IFile>, SearchOption) DirectoryBase<Uri, FtpDirectory>.Equals(object) DirectoryBase<Uri, FtpDirectory>.Equals(IDirectory) DirectoryBase<Uri, FtpDirectory>.GetEnumerator() DirectoryBase<Uri, FtpDirectory>.GetHashCode() DirectoryBase<Uri, FtpDirectory>.MoveTo(IDirectory) DirectoryBase<Uri, FtpDirectory>.MoveToAsync(IDirectory) DirectoryBase<Uri, FtpDirectory>.Rename(string) DirectoryBase<Uri, FtpDirectory>.RenameAsync(string) DirectoryBase<Uri, FtpDirectory>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FtpDirectory() Constructor public FtpDirectory() FtpDirectory(string, Credentials?) Constructor public FtpDirectory(string path, Credentials? credentials = null) Parameters path string Path to the directory credentials Credentials The credentials. FtpDirectory(Uri?, Credentials?) Constructor public FtpDirectory(Uri? directory, Credentials? credentials = null) Parameters directory Uri Internal directory credentials Credentials The credentials. Properties Accessed returns now public override DateTime Accessed { get; } Property Value DateTime Created returns now public override DateTime Created { get; } Property Value DateTime Exists returns true public override bool Exists { get; } Property Value bool FullName Full path public override string FullName { get; } Property Value string Modified returns now public override DateTime Modified { get; } Property Value DateTime Name Full path public override string Name { get; } Property Value string Parent Full path public override IDirectory? Parent { get; } Property Value IDirectory Root Root public override IDirectory? Root { get; } Property Value IDirectory Size Size (returns 0) public override long Size { get; } Property Value long Methods CopyTo(IDirectory, CopyOptions) Copies the directory to the specified parent directory public override IDirectory CopyTo(IDirectory directory, CopyOptions options = CopyOptions.CopyAlways) Parameters directory IDirectory Directory to copy to options CopyOptions Options Returns IDirectory Newly created directory Create() Not used public override IDirectory Create() Returns IDirectory Delete() Not used public override IDirectory Delete() Returns IDirectory EnumerateDirectories(string, SearchOption) Not used public override IEnumerable<IDirectory> EnumerateDirectories(string searchPattern, SearchOption options = SearchOption.TopDirectoryOnly) Parameters searchPattern string options SearchOption Returns IEnumerable<IDirectory> EnumerateFiles(string, SearchOption) Not used public override IEnumerable<IFile> EnumerateFiles(string searchPattern = \"*\", SearchOption options = SearchOption.TopDirectoryOnly) Parameters searchPattern string options SearchOption Returns IEnumerable<IFile> Rename(string) Not used public override IDirectory Rename(string name) Parameters name string Returns IDirectory See Also DirectoryBase<TInternalDirectoryType, TDirectoryType>"
  },
  "api/FileCurator.Default.Ftp.FtpFile.html": {
    "href": "api/FileCurator.Default.Ftp.FtpFile.html",
    "title": "Class FtpFile | FileCurator API Reference",
    "summary": "Class FtpFile Namespace FileCurator.Default.Ftp Assembly FileCurator.dll Ftp File public class FtpFile : FileBase<Uri, FtpFile>, IFile, IComparable<IFile>, IComparable, IEquatable<IFile> Inheritance object FileBase<Uri, FtpFile> FtpFile Implements IFile IComparable<IFile> IComparable IEquatable<IFile> Inherited Members FileBase<Uri, FtpFile>.Accessed FileBase<Uri, FtpFile>.Created FileBase<Uri, FtpFile>.Credentials FileBase<Uri, FtpFile>.Directory FileBase<Uri, FtpFile>.Exists FileBase<Uri, FtpFile>.Extension FileBase<Uri, FtpFile>.FullName FileBase<Uri, FtpFile>.Length FileBase<Uri, FtpFile>.Modified FileBase<Uri, FtpFile>.Name FileBase<Uri, FtpFile>.FormatManager FileBase<Uri, FtpFile>.InternalFile FileBase<Uri, FtpFile>.CompareTo(IFile) FileBase<Uri, FtpFile>.CompareTo(object) FileBase<Uri, FtpFile>.CopyTo(IDirectory, bool) FileBase<Uri, FtpFile>.CopyToAsync(IDirectory, bool) FileBase<Uri, FtpFile>.Delete() FileBase<Uri, FtpFile>.DeleteAsync() FileBase<Uri, FtpFile>.Equals(object) FileBase<Uri, FtpFile>.Equals(IFile) FileBase<Uri, FtpFile>.GetHashCode() FileBase<Uri, FtpFile>.MoveTo(IDirectory) FileBase<Uri, FtpFile>.MoveToAsync(IDirectory) FileBase<Uri, FtpFile>.Parse<TFile>() FileBase<Uri, FtpFile>.Parse() FileBase<Uri, FtpFile>.ParseAsync<TFile>() FileBase<Uri, FtpFile>.ParseAsync() FileBase<Uri, FtpFile>.Read() FileBase<Uri, FtpFile>.ReadAsync() FileBase<Uri, FtpFile>.ReadBinary() FileBase<Uri, FtpFile>.ReadBinaryAsync() FileBase<Uri, FtpFile>.Rename(string) FileBase<Uri, FtpFile>.RenameAsync(string) FileBase<Uri, FtpFile>.ToString() FileBase<Uri, FtpFile>.Write(string, FileMode, Encoding) FileBase<Uri, FtpFile>.Write(byte[], FileMode) FileBase<Uri, FtpFile>.Write(IGenericFile, FileMode) FileBase<Uri, FtpFile>.WriteAsync(string, FileMode, Encoding) FileBase<Uri, FtpFile>.WriteAsync(byte[], FileMode) FileBase<Uri, FtpFile>.WriteAsync(IGenericFile, FileMode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FtpFile() Constructor public FtpFile() FtpFile(string, Credentials?) Constructor public FtpFile(string path, Credentials? credentials = null) Parameters path string Path to the file credentials Credentials The credentials. FtpFile(Uri?, Credentials?) Constructor public FtpFile(Uri? file, Credentials? credentials) Parameters file Uri File to use credentials Credentials The credentials. Properties Accessed Time accessed (Just returns now) public override DateTime Accessed { get; } Property Value DateTime Created Time created (Just returns now) public override DateTime Created { get; } Property Value DateTime Directory Directory base path public override IDirectory? Directory { get; } Property Value IDirectory Exists Does it exist? Always true. public override bool Exists { get; } Property Value bool Extension Extension (always empty) public override string Extension { get; } Property Value string FullName Full path public override string FullName { get; } Property Value string Length Size of the file (always 0) public override long Length { get; } Property Value long Modified Time modified (just returns now) public override DateTime Modified { get; } Property Value DateTime Name Absolute path of the file (same as FullName) public override string Name { get; } Property Value string Methods CopyTo(IDirectory, bool) Copies the file to another directory public override IFile CopyTo(IDirectory directory, bool overwrite) Parameters directory IDirectory Directory to copy the file to overwrite bool Should the file overwrite another file if found Returns IFile The newly created file Delete() Delete (does nothing) public override string Delete() Returns string Any response for deleting the resource (usually FTP, HTTP, etc) MoveTo(IDirectory) Moves the file (not used) public override IFile MoveTo(IDirectory directory) Parameters directory IDirectory Not used Returns IFile Read() Reads the web page public override string Read() Returns string The content as a string ReadBinary() Reads the web page public override byte[] ReadBinary() Returns byte[] The content as a byte array Rename(string) Renames the file (not used) public override IFile Rename(string newName) Parameters newName string Not used Returns IFile Write(byte[], FileMode) Not used public override byte[] Write(byte[] content, FileMode mode = FileMode.Create) Parameters content byte[] Not used mode FileMode Not used Returns byte[] The result of the write or original content Write(string, FileMode, Encoding?) Not used public override string Write(string content, FileMode mode = FileMode.Create, Encoding? encoding = null) Parameters content string Not used mode FileMode Not used encoding Encoding Not used Returns string The result of the write or original content See Also FileBase<InternalFileType, FileType>"
  },
  "api/FileCurator.Default.Ftp.FtpFileSystem.html": {
    "href": "api/FileCurator.Default.Ftp.FtpFileSystem.html",
    "title": "Class FtpFileSystem | FileCurator API Reference",
    "summary": "Class FtpFileSystem Namespace FileCurator.Default.Ftp Assembly FileCurator.dll Ftp file system public class FtpFileSystem : FileSystemBase, IDisposable, IFileSystem Inheritance object FileSystemBase FtpFileSystem Implements IDisposable IFileSystem Inherited Members FileSystemBase.HandleRegex FileSystemBase.CanHandle(string) FileSystemBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HandleRegexString Relative starter protected override string HandleRegexString { get; } Property Value string Name Name of the file system public override string Name { get; } Property Value string Order Gets the order (lower numbers occur first). public override int Order { get; } Property Value int The order. Methods AbsolutePath(string) Gets the absolute path of the variable passed in protected override string AbsolutePath(string path) Parameters path string Path to convert to absolute Returns string The absolute path of the path passed in Directory(string, Credentials?) Gets the directory representation for the directory public override IDirectory Directory(string path, Credentials? credentials = null) Parameters path string Path to the directory credentials Credentials The credentials. Returns IDirectory The directory object Dispose(bool) Used to dispose of any resources protected override void Dispose(bool managed) Parameters managed bool File(string, Credentials?) Gets the class representation for the file public override IFile File(string path, Credentials? credentials = null) Parameters path string Path to the file credentials Credentials The credentials. Returns IFile The file object See Also FileSystemBase"
  },
  "api/FileCurator.Default.Ftp.html": {
    "href": "api/FileCurator.Default.Ftp.html",
    "title": "Namespace FileCurator.Default.Ftp | FileCurator API Reference",
    "summary": "Namespace FileCurator.Default.Ftp Classes FtpDirectory Ftp directory FtpFile Ftp File FtpFileSystem Ftp file system"
  },
  "api/FileCurator.Default.HttpFileSystem.html": {
    "href": "api/FileCurator.Default.HttpFileSystem.html",
    "title": "Class HttpFileSystem | FileCurator API Reference",
    "summary": "Class HttpFileSystem Namespace FileCurator.Default Assembly FileCurator.dll HTTP file system public class HttpFileSystem : FileSystemBase, IDisposable, IFileSystem Inheritance object FileSystemBase HttpFileSystem Implements IDisposable IFileSystem Inherited Members FileSystemBase.HandleRegex FileSystemBase.CanHandle(string) FileSystemBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HttpFileSystem(InternalHttpClientFactory) Initializes a new instance of the HttpFileSystem class. public HttpFileSystem(InternalHttpClientFactory httpClientFactory) Parameters httpClientFactory InternalHttpClientFactory The HTTP client factory. Properties HandleRegexString Relative starter protected override string HandleRegexString { get; } Property Value string Name Name of the file system public override string Name { get; } Property Value string Order Gets the order (lower numbers occur first). public override int Order { get; } Property Value int The order. Methods AbsolutePath(string) Gets the absolute path of the variable passed in protected override string AbsolutePath(string path) Parameters path string Path to convert to absolute Returns string The absolute path of the path passed in Directory(string, Credentials?) Gets the directory representation for the directory public override IDirectory Directory(string path, Credentials? credentials = null) Parameters path string Path to the directory credentials Credentials The credentials. Returns IDirectory The directory object Dispose(bool) Used to dispose of any resources protected override void Dispose(bool managed) Parameters managed bool File(string, Credentials?) Gets the class representation for the file public override IFile File(string path, Credentials? credentials = null) Parameters path string Path to the file credentials Credentials The credentials. Returns IFile The file object"
  },
  "api/FileCurator.Default.LocalDirectory.html": {
    "href": "api/FileCurator.Default.LocalDirectory.html",
    "title": "Class LocalDirectory | FileCurator API Reference",
    "summary": "Class LocalDirectory Namespace FileCurator.Default Assembly FileCurator.dll Local directory class public class LocalDirectory : DirectoryBase<DirectoryInfo, LocalDirectory>, IDirectory, IComparable<IDirectory>, IEnumerable<IFile>, IEnumerable, IComparable, IEquatable<IDirectory> Inheritance object DirectoryBase<DirectoryInfo, LocalDirectory> LocalDirectory Implements IDirectory IComparable<IDirectory> IEnumerable<IFile> IEnumerable IComparable IEquatable<IDirectory> Inherited Members DirectoryBase<DirectoryInfo, LocalDirectory>.Accessed DirectoryBase<DirectoryInfo, LocalDirectory>.Created DirectoryBase<DirectoryInfo, LocalDirectory>.Credentials DirectoryBase<DirectoryInfo, LocalDirectory>.Exists DirectoryBase<DirectoryInfo, LocalDirectory>.FullName DirectoryBase<DirectoryInfo, LocalDirectory>.Modified DirectoryBase<DirectoryInfo, LocalDirectory>.Name DirectoryBase<DirectoryInfo, LocalDirectory>.Parent DirectoryBase<DirectoryInfo, LocalDirectory>.Root DirectoryBase<DirectoryInfo, LocalDirectory>.Size DirectoryBase<DirectoryInfo, LocalDirectory>.InternalDirectory DirectoryBase<DirectoryInfo, LocalDirectory>.CompareTo(IDirectory) DirectoryBase<DirectoryInfo, LocalDirectory>.CompareTo(object) DirectoryBase<DirectoryInfo, LocalDirectory>.CopyTo(IDirectory, CopyOptions) DirectoryBase<DirectoryInfo, LocalDirectory>.CopyToAsync(IDirectory, CopyOptions) DirectoryBase<DirectoryInfo, LocalDirectory>.Create() DirectoryBase<DirectoryInfo, LocalDirectory>.CreateAsync() DirectoryBase<DirectoryInfo, LocalDirectory>.Delete() DirectoryBase<DirectoryInfo, LocalDirectory>.DeleteAsync() DirectoryBase<DirectoryInfo, LocalDirectory>.EnumerateDirectories(string, SearchOption) DirectoryBase<DirectoryInfo, LocalDirectory>.EnumerateDirectories(Predicate<IDirectory>, SearchOption) DirectoryBase<DirectoryInfo, LocalDirectory>.EnumerateFiles(string, SearchOption) DirectoryBase<DirectoryInfo, LocalDirectory>.EnumerateFiles(Predicate<IFile>, SearchOption) DirectoryBase<DirectoryInfo, LocalDirectory>.Equals(object) DirectoryBase<DirectoryInfo, LocalDirectory>.Equals(IDirectory) DirectoryBase<DirectoryInfo, LocalDirectory>.GetEnumerator() DirectoryBase<DirectoryInfo, LocalDirectory>.GetHashCode() DirectoryBase<DirectoryInfo, LocalDirectory>.MoveTo(IDirectory) DirectoryBase<DirectoryInfo, LocalDirectory>.MoveToAsync(IDirectory) DirectoryBase<DirectoryInfo, LocalDirectory>.Rename(string) DirectoryBase<DirectoryInfo, LocalDirectory>.RenameAsync(string) DirectoryBase<DirectoryInfo, LocalDirectory>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LocalDirectory() Constructor public LocalDirectory() LocalDirectory(DirectoryInfo) Constructor public LocalDirectory(DirectoryInfo directory) Parameters directory DirectoryInfo Internal directory LocalDirectory(string) Constructor public LocalDirectory(string path) Parameters path string Path to the directory Properties Accessed Time accessed (UTC time) public override DateTime Accessed { get; } Property Value DateTime Created Time created (UTC time) public override DateTime Created { get; } Property Value DateTime Exists Does the directory exist? public override bool Exists { get; } Property Value bool FullName Full path of the directory public override string FullName { get; } Property Value string Modified Time modified (UTC time) public override DateTime Modified { get; } Property Value DateTime Name Name of the directory public override string Name { get; } Property Value string Parent Parent directory public override IDirectory Parent { get; } Property Value IDirectory Root Root directory public override IDirectory Root { get; } Property Value IDirectory Size Size of the directory public override long Size { get; } Property Value long Methods Create() Creates the directory public override IDirectory Create() Returns IDirectory Delete() Deletes the directory public override IDirectory Delete() Returns IDirectory EnumerateDirectories(string, SearchOption) Enumerates directories under this directory public override IEnumerable<IDirectory> EnumerateDirectories(string searchPattern = \"*\", SearchOption options = SearchOption.TopDirectoryOnly) Parameters searchPattern string Search pattern options SearchOption Search options Returns IEnumerable<IDirectory> List of directories under this directory EnumerateFiles(string, SearchOption) Enumerates files under this directory public override IEnumerable<IFile> EnumerateFiles(string searchPattern = \"*\", SearchOption options = SearchOption.TopDirectoryOnly) Parameters searchPattern string Search pattern options SearchOption Search options Returns IEnumerable<IFile> List of files under this directory Rename(string) Renames the directory public override IDirectory Rename(string name) Parameters name string Name of the new directory Returns IDirectory"
  },
  "api/FileCurator.Default.LocalFile.html": {
    "href": "api/FileCurator.Default.LocalFile.html",
    "title": "Class LocalFile | FileCurator API Reference",
    "summary": "Class LocalFile Namespace FileCurator.Default Assembly FileCurator.dll Basic local file class public class LocalFile : FileBase<FileInfo, LocalFile>, IFile, IComparable<IFile>, IComparable, IEquatable<IFile> Inheritance object FileBase<FileInfo, LocalFile> LocalFile Implements IFile IComparable<IFile> IComparable IEquatable<IFile> Inherited Members FileBase<FileInfo, LocalFile>.Accessed FileBase<FileInfo, LocalFile>.Created FileBase<FileInfo, LocalFile>.Credentials FileBase<FileInfo, LocalFile>.Directory FileBase<FileInfo, LocalFile>.Exists FileBase<FileInfo, LocalFile>.Extension FileBase<FileInfo, LocalFile>.FullName FileBase<FileInfo, LocalFile>.Length FileBase<FileInfo, LocalFile>.Modified FileBase<FileInfo, LocalFile>.Name FileBase<FileInfo, LocalFile>.FormatManager FileBase<FileInfo, LocalFile>.InternalFile FileBase<FileInfo, LocalFile>.CompareTo(IFile) FileBase<FileInfo, LocalFile>.CompareTo(object) FileBase<FileInfo, LocalFile>.CopyTo(IDirectory, bool) FileBase<FileInfo, LocalFile>.CopyToAsync(IDirectory, bool) FileBase<FileInfo, LocalFile>.Delete() FileBase<FileInfo, LocalFile>.DeleteAsync() FileBase<FileInfo, LocalFile>.Equals(object) FileBase<FileInfo, LocalFile>.Equals(IFile) FileBase<FileInfo, LocalFile>.GetHashCode() FileBase<FileInfo, LocalFile>.MoveTo(IDirectory) FileBase<FileInfo, LocalFile>.MoveToAsync(IDirectory) FileBase<FileInfo, LocalFile>.Parse<TFile>() FileBase<FileInfo, LocalFile>.Parse() FileBase<FileInfo, LocalFile>.ParseAsync<TFile>() FileBase<FileInfo, LocalFile>.ParseAsync() FileBase<FileInfo, LocalFile>.Read() FileBase<FileInfo, LocalFile>.ReadAsync() FileBase<FileInfo, LocalFile>.ReadBinary() FileBase<FileInfo, LocalFile>.ReadBinaryAsync() FileBase<FileInfo, LocalFile>.Rename(string) FileBase<FileInfo, LocalFile>.RenameAsync(string) FileBase<FileInfo, LocalFile>.ToString() FileBase<FileInfo, LocalFile>.Write(string, FileMode, Encoding) FileBase<FileInfo, LocalFile>.Write(byte[], FileMode) FileBase<FileInfo, LocalFile>.Write(IGenericFile, FileMode) FileBase<FileInfo, LocalFile>.WriteAsync(string, FileMode, Encoding) FileBase<FileInfo, LocalFile>.WriteAsync(byte[], FileMode) FileBase<FileInfo, LocalFile>.WriteAsync(IGenericFile, FileMode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LocalFile() Constructor public LocalFile() LocalFile(FileInfo) Constructor public LocalFile(FileInfo file) Parameters file FileInfo File to use LocalFile(string) Constructor public LocalFile(string path) Parameters path string Path to the file Properties Accessed Last time accessed (UTC time) public override DateTime Accessed { get; } Property Value DateTime Created Time created (UTC time) public override DateTime Created { get; } Property Value DateTime Directory Directory the file is within public override IDirectory Directory { get; } Property Value IDirectory Exists Does the file exist? public override bool Exists { get; } Property Value bool Extension File extension public override string Extension { get; } Property Value string FullName Full path public override string FullName { get; } Property Value string Length Size of the file public override long Length { get; } Property Value long Modified Time modified (UTC time) public override DateTime Modified { get; } Property Value DateTime Name Name of the file public override string Name { get; } Property Value string Methods CopyTo(IDirectory, bool) Copies the file to another directory public override IFile CopyTo(IDirectory directory, bool overwrite) Parameters directory IDirectory Directory to copy the file to overwrite bool Should the file overwrite another file if found Returns IFile The newly created file Delete() Deletes the file public override string Delete() Returns string Any response for deleting the resource (usually FTP, HTTP, etc) MoveTo(IDirectory) Moves the file to a new directory public override IFile MoveTo(IDirectory directory) Parameters directory IDirectory Directory to move to Returns IFile Read() Reads the file in as a string public override string Read() Returns string The file contents as a string ReadBinary() Reads a file as binary public override byte[] ReadBinary() Returns byte[] The file contents as a byte array Rename(string) Renames the file public override IFile Rename(string newName) Parameters newName string New name for the file Returns IFile Write(byte[], FileMode) Writes content to the file public override byte[] Write(byte[] content, FileMode mode = FileMode.Create) Parameters content byte[] Content to write mode FileMode Mode to open the file as Returns byte[] The result of the write or original content Write(string, FileMode, Encoding?) Writes content to the file public override string Write(string content, FileMode mode = FileMode.Create, Encoding? encoding = null) Parameters content string Content to write mode FileMode Mode to open the file as encoding Encoding Encoding to use for the content Returns string The result of the write or original content"
  },
  "api/FileCurator.Default.Memory.MemoryDirectory.html": {
    "href": "api/FileCurator.Default.Memory.MemoryDirectory.html",
    "title": "Class MemoryDirectory | FileCurator API Reference",
    "summary": "Class MemoryDirectory Namespace FileCurator.Default.Memory Assembly FileCurator.dll Memory directory public class MemoryDirectory : DirectoryBase<string, MemoryDirectory>, IDirectory, IComparable<IDirectory>, IEnumerable<IFile>, IEnumerable, IComparable, IEquatable<IDirectory> Inheritance object DirectoryBase<string, MemoryDirectory> MemoryDirectory Implements IDirectory IComparable<IDirectory> IEnumerable<IFile> IEnumerable IComparable IEquatable<IDirectory> Inherited Members DirectoryBase<string, MemoryDirectory>.Accessed DirectoryBase<string, MemoryDirectory>.Created DirectoryBase<string, MemoryDirectory>.Credentials DirectoryBase<string, MemoryDirectory>.Exists DirectoryBase<string, MemoryDirectory>.FullName DirectoryBase<string, MemoryDirectory>.Modified DirectoryBase<string, MemoryDirectory>.Name DirectoryBase<string, MemoryDirectory>.Parent DirectoryBase<string, MemoryDirectory>.Root DirectoryBase<string, MemoryDirectory>.Size DirectoryBase<string, MemoryDirectory>.InternalDirectory DirectoryBase<string, MemoryDirectory>.CompareTo(IDirectory) DirectoryBase<string, MemoryDirectory>.CompareTo(object) DirectoryBase<string, MemoryDirectory>.CopyTo(IDirectory, CopyOptions) DirectoryBase<string, MemoryDirectory>.CopyToAsync(IDirectory, CopyOptions) DirectoryBase<string, MemoryDirectory>.Create() DirectoryBase<string, MemoryDirectory>.CreateAsync() DirectoryBase<string, MemoryDirectory>.Delete() DirectoryBase<string, MemoryDirectory>.DeleteAsync() DirectoryBase<string, MemoryDirectory>.EnumerateDirectories(string, SearchOption) DirectoryBase<string, MemoryDirectory>.EnumerateDirectories(Predicate<IDirectory>, SearchOption) DirectoryBase<string, MemoryDirectory>.EnumerateFiles(string, SearchOption) DirectoryBase<string, MemoryDirectory>.EnumerateFiles(Predicate<IFile>, SearchOption) DirectoryBase<string, MemoryDirectory>.Equals(object) DirectoryBase<string, MemoryDirectory>.Equals(IDirectory) DirectoryBase<string, MemoryDirectory>.GetEnumerator() DirectoryBase<string, MemoryDirectory>.GetHashCode() DirectoryBase<string, MemoryDirectory>.MoveTo(IDirectory) DirectoryBase<string, MemoryDirectory>.MoveToAsync(IDirectory) DirectoryBase<string, MemoryDirectory>.Rename(string) DirectoryBase<string, MemoryDirectory>.RenameAsync(string) DirectoryBase<string, MemoryDirectory>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MemoryDirectory() Constructor public MemoryDirectory() MemoryDirectory(string, Credentials?) Constructor public MemoryDirectory(string path, Credentials? credentials = null) Parameters path string Path to the directory credentials Credentials The credentials. Properties Accessed returns now public override DateTime Accessed { get; } Property Value DateTime Created returns now public override DateTime Created { get; } Property Value DateTime Exists returns true public override bool Exists { get; } Property Value bool FullName Full path public override string FullName { get; } Property Value string Modified returns now public override DateTime Modified { get; } Property Value DateTime Name Full path public override string Name { get; } Property Value string Parent Full path public override IDirectory? Parent { get; } Property Value IDirectory Root Root public override IDirectory Root { get; } Property Value IDirectory Size Size (returns 0) public override long Size { get; } Property Value long Methods Create() Not used public override IDirectory Create() Returns IDirectory This Delete() Not used public override IDirectory Delete() Returns IDirectory EnumerateDirectories(string, SearchOption) Not used public override IEnumerable<IDirectory> EnumerateDirectories(string searchPattern, SearchOption options = SearchOption.TopDirectoryOnly) Parameters searchPattern string Search pattern options SearchOption Search options Returns IEnumerable<IDirectory> List of directories under this directory EnumerateFiles(string, SearchOption) Not used public override IEnumerable<IFile> EnumerateFiles(string searchPattern = \"*\", SearchOption options = SearchOption.TopDirectoryOnly) Parameters searchPattern string options SearchOption Returns IEnumerable<IFile> MoveTo(IDirectory) Moves this directory under another directory public override IDirectory MoveTo(IDirectory directory) Parameters directory IDirectory Directory to move to Returns IDirectory Rename(string) Not used public override IDirectory Rename(string name) Parameters name string The name. Returns IDirectory See Also DirectoryBase<TInternalDirectoryType, TDirectoryType>"
  },
  "api/FileCurator.Default.Memory.MemoryFile.html": {
    "href": "api/FileCurator.Default.Memory.MemoryFile.html",
    "title": "Class MemoryFile | FileCurator API Reference",
    "summary": "Class MemoryFile Namespace FileCurator.Default.Memory Assembly FileCurator.dll Memory file public class MemoryFile : FileBase<string, MemoryFile>, IFile, IComparable<IFile>, IComparable, IEquatable<IFile> Inheritance object FileBase<string, MemoryFile> MemoryFile Implements IFile IComparable<IFile> IComparable IEquatable<IFile> Inherited Members FileBase<string, MemoryFile>.Accessed FileBase<string, MemoryFile>.Created FileBase<string, MemoryFile>.Credentials FileBase<string, MemoryFile>.Directory FileBase<string, MemoryFile>.Exists FileBase<string, MemoryFile>.Extension FileBase<string, MemoryFile>.FullName FileBase<string, MemoryFile>.Length FileBase<string, MemoryFile>.Modified FileBase<string, MemoryFile>.Name FileBase<string, MemoryFile>.FormatManager FileBase<string, MemoryFile>.InternalFile FileBase<string, MemoryFile>.CompareTo(IFile) FileBase<string, MemoryFile>.CompareTo(object) FileBase<string, MemoryFile>.CopyTo(IDirectory, bool) FileBase<string, MemoryFile>.CopyToAsync(IDirectory, bool) FileBase<string, MemoryFile>.Delete() FileBase<string, MemoryFile>.DeleteAsync() FileBase<string, MemoryFile>.Equals(object) FileBase<string, MemoryFile>.Equals(IFile) FileBase<string, MemoryFile>.GetHashCode() FileBase<string, MemoryFile>.MoveTo(IDirectory) FileBase<string, MemoryFile>.MoveToAsync(IDirectory) FileBase<string, MemoryFile>.Parse<TFile>() FileBase<string, MemoryFile>.Parse() FileBase<string, MemoryFile>.ParseAsync<TFile>() FileBase<string, MemoryFile>.ParseAsync() FileBase<string, MemoryFile>.Read() FileBase<string, MemoryFile>.ReadAsync() FileBase<string, MemoryFile>.ReadBinary() FileBase<string, MemoryFile>.ReadBinaryAsync() FileBase<string, MemoryFile>.Rename(string) FileBase<string, MemoryFile>.RenameAsync(string) FileBase<string, MemoryFile>.ToString() FileBase<string, MemoryFile>.Write(string, FileMode, Encoding) FileBase<string, MemoryFile>.Write(byte[], FileMode) FileBase<string, MemoryFile>.Write(IGenericFile, FileMode) FileBase<string, MemoryFile>.WriteAsync(string, FileMode, Encoding) FileBase<string, MemoryFile>.WriteAsync(byte[], FileMode) FileBase<string, MemoryFile>.WriteAsync(IGenericFile, FileMode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MemoryFile() Initializes a new instance of the MemoryFile class. public MemoryFile() MemoryFile(string, Credentials?) Initializes a new instance of the MemoryFile class. public MemoryFile(string path, Credentials? credentials) Parameters path string The path. credentials Credentials The credentials. Properties Accessed Last time accessed (UTC time) public override DateTime Accessed { get; } Property Value DateTime Created Time created (UTC time) public override DateTime Created { get; } Property Value DateTime Directory Directory the file is within public override IDirectory? Directory { get; } Property Value IDirectory Exists Does the file exist? public override bool Exists { get; } Property Value bool Extension File extension public override string Extension { get; } Property Value string FullName Full path public override string FullName { get; } Property Value string Length Size of the file public override long Length { get; } Property Value long Modified Time modified (UTC time) public override DateTime Modified { get; } Property Value DateTime Name Name of the file public override string Name { get; } Property Value string Methods CopyTo(IDirectory, bool) Copies the file to another directory public override IFile CopyTo(IDirectory directory, bool overwrite) Parameters directory IDirectory Directory to copy the file to overwrite bool Should the file overwrite another file if found Returns IFile The newly created file Delete() Deletes the file public override string Delete() Returns string Any response for deleting the resource (usually FTP, HTTP, etc) MoveTo(IDirectory) Moves the file to a new directory public override IFile MoveTo(IDirectory directory) Parameters directory IDirectory Directory to move to Returns IFile The resulting file. Read() Reads the file in as a string public override string Read() Returns string The file contents as a string ReadBinary() Reads a file as binary public override byte[] ReadBinary() Returns byte[] The file contents as a byte array Rename(string) Renames the file public override IFile Rename(string newName) Parameters newName string New name for the file Returns IFile Renames the file. Write(byte[], FileMode) Writes content to the file public override byte[] Write(byte[] content, FileMode mode = FileMode.Create) Parameters content byte[] Content to write mode FileMode Mode to open the file as Returns byte[] The result of the write or original content Write(string, FileMode, Encoding?) Writes content to the file public override string Write(string content, FileMode mode = FileMode.Create, Encoding? encoding = null) Parameters content string Content to write mode FileMode Mode to open the file as encoding Encoding Encoding to use for the content Returns string The result of the write or original content See Also FileBase<InternalFileType, FileType>"
  },
  "api/FileCurator.Default.Memory.MemoryFileSystem.html": {
    "href": "api/FileCurator.Default.Memory.MemoryFileSystem.html",
    "title": "Class MemoryFileSystem | FileCurator API Reference",
    "summary": "Class MemoryFileSystem Namespace FileCurator.Default.Memory Assembly FileCurator.dll Temporary file system held in memory (this is not for memory mapped files) public class MemoryFileSystem : FileSystemBase, IDisposable, IFileSystem Inheritance object FileSystemBase MemoryFileSystem Implements IDisposable IFileSystem Inherited Members FileSystemBase.HandleRegex FileSystemBase.CanHandle(string) FileSystemBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HandleRegexString Regex string used to determine if the file system can handle the path protected override string HandleRegexString { get; } Property Value string Name Name of the file system public override string Name { get; } Property Value string Order Gets the order (lower numbers occur first). public override int Order { get; } Property Value int The order. Methods AbsolutePath(string) Gets the absolute path of the variable passed in protected override string AbsolutePath(string path) Parameters path string Path to convert to absolute Returns string The absolute path of the path passed in Directory(string, Credentials?) Gets the directory representation for the directory public override IDirectory Directory(string path, Credentials? credentials = null) Parameters path string Path to the directory credentials Credentials The credentials. Returns IDirectory The directory object Dispose(bool) Function to override in order to dispose objects protected override void Dispose(bool managed) Parameters managed bool File(string, Credentials?) Gets the class representation for the file public override IFile File(string path, Credentials? credentials = null) Parameters path string Path to the file credentials Credentials The credentials. Returns IFile The file object See Also FileSystemBase"
  },
  "api/FileCurator.Default.Memory.html": {
    "href": "api/FileCurator.Default.Memory.html",
    "title": "Namespace FileCurator.Default.Memory | FileCurator API Reference",
    "summary": "Namespace FileCurator.Default.Memory Classes MemoryDirectory Memory directory MemoryFile Memory file MemoryFileSystem Temporary file system held in memory (this is not for memory mapped files)"
  },
  "api/FileCurator.Default.NetworkFileSystem.html": {
    "href": "api/FileCurator.Default.NetworkFileSystem.html",
    "title": "Class NetworkFileSystem | FileCurator API Reference",
    "summary": "Class NetworkFileSystem Namespace FileCurator.Default Assembly FileCurator.dll Network file system public class NetworkFileSystem : LocalFileSystemBase, IDisposable, IFileSystem Inheritance object FileSystemBase LocalFileSystemBase NetworkFileSystem Implements IDisposable IFileSystem Inherited Members LocalFileSystemBase.Directory(string, Credentials) LocalFileSystemBase.File(string, Credentials) LocalFileSystemBase.Dispose(bool) FileSystemBase.HandleRegex FileSystemBase.CanHandle(string) FileSystemBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HandleRegexString Relative starter protected override string HandleRegexString { get; } Property Value string Name Name of the file system public override string Name { get; } Property Value string Order Gets the order (lower numbers occur first). public override int Order { get; } Property Value int The order. Methods AbsolutePath(string) Gets the absolute path of the variable passed in protected override string AbsolutePath(string path) Parameters path string Path to convert to absolute Returns string The absolute path of the path passed in"
  },
  "api/FileCurator.Default.RelativeLocalFileSystem.html": {
    "href": "api/FileCurator.Default.RelativeLocalFileSystem.html",
    "title": "Class RelativeLocalFileSystem | FileCurator API Reference",
    "summary": "Class RelativeLocalFileSystem Namespace FileCurator.Default Assembly FileCurator.dll Relative local file system public class RelativeLocalFileSystem : LocalFileSystemBase, IDisposable, IFileSystem Inheritance object FileSystemBase LocalFileSystemBase RelativeLocalFileSystem Implements IDisposable IFileSystem Inherited Members LocalFileSystemBase.Directory(string, Credentials) LocalFileSystemBase.File(string, Credentials) LocalFileSystemBase.Dispose(bool) FileSystemBase.HandleRegex FileSystemBase.CanHandle(string) FileSystemBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HandleRegexString Relative starter protected override string HandleRegexString { get; } Property Value string Name Name of the file system public override string Name { get; } Property Value string Order Gets the order (lower numbers occur first). public override int Order { get; } Property Value int The order. Methods AbsolutePath(string) Gets the absolute path of the variable passed in protected override string AbsolutePath(string path) Parameters path string Path to convert to absolute Returns string The absolute path of the path passed in"
  },
  "api/FileCurator.Default.ResourceDirectory.html": {
    "href": "api/FileCurator.Default.ResourceDirectory.html",
    "title": "Class ResourceDirectory | FileCurator API Reference",
    "summary": "Class ResourceDirectory Namespace FileCurator.Default Assembly FileCurator.dll Directory class public class ResourceDirectory : DirectoryBase<string, ResourceDirectory>, IDirectory, IComparable<IDirectory>, IEnumerable<IFile>, IEnumerable, IComparable, IEquatable<IDirectory> Inheritance object DirectoryBase<string, ResourceDirectory> ResourceDirectory Implements IDirectory IComparable<IDirectory> IEnumerable<IFile> IEnumerable IComparable IEquatable<IDirectory> Inherited Members DirectoryBase<string, ResourceDirectory>.Accessed DirectoryBase<string, ResourceDirectory>.Created DirectoryBase<string, ResourceDirectory>.Credentials DirectoryBase<string, ResourceDirectory>.Exists DirectoryBase<string, ResourceDirectory>.FullName DirectoryBase<string, ResourceDirectory>.Modified DirectoryBase<string, ResourceDirectory>.Name DirectoryBase<string, ResourceDirectory>.Parent DirectoryBase<string, ResourceDirectory>.Root DirectoryBase<string, ResourceDirectory>.Size DirectoryBase<string, ResourceDirectory>.InternalDirectory DirectoryBase<string, ResourceDirectory>.CompareTo(IDirectory) DirectoryBase<string, ResourceDirectory>.CompareTo(object) DirectoryBase<string, ResourceDirectory>.CopyTo(IDirectory, CopyOptions) DirectoryBase<string, ResourceDirectory>.CopyToAsync(IDirectory, CopyOptions) DirectoryBase<string, ResourceDirectory>.Create() DirectoryBase<string, ResourceDirectory>.CreateAsync() DirectoryBase<string, ResourceDirectory>.Delete() DirectoryBase<string, ResourceDirectory>.DeleteAsync() DirectoryBase<string, ResourceDirectory>.EnumerateDirectories(string, SearchOption) DirectoryBase<string, ResourceDirectory>.EnumerateDirectories(Predicate<IDirectory>, SearchOption) DirectoryBase<string, ResourceDirectory>.EnumerateFiles(string, SearchOption) DirectoryBase<string, ResourceDirectory>.EnumerateFiles(Predicate<IFile>, SearchOption) DirectoryBase<string, ResourceDirectory>.Equals(object) DirectoryBase<string, ResourceDirectory>.Equals(IDirectory) DirectoryBase<string, ResourceDirectory>.GetEnumerator() DirectoryBase<string, ResourceDirectory>.GetHashCode() DirectoryBase<string, ResourceDirectory>.MoveTo(IDirectory) DirectoryBase<string, ResourceDirectory>.MoveToAsync(IDirectory) DirectoryBase<string, ResourceDirectory>.Rename(string) DirectoryBase<string, ResourceDirectory>.RenameAsync(string) DirectoryBase<string, ResourceDirectory>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ResourceDirectory() Constructor public ResourceDirectory() ResourceDirectory(string, Credentials?) Constructor public ResourceDirectory(string path, Credentials? credentials = null) Parameters path string Path to the directory credentials Credentials The credentials. Properties Accessed returns now public override DateTime Accessed { get; } Property Value DateTime Created returns now public override DateTime Created { get; } Property Value DateTime Exists returns true public override bool Exists { get; } Property Value bool FullName Full path public override string FullName { get; } Property Value string Modified returns now public override DateTime Modified { get; } Property Value DateTime Name Full path public override string Name { get; } Property Value string Parent Full path public override IDirectory? Parent { get; } Property Value IDirectory Root Root public override IDirectory? Root { get; } Property Value IDirectory Size Size (returns 0) public override long Size { get; } Property Value long Methods Create() Not used public override IDirectory Create() Returns IDirectory This Delete() Not used public override IDirectory Delete() Returns IDirectory EnumerateDirectories(string, SearchOption) Not used public override IEnumerable<IDirectory> EnumerateDirectories(string searchPattern, SearchOption options = SearchOption.TopDirectoryOnly) Parameters searchPattern string options SearchOption Returns IEnumerable<IDirectory> EnumerateFiles(string, SearchOption) Not used public override IEnumerable<IFile> EnumerateFiles(string searchPattern = \"*\", SearchOption options = SearchOption.TopDirectoryOnly) Parameters searchPattern string options SearchOption Returns IEnumerable<IFile> Rename(string) Not used public override IDirectory Rename(string name) Parameters name string The name. Returns IDirectory"
  },
  "api/FileCurator.Default.ResourceFile.html": {
    "href": "api/FileCurator.Default.ResourceFile.html",
    "title": "Class ResourceFile | FileCurator API Reference",
    "summary": "Class ResourceFile Namespace FileCurator.Default Assembly FileCurator.dll Basic Resource file class public class ResourceFile : FileBase<string, ResourceFile>, IFile, IComparable<IFile>, IComparable, IEquatable<IFile> Inheritance object FileBase<string, ResourceFile> ResourceFile Implements IFile IComparable<IFile> IComparable IEquatable<IFile> Inherited Members FileBase<string, ResourceFile>.Accessed FileBase<string, ResourceFile>.Created FileBase<string, ResourceFile>.Credentials FileBase<string, ResourceFile>.Directory FileBase<string, ResourceFile>.Exists FileBase<string, ResourceFile>.Extension FileBase<string, ResourceFile>.FullName FileBase<string, ResourceFile>.Length FileBase<string, ResourceFile>.Modified FileBase<string, ResourceFile>.Name FileBase<string, ResourceFile>.FormatManager FileBase<string, ResourceFile>.InternalFile FileBase<string, ResourceFile>.CompareTo(IFile) FileBase<string, ResourceFile>.CompareTo(object) FileBase<string, ResourceFile>.CopyTo(IDirectory, bool) FileBase<string, ResourceFile>.CopyToAsync(IDirectory, bool) FileBase<string, ResourceFile>.Delete() FileBase<string, ResourceFile>.DeleteAsync() FileBase<string, ResourceFile>.Equals(object) FileBase<string, ResourceFile>.Equals(IFile) FileBase<string, ResourceFile>.GetHashCode() FileBase<string, ResourceFile>.MoveTo(IDirectory) FileBase<string, ResourceFile>.MoveToAsync(IDirectory) FileBase<string, ResourceFile>.Parse<TFile>() FileBase<string, ResourceFile>.Parse() FileBase<string, ResourceFile>.ParseAsync<TFile>() FileBase<string, ResourceFile>.ParseAsync() FileBase<string, ResourceFile>.Read() FileBase<string, ResourceFile>.ReadAsync() FileBase<string, ResourceFile>.ReadBinary() FileBase<string, ResourceFile>.ReadBinaryAsync() FileBase<string, ResourceFile>.Rename(string) FileBase<string, ResourceFile>.RenameAsync(string) FileBase<string, ResourceFile>.ToString() FileBase<string, ResourceFile>.Write(string, FileMode, Encoding) FileBase<string, ResourceFile>.Write(byte[], FileMode) FileBase<string, ResourceFile>.Write(IGenericFile, FileMode) FileBase<string, ResourceFile>.WriteAsync(string, FileMode, Encoding) FileBase<string, ResourceFile>.WriteAsync(byte[], FileMode) FileBase<string, ResourceFile>.WriteAsync(IGenericFile, FileMode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ResourceFile() Constructor public ResourceFile() ResourceFile(string, Credentials?) Constructor public ResourceFile(string path, Credentials? credentials = null) Parameters path string Path to the file credentials Credentials The credentials. Properties Accessed Time accessed (Just returns now) public override DateTime Accessed { get; } Property Value DateTime Created Time created (Just returns now) public override DateTime Created { get; } Property Value DateTime Directory Directory base path public override IDirectory Directory { get; } Property Value IDirectory Exists Does it exist? Always true. public override bool Exists { get; } Property Value bool Extension Extension (always empty) public override string Extension { get; } Property Value string FullName Full path public override string FullName { get; } Property Value string Length Size of the file public override long Length { get; } Property Value long Modified Time modified (just returns now) public override DateTime Modified { get; } Property Value DateTime Name Absolute path of the file (same as FullName) public override string Name { get; } Property Value string Methods CopyTo(IDirectory, bool) Copies the file to another directory public override IFile CopyTo(IDirectory directory, bool overwrite) Parameters directory IDirectory Directory to copy the file to overwrite bool Should the file overwrite another file if found Returns IFile The newly created file Delete() Delete (does nothing) public override string Delete() Returns string Any response for deleting the resource (usually FTP, HTTP, etc) MoveTo(IDirectory) Moves the file (not used) public override IFile MoveTo(IDirectory directory) Parameters directory IDirectory Not used Returns IFile Read() Reads the Resource page public override string Read() Returns string The content as a string ReadBinary() Reads the Resource page public override byte[] ReadBinary() Returns byte[] The content as a byte array Rename(string) Renames the file (not used) public override IFile Rename(string newName) Parameters newName string Not used Returns IFile Write(byte[], FileMode) Not used public override byte[] Write(byte[] content, FileMode mode = FileMode.Create) Parameters content byte[] Not used mode FileMode Not used Returns byte[] The result of the write or original content Write(string, FileMode, Encoding) Not used public override string Write(string content, FileMode mode = FileMode.Create, Encoding encoding = null) Parameters content string Not used mode FileMode Not used encoding Encoding Not used Returns string The result of the write or original content"
  },
  "api/FileCurator.Default.ResourceFileSystem.html": {
    "href": "api/FileCurator.Default.ResourceFileSystem.html",
    "title": "Class ResourceFileSystem | FileCurator API Reference",
    "summary": "Class ResourceFileSystem Namespace FileCurator.Default Assembly FileCurator.dll Resource file system public class ResourceFileSystem : FileSystemBase, IDisposable, IFileSystem Inheritance object FileSystemBase ResourceFileSystem Implements IDisposable IFileSystem Inherited Members FileSystemBase.HandleRegex FileSystemBase.CanHandle(string) FileSystemBase.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HandleRegexString Regex string used to determine if the file system can handle the path protected override string HandleRegexString { get; } Property Value string Name Name of the file system public override string Name { get; } Property Value string Order Gets the order (lower numbers occur first). public override int Order { get; } Property Value int The order. Methods AbsolutePath(string) Gets the absolute path of the variable passed in protected override string AbsolutePath(string path) Parameters path string Path to convert to absolute Returns string The absolute path of the path passed in Directory(string, Credentials) Gets the directory representation for the directory public override IDirectory Directory(string path, Credentials credentials = null) Parameters path string Path to the directory credentials Credentials The credentials. Returns IDirectory The directory object Dispose(bool) Function to override in order to dispose objects protected override void Dispose(bool managed) Parameters managed bool File(string, Credentials) Gets the class representation for the file public override IFile File(string path, Credentials credentials = null) Parameters path string Path to the file credentials Credentials The credentials. Returns IFile The file object"
  },
  "api/FileCurator.Default.WebDirectory.html": {
    "href": "api/FileCurator.Default.WebDirectory.html",
    "title": "Class WebDirectory | FileCurator API Reference",
    "summary": "Class WebDirectory Namespace FileCurator.Default Assembly FileCurator.dll Directory class public class WebDirectory : DirectoryBase<Uri, WebDirectory>, IDirectory, IComparable<IDirectory>, IEnumerable<IFile>, IEnumerable, IComparable, IEquatable<IDirectory> Inheritance object DirectoryBase<Uri, WebDirectory> WebDirectory Implements IDirectory IComparable<IDirectory> IEnumerable<IFile> IEnumerable IComparable IEquatable<IDirectory> Inherited Members DirectoryBase<Uri, WebDirectory>.Accessed DirectoryBase<Uri, WebDirectory>.Created DirectoryBase<Uri, WebDirectory>.Credentials DirectoryBase<Uri, WebDirectory>.Exists DirectoryBase<Uri, WebDirectory>.FullName DirectoryBase<Uri, WebDirectory>.Modified DirectoryBase<Uri, WebDirectory>.Name DirectoryBase<Uri, WebDirectory>.Parent DirectoryBase<Uri, WebDirectory>.Root DirectoryBase<Uri, WebDirectory>.Size DirectoryBase<Uri, WebDirectory>.InternalDirectory DirectoryBase<Uri, WebDirectory>.CompareTo(IDirectory) DirectoryBase<Uri, WebDirectory>.CompareTo(object) DirectoryBase<Uri, WebDirectory>.CopyTo(IDirectory, CopyOptions) DirectoryBase<Uri, WebDirectory>.CopyToAsync(IDirectory, CopyOptions) DirectoryBase<Uri, WebDirectory>.Create() DirectoryBase<Uri, WebDirectory>.CreateAsync() DirectoryBase<Uri, WebDirectory>.Delete() DirectoryBase<Uri, WebDirectory>.DeleteAsync() DirectoryBase<Uri, WebDirectory>.EnumerateDirectories(string, SearchOption) DirectoryBase<Uri, WebDirectory>.EnumerateDirectories(Predicate<IDirectory>, SearchOption) DirectoryBase<Uri, WebDirectory>.EnumerateFiles(string, SearchOption) DirectoryBase<Uri, WebDirectory>.EnumerateFiles(Predicate<IFile>, SearchOption) DirectoryBase<Uri, WebDirectory>.Equals(object) DirectoryBase<Uri, WebDirectory>.Equals(IDirectory) DirectoryBase<Uri, WebDirectory>.GetEnumerator() DirectoryBase<Uri, WebDirectory>.GetHashCode() DirectoryBase<Uri, WebDirectory>.MoveTo(IDirectory) DirectoryBase<Uri, WebDirectory>.MoveToAsync(IDirectory) DirectoryBase<Uri, WebDirectory>.Rename(string) DirectoryBase<Uri, WebDirectory>.RenameAsync(string) DirectoryBase<Uri, WebDirectory>.ToString() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WebDirectory() Constructor public WebDirectory() WebDirectory(string, HttpClient?, Credentials?) Constructor public WebDirectory(string path, HttpClient? client, Credentials? credentials = null) Parameters path string Path to the directory client HttpClient The client. credentials Credentials The credentials. WebDirectory(Uri?, HttpClient?, Credentials?) Constructor public WebDirectory(Uri? directory, HttpClient? client, Credentials? credentials = null) Parameters directory Uri Internal directory client HttpClient The client. credentials Credentials The credentials. Properties Accessed returns now public override DateTime Accessed { get; } Property Value DateTime Created returns now public override DateTime Created { get; } Property Value DateTime Exists returns true public override bool Exists { get; } Property Value bool FullName Full path public override string FullName { get; } Property Value string Modified returns now public override DateTime Modified { get; } Property Value DateTime Name Full path public override string Name { get; } Property Value string Parent Full path public override IDirectory? Parent { get; } Property Value IDirectory Root Root public override IDirectory? Root { get; } Property Value IDirectory Size Size (returns 0) public override long Size { get; } Property Value long Methods CopyTo(IDirectory, CopyOptions) Copies the directory to the specified parent directory public override IDirectory CopyTo(IDirectory directory, CopyOptions options = CopyOptions.CopyAlways) Parameters directory IDirectory Directory to copy to options CopyOptions Options Returns IDirectory Newly created directory Create() Not used public override IDirectory Create() Returns IDirectory Delete() Not used public override IDirectory Delete() Returns IDirectory EnumerateDirectories(string, SearchOption) Not used public override IEnumerable<IDirectory> EnumerateDirectories(string searchPattern, SearchOption options = SearchOption.TopDirectoryOnly) Parameters searchPattern string options SearchOption Returns IEnumerable<IDirectory> EnumerateFiles(string, SearchOption) Not used public override IEnumerable<IFile> EnumerateFiles(string searchPattern = \"*\", SearchOption options = SearchOption.TopDirectoryOnly) Parameters searchPattern string options SearchOption Returns IEnumerable<IFile> Rename(string) Not used public override IDirectory Rename(string name) Parameters name string Returns IDirectory"
  },
  "api/FileCurator.Default.WebFile.html": {
    "href": "api/FileCurator.Default.WebFile.html",
    "title": "Class WebFile | FileCurator API Reference",
    "summary": "Class WebFile Namespace FileCurator.Default Assembly FileCurator.dll Web file public class WebFile : FileBase<Uri, WebFile>, IFile, IComparable<IFile>, IComparable, IEquatable<IFile> Inheritance object FileBase<Uri, WebFile> WebFile Implements IFile IComparable<IFile> IComparable IEquatable<IFile> Inherited Members FileBase<Uri, WebFile>.Accessed FileBase<Uri, WebFile>.Created FileBase<Uri, WebFile>.Credentials FileBase<Uri, WebFile>.Directory FileBase<Uri, WebFile>.Exists FileBase<Uri, WebFile>.Extension FileBase<Uri, WebFile>.FullName FileBase<Uri, WebFile>.Length FileBase<Uri, WebFile>.Modified FileBase<Uri, WebFile>.Name FileBase<Uri, WebFile>.FormatManager FileBase<Uri, WebFile>.InternalFile FileBase<Uri, WebFile>.CompareTo(IFile) FileBase<Uri, WebFile>.CompareTo(object) FileBase<Uri, WebFile>.CopyTo(IDirectory, bool) FileBase<Uri, WebFile>.CopyToAsync(IDirectory, bool) FileBase<Uri, WebFile>.Delete() FileBase<Uri, WebFile>.DeleteAsync() FileBase<Uri, WebFile>.Equals(object) FileBase<Uri, WebFile>.Equals(IFile) FileBase<Uri, WebFile>.GetHashCode() FileBase<Uri, WebFile>.MoveTo(IDirectory) FileBase<Uri, WebFile>.MoveToAsync(IDirectory) FileBase<Uri, WebFile>.Parse<TFile>() FileBase<Uri, WebFile>.Parse() FileBase<Uri, WebFile>.ParseAsync<TFile>() FileBase<Uri, WebFile>.ParseAsync() FileBase<Uri, WebFile>.Read() FileBase<Uri, WebFile>.ReadAsync() FileBase<Uri, WebFile>.ReadBinary() FileBase<Uri, WebFile>.ReadBinaryAsync() FileBase<Uri, WebFile>.Rename(string) FileBase<Uri, WebFile>.RenameAsync(string) FileBase<Uri, WebFile>.ToString() FileBase<Uri, WebFile>.Write(string, FileMode, Encoding) FileBase<Uri, WebFile>.Write(byte[], FileMode) FileBase<Uri, WebFile>.Write(IGenericFile, FileMode) FileBase<Uri, WebFile>.WriteAsync(string, FileMode, Encoding) FileBase<Uri, WebFile>.WriteAsync(byte[], FileMode) FileBase<Uri, WebFile>.WriteAsync(IGenericFile, FileMode) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors WebFile() Constructor public WebFile() WebFile(string, HttpClient?, Credentials?) Constructor public WebFile(string path, HttpClient? client, Credentials? credentials = null) Parameters path string Path to the file client HttpClient The client. credentials Credentials The credentials. WebFile(Uri?, HttpClient?, Credentials?) Constructor public WebFile(Uri? directory, HttpClient? client, Credentials? credentials = null) Parameters directory Uri Internal directory client HttpClient The client. credentials Credentials The credentials. Properties Accessed Time accessed (Just returns now) public override DateTime Accessed { get; } Property Value DateTime Created Time created (Just returns now) public override DateTime Created { get; } Property Value DateTime Directory Directory base path public override IDirectory? Directory { get; } Property Value IDirectory Exists Does it exist? Always true. public override bool Exists { get; } Property Value bool Extension Extension (always empty) public override string Extension { get; } Property Value string FullName Full path public override string FullName { get; } Property Value string Length Size of the file (always 0) public override long Length { get; } Property Value long Modified Time modified (just returns now) public override DateTime Modified { get; } Property Value DateTime Name Absolute path of the file (same as FullName) public override string Name { get; } Property Value string Methods CopyTo(IDirectory, bool) Copies the file to another directory public override IFile CopyTo(IDirectory directory, bool overwrite) Parameters directory IDirectory Directory to copy the file to overwrite bool Should the file overwrite another file if found Returns IFile The newly created file Delete() Delete (does nothing) public override string Delete() Returns string Any response for deleting the resource (usually FTP, HTTP, etc) MoveTo(IDirectory) Moves the file (not used) public override IFile MoveTo(IDirectory directory) Parameters directory IDirectory Not used Returns IFile Read() Reads the web page public override string Read() Returns string The content as a string ReadBinary() Reads the web page public override byte[] ReadBinary() Returns byte[] The content as a byte array Rename(string) Renames the file (not used) public override IFile Rename(string newName) Parameters newName string Not used Returns IFile Write(byte[], FileMode) Not used public override byte[] Write(byte[] content, FileMode mode = FileMode.Create) Parameters content byte[] Not used mode FileMode Not used Returns byte[] The result of the write or original content Write(string, FileMode, Encoding?) Not used public override string Write(string content, FileMode mode = FileMode.Create, Encoding? encoding = null) Parameters content string Not used mode FileMode Not used encoding Encoding Not used Returns string The result of the write or original content See Also FileBase<InternalFileType, FileType>"
  },
  "api/FileCurator.Default.html": {
    "href": "api/FileCurator.Default.html",
    "title": "Namespace FileCurator.Default | FileCurator API Reference",
    "summary": "Namespace FileCurator.Default Classes AbsoluteLocalFileSystem Absolute local file system HttpFileSystem HTTP file system LocalDirectory Local directory class LocalFile Basic local file class NetworkFileSystem Network file system RelativeLocalFileSystem Relative local file system ResourceDirectory Directory class ResourceFile Basic Resource file class ResourceFileSystem Resource file system WebDirectory Directory class WebFile Web file"
  },
  "api/FileCurator.DirectoryInfo.html": {
    "href": "api/FileCurator.DirectoryInfo.html",
    "title": "Class DirectoryInfo | FileCurator API Reference",
    "summary": "Class DirectoryInfo Namespace FileCurator Assembly FileCurator.dll Directory info class public class DirectoryInfo : IDirectory, IComparable<IDirectory>, IEnumerable<IFile>, IEnumerable, IComparable, IEquatable<IDirectory> Inheritance object DirectoryInfo Implements IDirectory IComparable<IDirectory> IEnumerable<IFile> IEnumerable IComparable IEquatable<IDirectory> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DirectoryInfo(IDirectory?) Constructor public DirectoryInfo(IDirectory? directory) Parameters directory IDirectory Directory object DirectoryInfo(string, Credentials?) Constructor public DirectoryInfo(string path, Credentials? credentials = null) Parameters path string Path to the directory credentials Credentials The credentials. Properties Accessed Last time it was accessed public DateTime Accessed { get; } Property Value DateTime Created When it was created public DateTime Created { get; } Property Value DateTime Exists Does the directory exist public bool Exists { get; } Property Value bool FullName Full path to the directory public string FullName { get; } Property Value string InternalDirectory Internal directory object protected IDirectory? InternalDirectory { get; } Property Value IDirectory Modified When it was last modified public DateTime Modified { get; } Property Value DateTime Name Name of the directory public string Name { get; } Property Value string Parent Parent directory public IDirectory? Parent { get; } Property Value IDirectory Root Root directory public IDirectory? Root { get; } Property Value IDirectory Size Size of the contents of the directory in bytes public long Size { get; } Property Value long Methods CompareTo(IDirectory?) Compares this to another directory public int CompareTo(IDirectory? other) Parameters other IDirectory Directory to compare to Returns int CompareTo(object) Compares this object to another object public int CompareTo(object obj) Parameters obj object Object to compare it to Returns int CopyTo(IDirectory?, CopyOptions) Copies the directory to the specified parent directory public IDirectory CopyTo(IDirectory? directory, CopyOptions options = CopyOptions.CopyAlways) Parameters directory IDirectory Directory to copy to options CopyOptions Copy options Returns IDirectory Returns the new directory CopyToAsync(IDirectory, CopyOptions) Copies the directory to the specified parent directory public Task<IDirectory> CopyToAsync(IDirectory directory, CopyOptions options = CopyOptions.CopyAlways) Parameters directory IDirectory Directory to copy to options CopyOptions Copy options Returns Task<IDirectory> Create() Creates the directory if it does not currently exist public IDirectory Create() Returns IDirectory CreateAsync() Creates the directory if it does not currently exist public Task<IDirectory> CreateAsync() Returns Task<IDirectory> Delete() Deletes the directory public IDirectory Delete() Returns IDirectory DeleteAsync() Deletes the directory public Task<IDirectory> DeleteAsync() Returns Task<IDirectory> EnumerateDirectories(Predicate<IDirectory>, SearchOption) Enumerates sub directories (defaults to top level sub directories) public IEnumerable<IDirectory> EnumerateDirectories(Predicate<IDirectory> predicate, SearchOption options = SearchOption.TopDirectoryOnly) Parameters predicate Predicate<IDirectory> Predicate used to filter directories options SearchOption Search options to use Returns IEnumerable<IDirectory> The list of directories EnumerateDirectories(string, SearchOption) Enumerates sub directories (defaults to top level sub directories) public IEnumerable<IDirectory> EnumerateDirectories(string searchPattern = \"*\", SearchOption options = SearchOption.TopDirectoryOnly) Parameters searchPattern string Search pattern to use options SearchOption Search options to use Returns IEnumerable<IDirectory> The list of directories EnumerateFiles(Predicate<IFile>, SearchOption) Enumerates files within the directory (defaults to top level directory and not the sub directories) public IEnumerable<IFile> EnumerateFiles(Predicate<IFile> predicate, SearchOption options = SearchOption.TopDirectoryOnly) Parameters predicate Predicate<IFile> Predicate used to filter files options SearchOption Search options to use Returns IEnumerable<IFile> The list of files EnumerateFiles(string, SearchOption) Enumerates files within the directory (defaults to top level directory and not the sub directories) public IEnumerable<IFile> EnumerateFiles(string searchPattern = \"*\", SearchOption options = SearchOption.TopDirectoryOnly) Parameters searchPattern string Search pattern to use options SearchOption Search options to use Returns IEnumerable<IFile> The list of files Equals(IDirectory?) Determines if the directories are equal public bool Equals(IDirectory? other) Parameters other IDirectory Other directory Returns bool True if they are equal, false otherwise Equals(object) Determines if the two directories are the same public override bool Equals(object obj) Parameters obj object Object to compare to Returns bool True if they're the same, false otherwise GetEnumerator() Enumerates the files in the directory public IEnumerator<IFile> GetEnumerator() Returns IEnumerator<IFile> The files in the directory GetHashCode() Returns the hash code for the directory public override int GetHashCode() Returns int The hash code for the directory MoveTo(IDirectory?) Moves the directory to the specified parent directory public IDirectory MoveTo(IDirectory? directory) Parameters directory IDirectory Directory to move to Returns IDirectory MoveToAsync(IDirectory) Moves the directory to the specified parent directory public Task<IDirectory> MoveToAsync(IDirectory directory) Parameters directory IDirectory Directory to move to Returns Task<IDirectory> Rename(string) Renames the directory public IDirectory Rename(string name) Parameters name string The new name of the directory Returns IDirectory RenameAsync(string) Renames the directory public Task<IDirectory> RenameAsync(string name) Parameters name string The new name of the directory Returns Task<IDirectory> ToString() Gets info for the directory public override string ToString() Returns string The full path to the directory Operators operator ==(DirectoryInfo, DirectoryInfo) Determines if two directories are equal public static bool operator ==(DirectoryInfo directory1, DirectoryInfo directory2) Parameters directory1 DirectoryInfo Directory 1 directory2 DirectoryInfo Directory 2 Returns bool True if they are, false otherwise operator >(DirectoryInfo, DirectoryInfo) Greater than public static bool operator >(DirectoryInfo directory1, DirectoryInfo directory2) Parameters directory1 DirectoryInfo Directory 1 directory2 DirectoryInfo Directory 2 Returns bool The result operator >=(DirectoryInfo, DirectoryInfo) Greater than or equal public static bool operator >=(DirectoryInfo directory1, DirectoryInfo directory2) Parameters directory1 DirectoryInfo Directory 1 directory2 DirectoryInfo Directory 2 Returns bool The result operator !=(DirectoryInfo, DirectoryInfo) Determines if two directories are not equal public static bool operator !=(DirectoryInfo directory1, DirectoryInfo directory2) Parameters directory1 DirectoryInfo Directory 1 directory2 DirectoryInfo Directory 2 Returns bool True if they are not equal, false otherwise operator <(DirectoryInfo, DirectoryInfo) Less than public static bool operator <(DirectoryInfo directory1, DirectoryInfo directory2) Parameters directory1 DirectoryInfo Directory 1 directory2 DirectoryInfo Directory 2 Returns bool The result operator <=(DirectoryInfo, DirectoryInfo) Less than or equal public static bool operator <=(DirectoryInfo directory1, DirectoryInfo directory2) Parameters directory1 DirectoryInfo Directory 1 directory2 DirectoryInfo Directory 2 Returns bool The result"
  },
  "api/FileCurator.Enums.CopyOptions.html": {
    "href": "api/FileCurator.Enums.CopyOptions.html",
    "title": "Enum CopyOptions | FileCurator API Reference",
    "summary": "Enum CopyOptions Namespace FileCurator.Enums Assembly FileCurator.dll Options used in directory copying public enum CopyOptions Fields CopyAlways = 1 Copy always CopyIfNewer = 0 Copy if newer than the DateTime specified DoNotOverwrite = 2 Do not overwrite a file"
  },
  "api/FileCurator.Enums.MimeType.html": {
    "href": "api/FileCurator.Enums.MimeType.html",
    "title": "Class MimeType | FileCurator API Reference",
    "summary": "Class MimeType Namespace FileCurator.Enums Assembly FileCurator.dll Mime type enum like static class public class MimeType Inheritance object MimeType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MimeType(string) Initializes a new instance of the MimeType class. protected MimeType(string name) Parameters name string The name. Properties CSV Gets the CSV. public static MimeType CSV { get; } Property Value MimeType The CSV. Excel Gets the excel. public static MimeType Excel { get; } Property Value MimeType The excel. Html Gets the HTML. public static MimeType Html { get; } Property Value MimeType The HTML. ICal Gets the i cal. public static MimeType ICal { get; } Property Value MimeType The i cal. PowerPoint Gets the power point. public static MimeType PowerPoint { get; } Property Value MimeType The power point. RSS Gets the RSS. public static MimeType RSS { get; } Property Value MimeType The RSS. Text Gets the text. public static MimeType Text { get; } Property Value MimeType The text. Unknown Gets the unknown. public static MimeType Unknown { get; } Property Value MimeType The unknown. VCal Gets the v cal. public static MimeType VCal { get; } Property Value MimeType The v cal. VCard Gets the v card. public static MimeType VCard { get; } Property Value MimeType The v card. Word Gets the word. public static MimeType Word { get; } Property Value MimeType The word. XML Gets the XML. public static MimeType XML { get; } Property Value MimeType The XML. Methods ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. Operators implicit operator string(MimeType) Performs an implicit conversion from MimeType to string. public static implicit operator string(MimeType mimeType) Parameters mimeType MimeType Type of the MIME. Returns string The result of the conversion. implicit operator MimeType(string) Performs an implicit conversion from string to MimeType. public static implicit operator MimeType(string name) Parameters name string The name. Returns MimeType The result of the conversion."
  },
  "api/FileCurator.Enums.html": {
    "href": "api/FileCurator.Enums.html",
    "title": "Namespace FileCurator.Enums | FileCurator API Reference",
    "summary": "Namespace FileCurator.Enums Classes MimeType Mime type enum like static class Enums CopyOptions Options used in directory copying"
  },
  "api/FileCurator.FileInfo.html": {
    "href": "api/FileCurator.FileInfo.html",
    "title": "Class FileInfo | FileCurator API Reference",
    "summary": "Class FileInfo Namespace FileCurator Assembly FileCurator.dll File info class public class FileInfo : IFile, IComparable<IFile>, IComparable, IEquatable<IFile> Inheritance object FileInfo Implements IFile IComparable<IFile> IComparable IEquatable<IFile> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FileInfo(IFile?) Constructor public FileInfo(IFile? internalFile) Parameters internalFile IFile Internal file FileInfo(string, Credentials?) Constructor public FileInfo(string path, Credentials? credentials = null) Parameters path string Path to the file credentials Credentials The credentials. Properties Accessed Last time accessed (UTC time) public DateTime Accessed { get; } Property Value DateTime Created Time created (UTC time) public DateTime Created { get; } Property Value DateTime Directory Directory the file is within public IDirectory? Directory { get; } Property Value IDirectory Exists Does the file exist? public bool Exists { get; } Property Value bool Extension File extension public string Extension { get; } Property Value string FormatManager Gets or sets the internal manager. protected Manager? FormatManager { get; } Property Value Manager The internal manager. FullName Full path public string FullName { get; } Property Value string InternalFile Internal directory protected IFile? InternalFile { get; } Property Value IFile Length Size of the file public long Length { get; } Property Value long Modified Time modified (UTC time) public DateTime Modified { get; } Property Value DateTime Name Name of the file public string Name { get; } Property Value string Methods CompareTo(IFile) Compares this to another file public int CompareTo(IFile other) Parameters other IFile File to compare to Returns int CompareTo(object) Compares this object to another object public int CompareTo(object obj) Parameters obj object Object to compare it to Returns int CopyTo(IDirectory, bool) Copies the file to another directory public IFile? CopyTo(IDirectory directory, bool overwrite) Parameters directory IDirectory Directory to copy the file to overwrite bool Should the file overwrite another file if found Returns IFile The newly created file CopyToAsync(IDirectory, bool) Copies the file to another directory public Task<IFile?> CopyToAsync(IDirectory directory, bool overwrite) Parameters directory IDirectory Directory to copy the file to overwrite bool Should the file overwrite another file if found Returns Task<IFile> The newly created file Delete() Deletes the file public string Delete() Returns string Any response for deleting the resource (usually FTP, HTTP, etc) DeleteAsync() Deletes the file public Task<string> DeleteAsync() Returns Task<string> Any response for deleting the resource (usually FTP, HTTP, etc) Equals(IFile) Determines if the files are equal public bool Equals(IFile other) Parameters other IFile Other file Returns bool True if they are equal, false otherwise Equals(object) Determines if the objects are equal public override bool Equals(object obj) Parameters obj object Object to compare to Returns bool True if they are equal, false otherwise GetHashCode() Gets the hash code for the file public override int GetHashCode() Returns int The hash code MoveTo(IDirectory) Moves the file to a new directory public IFile MoveTo(IDirectory directory) Parameters directory IDirectory Directory to move to Returns IFile MoveToAsync(IDirectory) Moves the file to another directory public Task<IFile> MoveToAsync(IDirectory directory) Parameters directory IDirectory Directory to move the file to Returns Task<IFile> Parse() Parses this instance. public IGenericFile Parse() Returns IGenericFile The parsed file Exceptions ArgumentException Could not find file format that returns the specified object type ParseAsync() Parses this instance. public Task<IGenericFile> ParseAsync() Returns Task<IGenericFile> The parsed file Exceptions ArgumentException Could not find file format that returns the specified object type ParseAsync<TFile>() Parses this instance. public Task<TFile> ParseAsync<TFile>() where TFile : IGenericFile Returns Task<TFile> The parsed file Type Parameters TFile The type of the file object expected. Exceptions ArgumentException Could not find file format that returns the specified object type Parse<TFile>() Parses this instance. public TFile Parse<TFile>() where TFile : IGenericFile Returns TFile The parsed file Type Parameters TFile The type of the file object expected. Exceptions ArgumentException Could not find file format that returns the specified object type Read() Reads the file in as a string public string Read() Returns string The file contents as a string ReadAsync() Reads the file to the end as a string public Task<string> ReadAsync() Returns Task<string> A string containing the contents of the file ReadBinary() Reads a file as binary public byte[] ReadBinary() Returns byte[] The file contents as a byte array ReadBinaryAsync() Reads the file to the end as a byte array public Task<byte[]> ReadBinaryAsync() Returns Task<byte[]> A byte array containing the contents of the file Rename(string) Renames the file public IFile Rename(string newName) Parameters newName string New name for the file Returns IFile RenameAsync(string) Renames the file public Task<IFile> RenameAsync(string newName) Parameters newName string New file name Returns Task<IFile> ToString() Returns the name of the file public override string ToString() Returns string The name of the file Write(IGenericFile, FileMode) Writes the specified data. public bool Write(IGenericFile data, FileMode mode = FileMode.Create) Parameters data IGenericFile The data. mode FileMode The mode. Returns bool True if it was written successfully, false otherwise. Write(byte[], FileMode) Writes content to the file public byte[] Write(byte[] content, FileMode mode = FileMode.Create) Parameters content byte[] Content to write mode FileMode Mode to open the file as Returns byte[] The result of the write or original content Write(string, FileMode, Encoding?) Writes content to the file public string Write(string content, FileMode mode = FileMode.Create, Encoding? encoding = null) Parameters content string Content to write mode FileMode Mode to open the file as encoding Encoding Encoding to use for the content Returns string The result of the write or original content WriteAsync(IGenericFile, FileMode) Writes the specified data. public Task<bool> WriteAsync(IGenericFile data, FileMode mode = FileMode.Create) Parameters data IGenericFile The data. mode FileMode The mode. Returns Task<bool> True if it was written successfully, false otherwise. WriteAsync(byte[], FileMode) Writes content to the file public Task<byte[]> WriteAsync(byte[] content, FileMode mode = FileMode.Create) Parameters content byte[] Content to write mode FileMode File mode Returns Task<byte[]> The result of the write or original content WriteAsync(string, FileMode, Encoding?) Writes content to the file public Task<string> WriteAsync(string content, FileMode mode = FileMode.Create, Encoding? encoding = null) Parameters content string Content to write mode FileMode File mode encoding Encoding Encoding that the content should be saved as (default is UTF8) Returns Task<string> The result of the write or original content Operators operator ==(FileInfo, FileInfo) Determines if two directories are equal public static bool operator ==(FileInfo file1, FileInfo file2) Parameters file1 FileInfo File 1 file2 FileInfo File 2 Returns bool True if they are, false otherwise operator >(FileInfo, FileInfo) Greater than public static bool operator >(FileInfo file1, FileInfo file2) Parameters file1 FileInfo File 1 file2 FileInfo File 2 Returns bool The result operator >=(FileInfo, FileInfo) Greater than or equal public static bool operator >=(FileInfo file1, FileInfo file2) Parameters file1 FileInfo File 1 file2 FileInfo File 2 Returns bool The result implicit operator byte[](FileInfo) Reads the file and converts it to a byte array public static implicit operator byte[](FileInfo file) Parameters file FileInfo File to read Returns byte[] The file as a byte array implicit operator string(FileInfo) Reads the file and converts it to a string public static implicit operator string(FileInfo file) Parameters file FileInfo File to read Returns string The file as a string operator !=(FileInfo, FileInfo) Determines if two directories are not equal public static bool operator !=(FileInfo file1, FileInfo file2) Parameters file1 FileInfo File 1 file2 FileInfo File 2 Returns bool True if they are not equal, false otherwise operator <(FileInfo, FileInfo) Less than public static bool operator <(FileInfo file1, FileInfo file2) Parameters file1 FileInfo File 1 file2 FileInfo File 2 Returns bool The result operator <=(FileInfo, FileInfo) Less than or equal public static bool operator <=(FileInfo file1, FileInfo file2) Parameters file1 FileInfo File 1 file2 FileInfo File 2 Returns bool The result"
  },
  "api/FileCurator.FileSystem.html": {
    "href": "api/FileCurator.FileSystem.html",
    "title": "Class FileSystem | FileCurator API Reference",
    "summary": "Class FileSystem Namespace FileCurator Assembly FileCurator.dll Main class for FileCurator public class FileSystem : IDisposable Inheritance object FileSystem Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FileSystem(IEnumerable<IFileSystem>) Constructor public FileSystem(IEnumerable<IFileSystem> fileSystems) Parameters fileSystems IEnumerable<IFileSystem> The file systems. Properties FileSystems File systems that the library can use protected IDictionary<string, IFileSystem> FileSystems { get; } Property Value IDictionary<string, IFileSystem> Instance Gets the instance. public static FileSystem? Instance { get; } Property Value FileSystem The instance. this[string] Gets the file system by name public IFileSystem this[string name] { get; } Parameters name string Name of the file system Property Value IFileSystem The file system specified Methods Directory(string, Credentials?) Gets the directory representation for the directory public IDirectory? Directory(string path, Credentials? credentials = null) Parameters path string Path to the directory credentials Credentials The credentials. Returns IDirectory The directory object Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) Releases unmanaged and - optionally - managed resources. protected virtual void Dispose(bool managed) Parameters managed bool true to release both managed and unmanaged resources; false to release only unmanaged resources. File(string, Credentials?) Gets the class representation for the file public IFile? File(string path, Credentials? credentials = null) Parameters path string Path to the file credentials Credentials The credentials. Returns IFile The file object FindSystem(string) Finds a file system compatible with the path protected IFileSystem? FindSystem(string path) Parameters path string Path to search for Returns IFileSystem The file system associated with the path ToString() Outputs the file system information in string format public override string ToString() Returns string The list of file systems that are available"
  },
  "api/FileCurator.Formats.BaseClasses.FormatBaseClass-3.html": {
    "href": "api/FileCurator.Formats.BaseClasses.FormatBaseClass-3.html",
    "title": "Class FormatBaseClass<TFileReader, TFileWriter, TFile> | FileCurator API Reference",
    "summary": "Class FormatBaseClass<TFileReader, TFileWriter, TFile> Namespace FileCurator.Formats.BaseClasses Assembly FileCurator.dll Format base class public abstract class FormatBaseClass<TFileReader, TFileWriter, TFile> : IFormat<TFile>, IFormat where TFileReader : IGenericFileReader<TFile>, new() where TFileWriter : IGenericFileWriter, new() where TFile : IGenericFile Type Parameters TFileReader The type of the file reader. TFileWriter The type of the file writer. TFile The type of the file. Inheritance object FormatBaseClass<TFileReader, TFileWriter, TFile> Implements IFormat<TFile> IFormat Derived DelimitedFormat ExcelFormat HTMLFormat ICalendarFormat MimeFormat PDFFormat PowerPointFormat RSSFormat TxtFormat VCalendarFormat VCardFormat WordFormat XMLFormat MSGFormat Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentTypes Gets the content types. public abstract string[] ContentTypes { get; } Property Value string[] The content types. DisplayName Gets the display name. public abstract string DisplayName { get; } Property Value string The display name. FileTypes Gets the file types. public abstract string[] FileTypes { get; } Property Value string[] The file types. HeaderInfo Gets the header information. public byte[] HeaderInfo { get; } Property Value byte[] The header information. Reader Gets the reader. protected TFileReader Reader { get; } Property Value TFileReader The reader. Writer Gets the writer. protected TFileWriter Writer { get; } Property Value TFileWriter The writer. Methods CanRead(Stream) Determines whether this instance can decode the specified stream. public bool CanRead(Stream stream) Parameters stream Stream The stream. Returns bool True if it can, false otherwise CanRead(string) Determines whether this instance can decode the specified file name. public bool CanRead(string fileName) Parameters fileName string Name of the file. Returns bool True if it can, false otherwise CanWrite(string) Determines whether this instance can encode the specified file name. public bool CanWrite(string fileName) Parameters fileName string Name of the file. Returns bool True if it can, false otherwise Read(Stream) Parses the specified stream. public TFile Read(Stream stream) Parameters stream Stream The stream. Returns TFile The resulting file content. ReadAsync(Stream) Parses the specified stream. public Task<TFile> ReadAsync(Stream stream) Parameters stream Stream The stream. Returns Task<TFile> The resulting file content. ReadBase(Stream) Reads the base. public IGenericFile ReadBase(Stream stream) Parameters stream Stream The stream. Returns IGenericFile Returns an IGenericFile version of the doc. ReadBaseAsync(Stream) Reads the base. public Task<IGenericFile> ReadBaseAsync(Stream stream) Parameters stream Stream The stream. Returns Task<IGenericFile> Returns an IGenericFile version of the doc. Write(Stream, IGenericFile) Writes the file to the specified writer. public bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. public Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise. See Also IFormat<TFile> IFormat"
  },
  "api/FileCurator.Formats.BaseClasses.ReaderBaseClass-1.html": {
    "href": "api/FileCurator.Formats.BaseClasses.ReaderBaseClass-1.html",
    "title": "Class ReaderBaseClass<TFile> | FileCurator API Reference",
    "summary": "Class ReaderBaseClass<TFile> Namespace FileCurator.Formats.BaseClasses Assembly FileCurator.dll Reader base class public abstract class ReaderBaseClass<TFile> : IGenericFileReader<TFile> where TFile : IGenericFile Type Parameters TFile The type of the file. Inheritance object ReaderBaseClass<TFile> Implements IGenericFileReader<TFile> Derived DelimitedReader ExcelReader HTMLReader ICalendarReader MimeReader PDFReader PowerPointReader RSSReader TxtReader VCalendarReader VCardReader WordReader XMLReader MSGReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderIdentifier Gets the header identifier. public abstract byte[] HeaderIdentifier { get; } Property Value byte[] The header identifier. Methods CanRead(Stream) Determines whether this instance can decode the specified stream. public bool CanRead(Stream stream) Parameters stream Stream The stream. Returns bool True if it can, false otherwise CanRead(string) Determines whether this instance can decode the specified file name. public bool CanRead(string fileName) Parameters fileName string Name of the file. Returns bool True if it can, false otherwise InternalCanRead(Stream) Used to determine if a reader can actually read the file public virtual bool InternalCanRead(Stream stream) Parameters stream Stream The stream. Returns bool True if it can, false otherwise Read(Stream) Reads the specified stream. public abstract TFile Read(Stream stream) Parameters stream Stream The stream. Returns TFile The file ReadAsync(Stream) Reads the specified stream. public virtual Task<TFile> ReadAsync(Stream stream) Parameters stream Stream The stream. Returns Task<TFile> The file See Also IGenericFileReader<TFile>"
  },
  "api/FileCurator.Formats.BaseClasses.html": {
    "href": "api/FileCurator.Formats.BaseClasses.html",
    "title": "Namespace FileCurator.Formats.BaseClasses | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.BaseClasses Classes FormatBaseClass<TFileReader, TFileWriter, TFile> Format base class ReaderBaseClass<TFile> Reader base class"
  },
  "api/FileCurator.Formats.Data.Address.html": {
    "href": "api/FileCurator.Formats.Data.Address.html",
    "title": "Class Address | FileCurator API Reference",
    "summary": "Class Address Namespace FileCurator.Formats.Data Assembly FileCurator.dll Address class public class Address : IAddress Inheritance object Address Implements IAddress Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties City Gets or sets the city. public string? City { get; set; } Property Value string The city. Country Gets or sets the country. public string? Country { get; set; } Property Value string The country. Name Gets or sets the name. public string? Name { get; set; } Property Value string The name. StateOrProvence Gets or sets the state or provence. public string? StateOrProvence { get; set; } Property Value string The state or provence. Street Gets or sets the street. public string? Street { get; set; } Property Value string The street. Type Gets or sets the type. public string? Type { get; set; } Property Value string The type. ZipCode Gets or sets the area code. public string? ZipCode { get; set; } Property Value string The area code. See Also IAddress"
  },
  "api/FileCurator.Formats.Data.BaseClasses.FileBaseClass-1.html": {
    "href": "api/FileCurator.Formats.Data.BaseClasses.FileBaseClass-1.html",
    "title": "Class FileBaseClass<FormatFileType> | FileCurator API Reference",
    "summary": "Class FileBaseClass<FormatFileType> Namespace FileCurator.Formats.Data.BaseClasses Assembly FileCurator.dll File base class public abstract class FileBaseClass<FormatFileType> : IGenericFile where FormatFileType : FileBaseClass<FormatFileType> Type Parameters FormatFileType The type of the format file type. Inheritance object FileBaseClass<FormatFileType> Implements IGenericFile Derived FixedLengthBaseClass TableBaseClass GenericEmail GenericFile Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Content Parsed content public abstract string Content { get; set; } Property Value string The content. Meta Meta data public abstract string Meta { get; set; } Property Value string The meta. Title Parsed title public abstract string Title { get; set; } Property Value string The title. Methods CompareTo(object) Compares the object to another object public int CompareTo(object obj) Parameters obj object Object to compare to Returns int 0 if they are equal, -1 if this is smaller, 1 if it is larger CompareTo(FormatFileType) Compares the object to another object public abstract int CompareTo(FormatFileType other) Parameters other FormatFileType Object to compare to Returns int 0 if they are equal, -1 if this is smaller, 1 if it is larger Equals(object) Determines if the objects are equal public override bool Equals(object obj) Parameters obj object Other object to compare to Returns bool True if they are equal, false otherwise Equals(FormatFileType) Determines if the objects are equal public abstract bool Equals(FormatFileType other) Parameters other FormatFileType Other object to compare to Returns bool True if they are equal, false otherwise GetHashCode() Gets the hash code for the object public override int GetHashCode() Returns int The hash code for the object Operators operator ==(FileBaseClass<FormatFileType>, FileBaseClass<FormatFileType>) Determines if the two are equal public static bool operator ==(FileBaseClass<FormatFileType> Value1, FileBaseClass<FormatFileType> Value2) Parameters Value1 FileBaseClass<FormatFileType> Value 1 Value2 FileBaseClass<FormatFileType> Value 2 Returns bool True if they are equal, false otherwise operator >(FileBaseClass<FormatFileType>, FileBaseClass<FormatFileType>) Determines if it is greater than public static bool operator >(FileBaseClass<FormatFileType> Value1, FileBaseClass<FormatFileType> Value2) Parameters Value1 FileBaseClass<FormatFileType> Value 1 Value2 FileBaseClass<FormatFileType> Value 2 Returns bool True if it is greater than, false otherwise operator >=(FileBaseClass<FormatFileType>, FileBaseClass<FormatFileType>) Determines if it is greater than or equal public static bool operator >=(FileBaseClass<FormatFileType> Value1, FileBaseClass<FormatFileType> Value2) Parameters Value1 FileBaseClass<FormatFileType> Value 1 Value2 FileBaseClass<FormatFileType> Value 2 Returns bool True if it is greater than or equal, false otherwise operator !=(FileBaseClass<FormatFileType>, FileBaseClass<FormatFileType>) Determines if the two are not equal public static bool operator !=(FileBaseClass<FormatFileType> Value1, FileBaseClass<FormatFileType> Value2) Parameters Value1 FileBaseClass<FormatFileType> Value 1 Value2 FileBaseClass<FormatFileType> Value 2 Returns bool True if they are not equal, false otherwise operator <(FileBaseClass<FormatFileType>, FileBaseClass<FormatFileType>) Determines if it is less than public static bool operator <(FileBaseClass<FormatFileType> Value1, FileBaseClass<FormatFileType> Value2) Parameters Value1 FileBaseClass<FormatFileType> Value 1 Value2 FileBaseClass<FormatFileType> Value 2 Returns bool True if it is less than, false otherwise operator <=(FileBaseClass<FormatFileType>, FileBaseClass<FormatFileType>) Determines if it is less than or equal public static bool operator <=(FileBaseClass<FormatFileType> Value1, FileBaseClass<FormatFileType> Value2) Parameters Value1 FileBaseClass<FormatFileType> Value 1 Value2 FileBaseClass<FormatFileType> Value 2 Returns bool True if it is less than or equal, false otherwise See Also IGenericFile"
  },
  "api/FileCurator.Formats.Data.BaseClasses.TableBaseClass.html": {
    "href": "api/FileCurator.Formats.Data.BaseClasses.TableBaseClass.html",
    "title": "Class TableBaseClass | FileCurator API Reference",
    "summary": "Class TableBaseClass Namespace FileCurator.Formats.Data.BaseClasses Assembly FileCurator.dll Table base class public abstract class TableBaseClass : FileBaseClass<TableBaseClass>, ITable, IGenericFile Inheritance object FileBaseClass<TableBaseClass> TableBaseClass Implements ITable IGenericFile Derived GenericTable Inherited Members FileBaseClass<TableBaseClass>.CompareTo(object) FileBaseClass<TableBaseClass>.CompareTo(TableBaseClass) FileBaseClass<TableBaseClass>.Equals(TableBaseClass) FileBaseClass<TableBaseClass>.Equals(object) FileBaseClass<TableBaseClass>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors TableBaseClass() Initializes a new instance of the TableBaseClass class. protected TableBaseClass() Properties Columns Gets the headers. public IList<string> Columns { get; } Property Value IList<string> The headers. Content Parsed content public override string Content { get; set; } Property Value string The content. Meta Meta data public override string Meta { get; set; } Property Value string The meta. Rows Gets the data rows. public IList<IRow> Rows { get; } Property Value IList<IRow> The data rows. Title Parsed title public override string Title { get; set; } Property Value string The title. Methods Convert<TObject>() Converts this instance into the object array of the type specified. public List<TObject> Convert<TObject>() Returns List<TObject> The resulting array. Type Parameters TObject The type of the object. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. See Also ITable"
  },
  "api/FileCurator.Formats.Data.BaseClasses.html": {
    "href": "api/FileCurator.Formats.Data.BaseClasses.html",
    "title": "Namespace FileCurator.Formats.Data.BaseClasses | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.Data.BaseClasses Classes FileBaseClass<FormatFileType> File base class TableBaseClass Table base class"
  },
  "api/FileCurator.Formats.Data.Enums.Relationship.html": {
    "href": "api/FileCurator.Formats.Data.Enums.Relationship.html",
    "title": "Enum Relationship | FileCurator API Reference",
    "summary": "Enum Relationship Namespace FileCurator.Formats.Data.Enums Assembly FileCurator.dll Enum defining relationships (used for XFN markup) public enum Relationship Fields Acquaintance = 1 Acquaintance Child = 8 Child CoResident = 6 Coresident CoWorker = 4 Coworker Colleague = 5 Colleague Contact = 2 Contact Crush = 14 Crush Date = 15 Date Friend = 0 Friend Kin = 12 Kin Me = 17 Me Met = 3 Met Muse = 13 Muse Neighbor = 7 Neighbor Parent = 9 Parent Sibling = 10 Sibling Spouse = 11 Spouse Sweetheart = 16 Sweetheart"
  },
  "api/FileCurator.Formats.Data.Enums.html": {
    "href": "api/FileCurator.Formats.Data.Enums.html",
    "title": "Namespace FileCurator.Formats.Data.Enums | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.Data.Enums Enums Relationship Enum defining relationships (used for XFN markup)"
  },
  "api/FileCurator.Formats.Data.GenericCalendar.html": {
    "href": "api/FileCurator.Formats.Data.GenericCalendar.html",
    "title": "Class GenericCalendar | FileCurator API Reference",
    "summary": "Class GenericCalendar Namespace FileCurator.Formats.Data Assembly FileCurator.dll Generic calendar item public class GenericCalendar : ICalendar, IGenericFile Inheritance object GenericCalendar Implements ICalendar IGenericFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors GenericCalendar() Initializes a new instance of the GenericCalendar class. public GenericCalendar() Properties AttendeeList List of attendees public IList<IMailAddress> AttendeeList { get; } Property Value IList<IMailAddress> Cancel Determines if the calendar item is being canceled public bool Cancel { get; set; } Property Value bool Content Parsed content public string Content { get; } Property Value string The content. CurrentTimeZone The time zone for the calendar event public TimeZoneInfo CurrentTimeZone { get; set; } Property Value TimeZoneInfo Description Gets the description. public string Description { get; set; } Property Value string The description. EndTime The end time public DateTime EndTime { get; set; } Property Value DateTime Location The location of the event public string Location { get; set; } Property Value string Meta Meta data public string Meta { get; } Property Value string The meta. Organizer Organizer public IMailAddress Organizer { get; set; } Property Value IMailAddress StartTime The start time public DateTime StartTime { get; set; } Property Value DateTime Status Sets the status for the appointment (FREE, BUSY, etc.) public string Status { get; set; } Property Value string Subject Gets the subject. public string Subject { get; set; } Property Value string The subject. Title Parsed title public string Title { get; } Property Value string The title. Methods ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. See Also ICalendar"
  },
  "api/FileCurator.Formats.Data.GenericCard.html": {
    "href": "api/FileCurator.Formats.Data.GenericCard.html",
    "title": "Class GenericCard | FileCurator API Reference",
    "summary": "Class GenericCard Namespace FileCurator.Formats.Data Assembly FileCurator.dll Generic card public class GenericCard : ICard, IGenericFile Inheritance object GenericCard Implements ICard IGenericFile Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Addresses Gets or sets the addresses. public IList<IAddress> Addresses { get; set; } Property Value IList<IAddress> The addresses. Content Parsed content public string Content { get; } Property Value string The content. DirectDial Work phone number of the individual public IList<IPhoneNumber> DirectDial { get; set; } Property Value IList<IPhoneNumber> Email Email of the individual public IList<IMailAddress> Email { get; set; } Property Value IList<IMailAddress> FirstName First name public string FirstName { get; set; } Property Value string FullName Full name public string FullName { get; } Property Value string LastName Last name public string LastName { get; set; } Property Value string Meta Meta data public string Meta { get; } Property Value string The meta. MiddleName Middle name public string MiddleName { get; set; } Property Value string Name Name protected string Name { get; } Property Value string Nickname Gets or sets the nickname associated with the entity. public string Nickname { get; set; } Property Value string Organization Organization the person belongs to public string Organization { get; set; } Property Value string Prefix Prefix public string Prefix { get; set; } Property Value string Relationships Relationship to the person (uses XFN) public IList<Relationship> Relationships { get; } Property Value IList<Relationship> Subject Gets the subject. public string Subject { get; set; } Property Value string The subject. Suffix Suffix public string Suffix { get; set; } Property Value string Title Parsed title public string Title { get; set; } Property Value string The title. Url Url to the person's site public string Url { get; set; } Property Value string Methods ToString() Gets the VCard as a string public override string ToString() Returns string VCard as a string See Also ICard"
  },
  "api/FileCurator.Formats.Data.GenericCell.html": {
    "href": "api/FileCurator.Formats.Data.GenericCell.html",
    "title": "Class GenericCell | FileCurator API Reference",
    "summary": "Class GenericCell Namespace FileCurator.Formats.Data Assembly FileCurator.dll Generic cell data public class GenericCell : ICell Inheritance object GenericCell Implements ICell Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors GenericCell(string) Initializes a new instance of the GenericCell class. public GenericCell(string content) Parameters content string The content. Properties Content Gets or sets the content. public string Content { get; set; } Property Value string The content. Methods GetValue<TValue>() Gets the value as the type specified. public TValue GetValue<TValue>() Returns TValue The content of the cell as the value type specified. Type Parameters TValue The type of the value. ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. See Also ICell"
  },
  "api/FileCurator.Formats.Data.GenericEmail.html": {
    "href": "api/FileCurator.Formats.Data.GenericEmail.html",
    "title": "Class GenericEmail | FileCurator API Reference",
    "summary": "Class GenericEmail Namespace FileCurator.Formats.Data Assembly FileCurator.dll Generic email message public class GenericEmail : FileBaseClass<GenericEmail>, IMessage, IGenericFile Inheritance object FileBaseClass<GenericEmail> GenericEmail Implements IMessage IGenericFile Inherited Members FileBaseClass<GenericEmail>.CompareTo(object) FileBaseClass<GenericEmail>.Equals(object) FileBaseClass<GenericEmail>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BCC Gets the BCC. public IList<string> BCC { get; } Property Value IList<string> The BCC. CC Gets the cc. public IList<string> CC { get; } Property Value IList<string> The cc. Content Parsed content public override string Content { get; set; } Property Value string The content. From Gets or sets from. public string From { get; set; } Property Value string From. Meta Meta data public override string Meta { get; set; } Property Value string The meta. Sent Gets or sets the sent. public DateTime Sent { get; set; } Property Value DateTime The sent. Title Parsed title public override string Title { get; set; } Property Value string The title. To Gets to. public IList<string> To { get; } Property Value IList<string> To. Methods CompareTo(GenericEmail) Compares the object to another object public override int CompareTo(GenericEmail other) Parameters other GenericEmail Object to compare to Returns int 0 if they are equal, -1 if this is smaller, 1 if it is larger Equals(GenericEmail) Determines if the objects are equal public override bool Equals(GenericEmail other) Parameters other GenericEmail Other object to compare to Returns bool True if they are equal, false otherwise See Also IMessage"
  },
  "api/FileCurator.Formats.Data.GenericFile.html": {
    "href": "api/FileCurator.Formats.Data.GenericFile.html",
    "title": "Class GenericFile | FileCurator API Reference",
    "summary": "Class GenericFile Namespace FileCurator.Formats.Data Assembly FileCurator.dll Generic file public class GenericFile : FileBaseClass<GenericFile>, IGenericFile Inheritance object FileBaseClass<GenericFile> GenericFile Implements IGenericFile Inherited Members FileBaseClass<GenericFile>.CompareTo(object) FileBaseClass<GenericFile>.Equals(object) FileBaseClass<GenericFile>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors GenericFile(string, string, string) Initializes a new instance of the GenericFile class. public GenericFile(string content, string title, string meta) Parameters content string The content. title string The title. meta string The meta. Properties Content Gets the content. public override string Content { get; set; } Property Value string The content. Meta Meta data public override string Meta { get; set; } Property Value string The meta. Title Parsed title public override string Title { get; set; } Property Value string The title. Methods CompareTo(GenericFile) Compares the object to another object public override int CompareTo(GenericFile other) Parameters other GenericFile Object to compare to Returns int 0 if they are equal, -1 if this is smaller, 1 if it is larger Equals(GenericFile) Determines if the objects are equal public override bool Equals(GenericFile other) Parameters other GenericFile Other object to compare to Returns bool True if they are equal, false otherwise ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. See Also FileBaseClass<FormatFileType>"
  },
  "api/FileCurator.Formats.Data.GenericRow.html": {
    "href": "api/FileCurator.Formats.Data.GenericRow.html",
    "title": "Class GenericRow | FileCurator API Reference",
    "summary": "Class GenericRow Namespace FileCurator.Formats.Data Assembly FileCurator.dll Generic row data public class GenericRow : IRow Inheritance object GenericRow Implements IRow Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Cells Gets or sets the cells. public IList<ICell> Cells { get; } Property Value IList<ICell> The cells. Methods ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance. See Also IRow"
  },
  "api/FileCurator.Formats.Data.GenericTable.html": {
    "href": "api/FileCurator.Formats.Data.GenericTable.html",
    "title": "Class GenericTable | FileCurator API Reference",
    "summary": "Class GenericTable Namespace FileCurator.Formats.Data Assembly FileCurator.dll Generic table object public class GenericTable : TableBaseClass, ITable, IGenericFile Inheritance object FileBaseClass<TableBaseClass> TableBaseClass GenericTable Implements ITable IGenericFile Inherited Members TableBaseClass.Columns TableBaseClass.Content TableBaseClass.Meta TableBaseClass.Rows TableBaseClass.Title TableBaseClass.Convert<TObject>() TableBaseClass.ToString() FileBaseClass<TableBaseClass>.CompareTo(object) FileBaseClass<TableBaseClass>.Equals(object) FileBaseClass<TableBaseClass>.GetHashCode() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CompareTo(TableBaseClass) Compares the object to another object public override int CompareTo(TableBaseClass other) Parameters other TableBaseClass Object to compare to Returns int 0 if they are equal, -1 if this is smaller, 1 if it is larger Equals(TableBaseClass) Determines if the objects are equal public override bool Equals(TableBaseClass other) Parameters other TableBaseClass Other object to compare to Returns bool True if they are equal, false otherwise See Also TableBaseClass"
  },
  "api/FileCurator.Formats.Data.Interface.IPhoneNumber.html": {
    "href": "api/FileCurator.Formats.Data.Interface.IPhoneNumber.html",
    "title": "Interface IPhoneNumber | FileCurator API Reference",
    "summary": "Interface IPhoneNumber Namespace FileCurator.Formats.Data.Interface Assembly FileCurator.dll Phone number public interface IPhoneNumber Properties Number Gets or sets the number. string Number { get; set; } Property Value string The number. Type Gets or sets the type. string Type { get; set; } Property Value string The type."
  },
  "api/FileCurator.Formats.Data.Interface.html": {
    "href": "api/FileCurator.Formats.Data.Interface.html",
    "title": "Namespace FileCurator.Formats.Data.Interface | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.Data.Interface Interfaces IPhoneNumber Phone number"
  },
  "api/FileCurator.Formats.Data.Interfaces.IAddress.html": {
    "href": "api/FileCurator.Formats.Data.Interfaces.IAddress.html",
    "title": "Interface IAddress | FileCurator API Reference",
    "summary": "Interface IAddress Namespace FileCurator.Formats.Data.Interfaces Assembly FileCurator.dll Address interface public interface IAddress Properties City Gets or sets the city. string? City { get; set; } Property Value string The city. Country Gets or sets the country. string? Country { get; set; } Property Value string The country. Name Gets or sets the name. string? Name { get; set; } Property Value string The name. StateOrProvence Gets or sets the state or provence. string? StateOrProvence { get; set; } Property Value string The state or provence. Street Gets or sets the street. string? Street { get; set; } Property Value string The street. Type Gets or sets the type. string? Type { get; set; } Property Value string The type. ZipCode Gets or sets the area code. string? ZipCode { get; set; } Property Value string The area code."
  },
  "api/FileCurator.Formats.Data.Interfaces.ICalendar.html": {
    "href": "api/FileCurator.Formats.Data.Interfaces.ICalendar.html",
    "title": "Interface ICalendar | FileCurator API Reference",
    "summary": "Interface ICalendar Namespace FileCurator.Formats.Data.Interfaces Assembly FileCurator.dll Calendar item public interface ICalendar : IGenericFile Inherited Members IGenericFile.Content IGenericFile.Meta IGenericFile.Title Properties AttendeeList List of attendees IList<IMailAddress> AttendeeList { get; } Property Value IList<IMailAddress> Cancel Determines if the calendar item is being canceled bool Cancel { get; set; } Property Value bool CurrentTimeZone The time zone for the calendar event TimeZoneInfo CurrentTimeZone { get; set; } Property Value TimeZoneInfo Description Gets the description. string Description { get; set; } Property Value string The description. EndTime The end time DateTime EndTime { get; set; } Property Value DateTime Location The location of the event string Location { get; set; } Property Value string Organizer Organizer IMailAddress Organizer { get; set; } Property Value IMailAddress StartTime The start time DateTime StartTime { get; set; } Property Value DateTime Status Sets the status for the appointment (FREE, BUSY, etc.) string Status { get; set; } Property Value string Subject Gets the subject. string Subject { get; set; } Property Value string The subject. See Also IGenericFile"
  },
  "api/FileCurator.Formats.Data.Interfaces.ICard.html": {
    "href": "api/FileCurator.Formats.Data.Interfaces.ICard.html",
    "title": "Interface ICard | FileCurator API Reference",
    "summary": "Interface ICard Namespace FileCurator.Formats.Data.Interfaces Assembly FileCurator.dll Card file type public interface ICard : IGenericFile Inherited Members IGenericFile.Content IGenericFile.Meta Properties Addresses Gets or sets the addresses. IList<IAddress> Addresses { get; set; } Property Value IList<IAddress> The addresses. DirectDial Work phone number of the individual IList<IPhoneNumber> DirectDial { get; set; } Property Value IList<IPhoneNumber> Email Email of the individual IList<IMailAddress> Email { get; set; } Property Value IList<IMailAddress> FirstName First name string FirstName { get; set; } Property Value string FullName Gets or sets the full name. string FullName { get; } Property Value string The full name. LastName Last name string LastName { get; set; } Property Value string MiddleName Middle name string MiddleName { get; set; } Property Value string Nickname Gets or sets the nickname associated with the entity. string Nickname { get; set; } Property Value string Organization Organization the person belongs to string Organization { get; set; } Property Value string Prefix Prefix string Prefix { get; set; } Property Value string Relationships Relationship to the person (uses XFN) IList<Relationship> Relationships { get; } Property Value IList<Relationship> Suffix Suffix string Suffix { get; set; } Property Value string Title Gets or sets the title. string Title { get; set; } Property Value string The title. Url Url to the person's site string Url { get; set; } Property Value string See Also IGenericFile"
  },
  "api/FileCurator.Formats.Data.Interfaces.ICell.html": {
    "href": "api/FileCurator.Formats.Data.Interfaces.ICell.html",
    "title": "Interface ICell | FileCurator API Reference",
    "summary": "Interface ICell Namespace FileCurator.Formats.Data.Interfaces Assembly FileCurator.dll Cell interface public interface ICell Properties Content Gets or sets the content. string Content { get; set; } Property Value string The content. Methods GetValue<TValue>() Gets the value as the type specified. TValue GetValue<TValue>() Returns TValue The content of the cell as the value type specified. Type Parameters TValue The type of the value."
  },
  "api/FileCurator.Formats.Data.Interfaces.IChannel.html": {
    "href": "api/FileCurator.Formats.Data.Interfaces.IChannel.html",
    "title": "Interface IChannel | FileCurator API Reference",
    "summary": "Interface IChannel Namespace FileCurator.Formats.Data.Interfaces Assembly FileCurator.dll Channel interface public interface IChannel : IList<IFeedItem>, ICollection<IFeedItem>, IEnumerable<IFeedItem>, IEnumerable Inherited Members IList<IFeedItem>.IndexOf(IFeedItem) IList<IFeedItem>.Insert(int, IFeedItem) IList<IFeedItem>.RemoveAt(int) IList<IFeedItem>.this[int] ICollection<IFeedItem>.Add(IFeedItem) ICollection<IFeedItem>.Clear() ICollection<IFeedItem>.Contains(IFeedItem) ICollection<IFeedItem>.CopyTo(IFeedItem[], int) ICollection<IFeedItem>.Remove(IFeedItem) ICollection<IFeedItem>.Count ICollection<IFeedItem>.IsReadOnly IEnumerable<IFeedItem>.GetEnumerator() Properties Categories Gets the categories. IList<string> Categories { get; } Property Value IList<string> The categories. Cloud Gets the cloud. string? Cloud { get; set; } Property Value string The cloud. Content Gets the content. string Content { get; } Property Value string The content. Copyright Gets the copyright. string Copyright { get; set; } Property Value string The copyright. Description Gets the description. string? Description { get; set; } Property Value string The description. Docs Gets the docs. string Docs { get; set; } Property Value string The docs. Explicit Gets or sets a value indicating whether this IChannel is explicit. bool Explicit { get; set; } Property Value bool true if explicit; otherwise, false. ImageUrl Gets or sets the image URL. string? ImageUrl { get; set; } Property Value string The image URL. Language Gets or sets the language. string Language { get; set; } Property Value string The language. Link Gets or sets the link. string? Link { get; set; } Property Value string The link. PubDate Gets or sets the pub date. DateTime PubDate { get; set; } Property Value DateTime The pub date. TTL Gets or sets the TTL. int TTL { get; set; } Property Value int The TTL. Title Gets or sets the title. string? Title { get; set; } Property Value string The title. WebMaster Gets or sets the web master. string? WebMaster { get; set; } Property Value string The web master."
  },
  "api/FileCurator.Formats.Data.Interfaces.IEnclosure.html": {
    "href": "api/FileCurator.Formats.Data.Interfaces.IEnclosure.html",
    "title": "Interface IEnclosure | FileCurator API Reference",
    "summary": "Interface IEnclosure Namespace FileCurator.Formats.Data.Interfaces Assembly FileCurator.dll Enclosure interface public interface IEnclosure Properties Length Gets or sets the length. int Length { get; set; } Property Value int The length. Type Gets or sets the type. string? Type { get; set; } Property Value string The type. Url Gets or sets the URL. string? Url { get; set; } Property Value string The URL."
  },
  "api/FileCurator.Formats.Data.Interfaces.IFeed.html": {
    "href": "api/FileCurator.Formats.Data.Interfaces.IFeed.html",
    "title": "Interface IFeed | FileCurator API Reference",
    "summary": "Interface IFeed Namespace FileCurator.Formats.Data.Interfaces Assembly FileCurator.dll Feed interface public interface IFeed : IGenericFile, IList<IChannel>, ICollection<IChannel>, IEnumerable<IChannel>, IEnumerable Inherited Members IGenericFile.Content IGenericFile.Meta IGenericFile.Title IList<IChannel>.IndexOf(IChannel) IList<IChannel>.Insert(int, IChannel) IList<IChannel>.RemoveAt(int) IList<IChannel>.this[int] ICollection<IChannel>.Add(IChannel) ICollection<IChannel>.Clear() ICollection<IChannel>.Contains(IChannel) ICollection<IChannel>.CopyTo(IChannel[], int) ICollection<IChannel>.Remove(IChannel) ICollection<IChannel>.Count ICollection<IChannel>.IsReadOnly IEnumerable<IChannel>.GetEnumerator() Properties Channels Gets the channels. IList<IChannel> Channels { get; } Property Value IList<IChannel> The channels. See Also IGenericFile"
  },
  "api/FileCurator.Formats.Data.Interfaces.IFeedGuid.html": {
    "href": "api/FileCurator.Formats.Data.Interfaces.IFeedGuid.html",
    "title": "Interface IFeedGuid | FileCurator API Reference",
    "summary": "Interface IFeedGuid Namespace FileCurator.Formats.Data.Interfaces Assembly FileCurator.dll Feed Guid public interface IFeedGuid Properties GuidText Gets or sets the unique identifier text. string? GuidText { get; set; } Property Value string The unique identifier text. IsPermaLink Gets or sets a value indicating whether this instance is perma link. bool IsPermaLink { get; set; } Property Value bool true if this instance is perma link; otherwise, false."
  },
  "api/FileCurator.Formats.Data.Interfaces.IFeedItem.html": {
    "href": "api/FileCurator.Formats.Data.Interfaces.IFeedItem.html",
    "title": "Interface IFeedItem | FileCurator API Reference",
    "summary": "Interface IFeedItem Namespace FileCurator.Formats.Data.Interfaces Assembly FileCurator.dll Feed item public interface IFeedItem Properties Author Gets or sets the author. string? Author { get; set; } Property Value string The author. Categories Gets or sets the categories. IList<string> Categories { get; } Property Value IList<string> The categories. Content Gets the content. string Content { get; } Property Value string The content. Description Gets or sets the description. string? Description { get; set; } Property Value string The description. Enclosure Gets or sets the enclosure. IEnclosure? Enclosure { get; set; } Property Value IEnclosure The enclosure. GUID Gets or sets the unique identifier. IFeedGuid? GUID { get; set; } Property Value IFeedGuid The unique identifier. Link Gets or sets the link. string? Link { get; set; } Property Value string The link. PubDate Gets or sets the pub date. DateTime PubDate { get; set; } Property Value DateTime The pub date. Thumbnail Gets or sets the thumbnail. IThumbnail? Thumbnail { get; set; } Property Value IThumbnail The thumbnail. Title Gets or sets the title. string? Title { get; set; } Property Value string The title."
  },
  "api/FileCurator.Formats.Data.Interfaces.IGenericFile.html": {
    "href": "api/FileCurator.Formats.Data.Interfaces.IGenericFile.html",
    "title": "Interface IGenericFile | FileCurator API Reference",
    "summary": "Interface IGenericFile Namespace FileCurator.Formats.Data.Interfaces Assembly FileCurator.dll File interface public interface IGenericFile Properties Content Parsed content string Content { get; } Property Value string The content. Meta Meta data string Meta { get; } Property Value string The meta. Title Parsed title string Title { get; } Property Value string The title."
  },
  "api/FileCurator.Formats.Data.Interfaces.IMailAddress.html": {
    "href": "api/FileCurator.Formats.Data.Interfaces.IMailAddress.html",
    "title": "Interface IMailAddress | FileCurator API Reference",
    "summary": "Interface IMailAddress Namespace FileCurator.Formats.Data.Interfaces Assembly FileCurator.dll Mail address interface public interface IMailAddress Properties EmailAddress Gets or sets the email address. string EmailAddress { get; set; } Property Value string The email address. Name Gets or sets the name. string Name { get; set; } Property Value string The name. Type Gets or sets the type. string Type { get; set; } Property Value string The type."
  },
  "api/FileCurator.Formats.Data.Interfaces.IMessage.html": {
    "href": "api/FileCurator.Formats.Data.Interfaces.IMessage.html",
    "title": "Interface IMessage | FileCurator API Reference",
    "summary": "Interface IMessage Namespace FileCurator.Formats.Data.Interfaces Assembly FileCurator.dll Message interface public interface IMessage : IGenericFile Inherited Members IGenericFile.Content IGenericFile.Meta IGenericFile.Title Properties BCC Gets the BCC. IList<string> BCC { get; } Property Value IList<string> The BCC. CC Gets the cc. IList<string> CC { get; } Property Value IList<string> The cc. From Gets or sets from. string From { get; set; } Property Value string From. Sent Gets or sets the sent. DateTime Sent { get; set; } Property Value DateTime The sent. To Gets to. IList<string> To { get; } Property Value IList<string> To. See Also IGenericFile"
  },
  "api/FileCurator.Formats.Data.Interfaces.IRow.html": {
    "href": "api/FileCurator.Formats.Data.Interfaces.IRow.html",
    "title": "Interface IRow | FileCurator API Reference",
    "summary": "Interface IRow Namespace FileCurator.Formats.Data.Interfaces Assembly FileCurator.dll Row interface public interface IRow Properties Cells Gets the cells. IList<ICell> Cells { get; } Property Value IList<ICell> The cells."
  },
  "api/FileCurator.Formats.Data.Interfaces.ITable.html": {
    "href": "api/FileCurator.Formats.Data.Interfaces.ITable.html",
    "title": "Interface ITable | FileCurator API Reference",
    "summary": "Interface ITable Namespace FileCurator.Formats.Data.Interfaces Assembly FileCurator.dll Table interface public interface ITable : IGenericFile Inherited Members IGenericFile.Content IGenericFile.Meta IGenericFile.Title Properties Columns Gets the headers. IList<string> Columns { get; } Property Value IList<string> The headers. Rows Gets the data rows. IList<IRow> Rows { get; } Property Value IList<IRow> The data rows. Methods Convert<TObject>() Converts this instance into the object array of the type specified. List<TObject> Convert<TObject>() Returns List<TObject> The resulting array. Type Parameters TObject The type of the object."
  },
  "api/FileCurator.Formats.Data.Interfaces.IThumbnail.html": {
    "href": "api/FileCurator.Formats.Data.Interfaces.IThumbnail.html",
    "title": "Interface IThumbnail | FileCurator API Reference",
    "summary": "Interface IThumbnail Namespace FileCurator.Formats.Data.Interfaces Assembly FileCurator.dll Thumbnail interface public interface IThumbnail Properties Height Gets or sets the height. int Height { get; set; } Property Value int The height. Url Gets or sets the URL. string? Url { get; set; } Property Value string The URL. Width Gets or sets the width. int Width { get; set; } Property Value int The width."
  },
  "api/FileCurator.Formats.Data.Interfaces.html": {
    "href": "api/FileCurator.Formats.Data.Interfaces.html",
    "title": "Namespace FileCurator.Formats.Data.Interfaces | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.Data.Interfaces Interfaces IAddress Address interface ICalendar Calendar item ICard Card file type ICell Cell interface IChannel Channel interface IEnclosure Enclosure interface IFeed Feed interface IFeedGuid Feed Guid IFeedItem Feed item IGenericFile File interface IMailAddress Mail address interface IMessage Message interface IRow Row interface ITable Table interface IThumbnail Thumbnail interface"
  },
  "api/FileCurator.Formats.Data.MailAddress.html": {
    "href": "api/FileCurator.Formats.Data.MailAddress.html",
    "title": "Class MailAddress | FileCurator API Reference",
    "summary": "Class MailAddress Namespace FileCurator.Formats.Data Assembly FileCurator.dll Mail address public class MailAddress : IMailAddress Inheritance object MailAddress Implements IMailAddress Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties EmailAddress Gets or sets the email address. public string EmailAddress { get; set; } Property Value string The email address. Name Gets or sets the name. public string Name { get; set; } Property Value string The name. Type Gets or sets the type. public string Type { get; set; } Property Value string The type. See Also IMailAddress"
  },
  "api/FileCurator.Formats.Data.PhoneNumber.html": {
    "href": "api/FileCurator.Formats.Data.PhoneNumber.html",
    "title": "Class PhoneNumber | FileCurator API Reference",
    "summary": "Class PhoneNumber Namespace FileCurator.Formats.Data Assembly FileCurator.dll Phone number data holder public class PhoneNumber : IPhoneNumber Inheritance object PhoneNumber Implements IPhoneNumber Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Number Gets or sets the number. public string Number { get; set; } Property Value string The number. Type Gets or sets the type. public string Type { get; set; } Property Value string The type. See Also IPhoneNumber"
  },
  "api/FileCurator.Formats.Data.html": {
    "href": "api/FileCurator.Formats.Data.html",
    "title": "Namespace FileCurator.Formats.Data | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.Data Classes Address Address class GenericCalendar Generic calendar item GenericCard Generic card GenericCell Generic cell data GenericEmail Generic email message GenericFile Generic file GenericRow Generic row data GenericTable Generic table object MailAddress Mail address PhoneNumber Phone number data holder"
  },
  "api/FileCurator.Formats.Delimited.DelimitedFormat.html": {
    "href": "api/FileCurator.Formats.Delimited.DelimitedFormat.html",
    "title": "Class DelimitedFormat | FileCurator API Reference",
    "summary": "Class DelimitedFormat Namespace FileCurator.Formats.Delimited Assembly FileCurator.dll Delimited file format public class DelimitedFormat : FormatBaseClass<DelimitedReader, DelimitedWriter, ITable>, IFormat<ITable>, IFormat Inheritance object FormatBaseClass<DelimitedReader, DelimitedWriter, ITable> DelimitedFormat Implements IFormat<ITable> IFormat Inherited Members FormatBaseClass<DelimitedReader, DelimitedWriter, ITable>.ContentTypes FormatBaseClass<DelimitedReader, DelimitedWriter, ITable>.DisplayName FormatBaseClass<DelimitedReader, DelimitedWriter, ITable>.FileTypes FormatBaseClass<DelimitedReader, DelimitedWriter, ITable>.HeaderInfo FormatBaseClass<DelimitedReader, DelimitedWriter, ITable>.Reader FormatBaseClass<DelimitedReader, DelimitedWriter, ITable>.Writer FormatBaseClass<DelimitedReader, DelimitedWriter, ITable>.CanRead(string) FormatBaseClass<DelimitedReader, DelimitedWriter, ITable>.CanRead(Stream) FormatBaseClass<DelimitedReader, DelimitedWriter, ITable>.CanWrite(string) FormatBaseClass<DelimitedReader, DelimitedWriter, ITable>.Read(Stream) FormatBaseClass<DelimitedReader, DelimitedWriter, ITable>.ReadAsync(Stream) FormatBaseClass<DelimitedReader, DelimitedWriter, ITable>.ReadBase(Stream) FormatBaseClass<DelimitedReader, DelimitedWriter, ITable>.ReadBaseAsync(Stream) FormatBaseClass<DelimitedReader, DelimitedWriter, ITable>.Write(Stream, IGenericFile) FormatBaseClass<DelimitedReader, DelimitedWriter, ITable>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentTypes Gets the content types. public override string[] ContentTypes { get; } Property Value string[] The content types. DisplayName Gets the display name. public override string DisplayName { get; } Property Value string The display name. FileTypes Gets the file types. public override string[] FileTypes { get; } Property Value string[] The file types. See Also FormatBaseClass<TFileReader, TFileWriter, TFile>"
  },
  "api/FileCurator.Formats.Delimited.DelimitedReader.html": {
    "href": "api/FileCurator.Formats.Delimited.DelimitedReader.html",
    "title": "Class DelimitedReader | FileCurator API Reference",
    "summary": "Class DelimitedReader Namespace FileCurator.Formats.Delimited Assembly FileCurator.dll Delimited file reader public class DelimitedReader : ReaderBaseClass<ITable>, IGenericFileReader<ITable> Inheritance object ReaderBaseClass<ITable> DelimitedReader Implements IGenericFileReader<ITable> Inherited Members ReaderBaseClass<ITable>.CanRead(string) ReaderBaseClass<ITable>.CanRead(Stream) ReaderBaseClass<ITable>.InternalCanRead(Stream) ReaderBaseClass<ITable>.ReadAsync(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderIdentifier Gets the header identifier. public override byte[] HeaderIdentifier { get; } Property Value byte[] The header identifier. Methods Read(Stream) Reads the specified stream. public override ITable Read(Stream stream) Parameters stream Stream The stream. Returns ITable The file See Also IGenericFileReader<TFile>"
  },
  "api/FileCurator.Formats.Delimited.DelimitedWriter.html": {
    "href": "api/FileCurator.Formats.Delimited.DelimitedWriter.html",
    "title": "Class DelimitedWriter | FileCurator API Reference",
    "summary": "Class DelimitedWriter Namespace FileCurator.Formats.Delimited Assembly FileCurator.dll Delimited file writer public class DelimitedWriter : IGenericFileWriter Inheritance object DelimitedWriter Implements IGenericFileWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Write(Stream, IGenericFile) Writes the file to the specified writer. public bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. public Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise. See Also IGenericFileWriter"
  },
  "api/FileCurator.Formats.Delimited.html": {
    "href": "api/FileCurator.Formats.Delimited.html",
    "title": "Namespace FileCurator.Formats.Delimited | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.Delimited Classes DelimitedFormat Delimited file format DelimitedReader Delimited file reader DelimitedWriter Delimited file writer"
  },
  "api/FileCurator.Formats.Excel.ExcelFormat.html": {
    "href": "api/FileCurator.Formats.Excel.ExcelFormat.html",
    "title": "Class ExcelFormat | FileCurator API Reference",
    "summary": "Class ExcelFormat Namespace FileCurator.Formats.Excel Assembly FileCurator.dll Excel format public class ExcelFormat : FormatBaseClass<ExcelReader, ExcelWriter, ITable>, IFormat<ITable>, IFormat Inheritance object FormatBaseClass<ExcelReader, ExcelWriter, ITable> ExcelFormat Implements IFormat<ITable> IFormat Inherited Members FormatBaseClass<ExcelReader, ExcelWriter, ITable>.ContentTypes FormatBaseClass<ExcelReader, ExcelWriter, ITable>.DisplayName FormatBaseClass<ExcelReader, ExcelWriter, ITable>.FileTypes FormatBaseClass<ExcelReader, ExcelWriter, ITable>.HeaderInfo FormatBaseClass<ExcelReader, ExcelWriter, ITable>.Reader FormatBaseClass<ExcelReader, ExcelWriter, ITable>.Writer FormatBaseClass<ExcelReader, ExcelWriter, ITable>.CanRead(string) FormatBaseClass<ExcelReader, ExcelWriter, ITable>.CanRead(Stream) FormatBaseClass<ExcelReader, ExcelWriter, ITable>.CanWrite(string) FormatBaseClass<ExcelReader, ExcelWriter, ITable>.Read(Stream) FormatBaseClass<ExcelReader, ExcelWriter, ITable>.ReadAsync(Stream) FormatBaseClass<ExcelReader, ExcelWriter, ITable>.ReadBase(Stream) FormatBaseClass<ExcelReader, ExcelWriter, ITable>.ReadBaseAsync(Stream) FormatBaseClass<ExcelReader, ExcelWriter, ITable>.Write(Stream, IGenericFile) FormatBaseClass<ExcelReader, ExcelWriter, ITable>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentTypes Gets the content types. public override string[] ContentTypes { get; } Property Value string[] The content types. DisplayName Gets or sets the display name. public override string DisplayName { get; } Property Value string The display name. FileTypes Gets or sets the file types. public override string[] FileTypes { get; } Property Value string[] The file types. See Also FormatBaseClass<TFileReader, TFileWriter, TFile>"
  },
  "api/FileCurator.Formats.Excel.ExcelReader.html": {
    "href": "api/FileCurator.Formats.Excel.ExcelReader.html",
    "title": "Class ExcelReader | FileCurator API Reference",
    "summary": "Class ExcelReader Namespace FileCurator.Formats.Excel Assembly FileCurator.dll Excel reader public class ExcelReader : ReaderBaseClass<ITable>, IGenericFileReader<ITable> Inheritance object ReaderBaseClass<ITable> ExcelReader Implements IGenericFileReader<ITable> Inherited Members ReaderBaseClass<ITable>.CanRead(string) ReaderBaseClass<ITable>.CanRead(Stream) ReaderBaseClass<ITable>.ReadAsync(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderIdentifier Gets the header identifier. public override byte[] HeaderIdentifier { get; } Property Value byte[] The header identifier. Methods InternalCanRead(Stream) Used to determine if a reader can actually read the file public override bool InternalCanRead(Stream stream) Parameters stream Stream The stream. Returns bool True if it can, false otherwise Read(Stream) Reads the excel. public override ITable Read(Stream stream) Parameters stream Stream The stream. Returns ITable The excel data See Also IGenericFileReader<TFile>"
  },
  "api/FileCurator.Formats.Excel.ExcelWriter.html": {
    "href": "api/FileCurator.Formats.Excel.ExcelWriter.html",
    "title": "Class ExcelWriter | FileCurator API Reference",
    "summary": "Class ExcelWriter Namespace FileCurator.Formats.Excel Assembly FileCurator.dll Excel writer public class ExcelWriter : IGenericFileWriter Inheritance object ExcelWriter Implements IGenericFileWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Column(int) Gets the specified column name. public static string Column(int column) Parameters column int The column. Returns string The column name Write(Stream, IGenericFile) Writes the file to the specified writer. public bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. public Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise. See Also IGenericFileWriter"
  },
  "api/FileCurator.Formats.Excel.html": {
    "href": "api/FileCurator.Formats.Excel.html",
    "title": "Namespace FileCurator.Formats.Excel | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.Excel Classes ExcelFormat Excel format ExcelReader Excel reader ExcelWriter Excel writer"
  },
  "api/FileCurator.Formats.HTML.HTMLFormat.html": {
    "href": "api/FileCurator.Formats.HTML.HTMLFormat.html",
    "title": "Class HTMLFormat | FileCurator API Reference",
    "summary": "Class HTMLFormat Namespace FileCurator.Formats.HTML Assembly FileCurator.dll HTML format public class HTMLFormat : FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile>, IFormat<IGenericFile>, IFormat Inheritance object FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile> HTMLFormat Implements IFormat<IGenericFile> IFormat Inherited Members FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile>.ContentTypes FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile>.DisplayName FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile>.FileTypes FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile>.HeaderInfo FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile>.Reader FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile>.Writer FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile>.CanRead(string) FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile>.CanRead(Stream) FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile>.CanWrite(string) FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile>.Read(Stream) FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile>.ReadAsync(Stream) FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile>.ReadBase(Stream) FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile>.ReadBaseAsync(Stream) FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile>.Write(Stream, IGenericFile) FormatBaseClass<HTMLReader, HTMLWriter, IGenericFile>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentTypes Gets the content types. public override string[] ContentTypes { get; } Property Value string[] The content types. DisplayName Gets or sets the display name. public override string DisplayName { get; } Property Value string The display name. FileTypes Gets or sets the file types. public override string[] FileTypes { get; } Property Value string[] The file types. See Also FormatBaseClass<TFileReader, TFileWriter, TFile>"
  },
  "api/FileCurator.Formats.HTML.HTMLReader.html": {
    "href": "api/FileCurator.Formats.HTML.HTMLReader.html",
    "title": "Class HTMLReader | FileCurator API Reference",
    "summary": "Class HTMLReader Namespace FileCurator.Formats.HTML Assembly FileCurator.dll HTML reader public class HTMLReader : ReaderBaseClass<IGenericFile>, IGenericFileReader<IGenericFile> Inheritance object ReaderBaseClass<IGenericFile> HTMLReader Implements IGenericFileReader<IGenericFile> Inherited Members ReaderBaseClass<IGenericFile>.CanRead(string) ReaderBaseClass<IGenericFile>.CanRead(Stream) ReaderBaseClass<IGenericFile>.InternalCanRead(Stream) ReaderBaseClass<IGenericFile>.ReadAsync(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderIdentifier Gets the header identifier. public override byte[] HeaderIdentifier { get; } Property Value byte[] The header identifier. Methods Read(Stream) Reads the specified stream. public override IGenericFile Read(Stream stream) Parameters stream Stream The stream. Returns IGenericFile The file See Also IGenericFileReader<TFile>"
  },
  "api/FileCurator.Formats.HTML.HTMLWriter.html": {
    "href": "api/FileCurator.Formats.HTML.HTMLWriter.html",
    "title": "Class HTMLWriter | FileCurator API Reference",
    "summary": "Class HTMLWriter Namespace FileCurator.Formats.HTML Assembly FileCurator.dll HTML Writer public class HTMLWriter : IGenericFileWriter Inheritance object HTMLWriter Implements IGenericFileWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Write(Stream, IGenericFile) Writes the file to the specified writer. public bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. public Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise. See Also IGenericFileWriter"
  },
  "api/FileCurator.Formats.HTML.html": {
    "href": "api/FileCurator.Formats.HTML.html",
    "title": "Namespace FileCurator.Formats.HTML | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.HTML Classes HTMLFormat HTML format HTMLReader HTML reader HTMLWriter HTML Writer"
  },
  "api/FileCurator.Formats.ICal.ICalendarFormat.html": {
    "href": "api/FileCurator.Formats.ICal.ICalendarFormat.html",
    "title": "Class ICalendarFormat | FileCurator API Reference",
    "summary": "Class ICalendarFormat Namespace FileCurator.Formats.ICal Assembly FileCurator.dll ICal format public class ICalendarFormat : FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar>, IFormat<ICalendar>, IFormat Inheritance object FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar> ICalendarFormat Implements IFormat<ICalendar> IFormat Inherited Members FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar>.ContentTypes FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar>.DisplayName FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar>.FileTypes FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar>.HeaderInfo FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar>.Reader FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar>.Writer FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar>.CanRead(string) FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar>.CanRead(Stream) FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar>.CanWrite(string) FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar>.Read(Stream) FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar>.ReadAsync(Stream) FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar>.ReadBase(Stream) FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar>.ReadBaseAsync(Stream) FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar>.Write(Stream, IGenericFile) FormatBaseClass<ICalendarReader, ICalendarWriter, ICalendar>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentTypes Gets the content types. public override string[] ContentTypes { get; } Property Value string[] The content types. DisplayName Gets the display name. public override string DisplayName { get; } Property Value string The display name. FileTypes Gets the file types. public override string[] FileTypes { get; } Property Value string[] The file types. See Also FormatBaseClass<TFileReader, TFileWriter, TFile>"
  },
  "api/FileCurator.Formats.ICal.ICalendarReader.html": {
    "href": "api/FileCurator.Formats.ICal.ICalendarReader.html",
    "title": "Class ICalendarReader | FileCurator API Reference",
    "summary": "Class ICalendarReader Namespace FileCurator.Formats.ICal Assembly FileCurator.dll ICal reader public class ICalendarReader : ReaderBaseClass<ICalendar>, IGenericFileReader<ICalendar> Inheritance object ReaderBaseClass<ICalendar> ICalendarReader Implements IGenericFileReader<ICalendar> Inherited Members ReaderBaseClass<ICalendar>.CanRead(string) ReaderBaseClass<ICalendar>.CanRead(Stream) ReaderBaseClass<ICalendar>.InternalCanRead(Stream) ReaderBaseClass<ICalendar>.ReadAsync(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderIdentifier Gets the header identifier. public override byte[] HeaderIdentifier { get; } Property Value byte[] The header identifier. Methods Read(Stream) Reads the specified stream. public override ICalendar Read(Stream stream) Parameters stream Stream The stream. Returns ICalendar The file See Also IGenericFileReader<TFile>"
  },
  "api/FileCurator.Formats.ICal.ICalendarWriter.html": {
    "href": "api/FileCurator.Formats.ICal.ICalendarWriter.html",
    "title": "Class ICalendarWriter | FileCurator API Reference",
    "summary": "Class ICalendarWriter Namespace FileCurator.Formats.ICal Assembly FileCurator.dll ICal writer public class ICalendarWriter : IGenericFileWriter Inheritance object ICalendarWriter Implements IGenericFileWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Write(Stream, IGenericFile) Writes the file to the specified writer. public bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. public Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise. See Also IGenericFileWriter"
  },
  "api/FileCurator.Formats.ICal.html": {
    "href": "api/FileCurator.Formats.ICal.html",
    "title": "Namespace FileCurator.Formats.ICal | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.ICal Classes ICalendarFormat ICal format ICalendarReader ICal reader ICalendarWriter ICal writer"
  },
  "api/FileCurator.Formats.Interfaces.IFormat-1.html": {
    "href": "api/FileCurator.Formats.Interfaces.IFormat-1.html",
    "title": "Interface IFormat<TFile> | FileCurator API Reference",
    "summary": "Interface IFormat<TFile> Namespace FileCurator.Formats.Interfaces Assembly FileCurator.dll Format interface public interface IFormat<TFile> : IFormat where TFile : IGenericFile Type Parameters TFile The type of the file. Inherited Members IFormat.ContentTypes IFormat.DisplayName IFormat.FileTypes IFormat.HeaderInfo IFormat.CanRead(string) IFormat.CanRead(Stream) IFormat.CanWrite(string) IFormat.ReadBase(Stream) IFormat.ReadBaseAsync(Stream) IFormat.Write(Stream, IGenericFile) IFormat.WriteAsync(Stream, IGenericFile) Methods Read(Stream) Parses the specified stream. TFile Read(Stream stream) Parameters stream Stream The stream. Returns TFile The resulting file content. ReadAsync(Stream) Parses the specified stream. Task<TFile> ReadAsync(Stream stream) Parameters stream Stream The stream. Returns Task<TFile> The resulting file content."
  },
  "api/FileCurator.Formats.Interfaces.IFormat.html": {
    "href": "api/FileCurator.Formats.Interfaces.IFormat.html",
    "title": "Interface IFormat | FileCurator API Reference",
    "summary": "Interface IFormat Namespace FileCurator.Formats.Interfaces Assembly FileCurator.dll Format interface public interface IFormat Properties ContentTypes Gets the content types. string[] ContentTypes { get; } Property Value string[] The content types. DisplayName Gets the display name. string DisplayName { get; } Property Value string The display name. FileTypes Gets the file types. string[] FileTypes { get; } Property Value string[] The file types. HeaderInfo Gets the header information. byte[] HeaderInfo { get; } Property Value byte[] The header information. Methods CanRead(Stream) Determines whether this instance can decode the specified stream. bool CanRead(Stream stream) Parameters stream Stream The stream. Returns bool True if it can, false otherwise CanRead(string) Determines whether this instance can decode the specified file name. bool CanRead(string fileName) Parameters fileName string Name of the file. Returns bool True if it can, false otherwise CanWrite(string) Determines whether this instance can encode the specified file name. bool CanWrite(string fileName) Parameters fileName string Name of the file. Returns bool True if it can, false otherwise ReadBase(Stream) Reads the base. IGenericFile ReadBase(Stream stream) Parameters stream Stream The stream. Returns IGenericFile Returns an IGenericFile version of the doc. ReadBaseAsync(Stream) Reads the base. Task<IGenericFile> ReadBaseAsync(Stream stream) Parameters stream Stream The stream. Returns Task<IGenericFile> Returns an IGenericFile version of the doc. Write(Stream, IGenericFile) Writes the file to the specified writer. bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise."
  },
  "api/FileCurator.Formats.Interfaces.IGenericFileReader-1.html": {
    "href": "api/FileCurator.Formats.Interfaces.IGenericFileReader-1.html",
    "title": "Interface IGenericFileReader<TFile> | FileCurator API Reference",
    "summary": "Interface IGenericFileReader<TFile> Namespace FileCurator.Formats.Interfaces Assembly FileCurator.dll File reader public interface IGenericFileReader<TFile> where TFile : IGenericFile Type Parameters TFile The type of the file. Properties HeaderIdentifier Gets the header identifier. byte[] HeaderIdentifier { get; } Property Value byte[] The header identifier. Methods CanRead(Stream) Determines whether this instance can decode the specified stream. bool CanRead(Stream stream) Parameters stream Stream The stream. Returns bool True if it can, false otherwise CanRead(string) Determines whether this instance can decode the specified file name. bool CanRead(string fileName) Parameters fileName string Name of the file. Returns bool True if it can, false otherwise Read(Stream) Reads the specified stream. TFile Read(Stream stream) Parameters stream Stream The stream. Returns TFile The file ReadAsync(Stream) Reads the specified stream. Task<TFile> ReadAsync(Stream stream) Parameters stream Stream The stream. Returns Task<TFile> The file"
  },
  "api/FileCurator.Formats.Interfaces.IGenericFileWriter.html": {
    "href": "api/FileCurator.Formats.Interfaces.IGenericFileWriter.html",
    "title": "Interface IGenericFileWriter | FileCurator API Reference",
    "summary": "Interface IGenericFileWriter Namespace FileCurator.Formats.Interfaces Assembly FileCurator.dll File writer interface public interface IGenericFileWriter Methods Write(Stream, IGenericFile) Writes the file to the specified writer. bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise."
  },
  "api/FileCurator.Formats.Interfaces.html": {
    "href": "api/FileCurator.Formats.Interfaces.html",
    "title": "Namespace FileCurator.Formats.Interfaces | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.Interfaces Interfaces IFormat Format interface IFormat<TFile> Format interface IGenericFileReader<TFile> File reader IGenericFileWriter File writer interface"
  },
  "api/FileCurator.Formats.MSG.OutlookStorage.Attachment.html": {
    "href": "api/FileCurator.Formats.MSG.OutlookStorage.Attachment.html",
    "title": "Class OutlookStorage.Attachment | FileCurator API Reference",
    "summary": "Class OutlookStorage.Attachment Namespace FileCurator.Formats.MSG Assembly FileCurator.dll Attachment public class OutlookStorage.Attachment : OutlookStorage, IDisposable Inheritance object OutlookStorage OutlookStorage.Attachment Implements IDisposable Inherited Members OutlookStorage.streamStatistics OutlookStorage.subStorageStatistics OutlookStorage.ReceivedTime OutlookStorage.SentTime OutlookStorage.Dispose() OutlookStorage.GetMapiProperty(string) OutlookStorage.GetMapiPropertyBytes(string) OutlookStorage.GetMapiPropertyInt16(string) OutlookStorage.GetMapiPropertyInt32(string) OutlookStorage.GetMapiPropertyString(string) OutlookStorage.GetStreamAsString(string, Encoding) OutlookStorage.GetStreamBytes(string) OutlookStorage.Disposing() OutlookStorage.LoadStorage(OutlookStorage.NativeMethods.IStorage) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Attachment(OutlookStorage) Initializes a new instance of the OutlookStorage.Attachment class. public Attachment(OutlookStorage message) Parameters message OutlookStorage The message. Properties ContentId Gets the content id. public string? ContentId { get; } Property Value string The content id. Data Gets the data. public byte[]? Data { get; } Property Value byte[] The data. Filename Gets the filename. public string? Filename { get; } Property Value string The filename. RenderingPosisiton Gets the rendering posisiton. public int RenderingPosisiton { get; } Property Value int The rendering posisiton. See Also OutlookStorage"
  },
  "api/FileCurator.Formats.MSG.OutlookStorage.CLZF.html": {
    "href": "api/FileCurator.Formats.MSG.OutlookStorage.CLZF.html",
    "title": "Class OutlookStorage.CLZF | FileCurator API Reference",
    "summary": "Class OutlookStorage.CLZF Namespace FileCurator.Formats.MSG Assembly FileCurator.dll Summary description for CLZF. public static class OutlookStorage.CLZF Inheritance object OutlookStorage.CLZF Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CalculateCRC32(byte[], int, int) Calculates the cr C32. public static int CalculateCRC32(byte[] buf, int off, int len) Parameters buf byte[] The buf. off int The off. len int The length. Returns int DecompressRTF(byte[]) Decompresses the RTF. public static byte[] DecompressRTF(byte[] src) Parameters src byte[] The source. Returns byte[] Exceptions Exception Invalid compressed-RTF header or compressed-RTF data size mismatch or compressed-RTF CRC32 failed or Unknown compression type (magic number + magic + ) GetU32(byte[], int) Gets the u32. public static long GetU32(byte[] buf, int offset) Parameters buf byte[] The buf. offset int The offset. Returns long GetU8(byte[], int) Gets the u8. public static int GetU8(byte[] buf, int offset) Parameters buf byte[] The buf. offset int The offset. Returns int"
  },
  "api/FileCurator.Formats.MSG.OutlookStorage.Message.html": {
    "href": "api/FileCurator.Formats.MSG.OutlookStorage.Message.html",
    "title": "Class OutlookStorage.Message | FileCurator API Reference",
    "summary": "Class OutlookStorage.Message Namespace FileCurator.Formats.MSG Assembly FileCurator.dll Message public class OutlookStorage.Message : OutlookStorage, IDisposable Inheritance object OutlookStorage OutlookStorage.Message Implements IDisposable Inherited Members OutlookStorage.streamStatistics OutlookStorage.subStorageStatistics OutlookStorage.ReceivedTime OutlookStorage.SentTime OutlookStorage.Dispose() OutlookStorage.GetMapiProperty(string) OutlookStorage.GetMapiPropertyBytes(string) OutlookStorage.GetMapiPropertyInt16(string) OutlookStorage.GetMapiPropertyInt32(string) OutlookStorage.GetMapiPropertyString(string) OutlookStorage.GetStreamAsString(string, Encoding) OutlookStorage.GetStreamBytes(string) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Message(Stream) Initializes a new instance of the OutlookStorage.Message class from a containing an IStorage. public Message(Stream storageStream) Parameters storageStream Stream The Stream containing an IStorage. Message(string) Initializes a new instance of the OutlookStorage.Message class from a msg file. public Message(string msgfile) Parameters msgfile string The msgfile. Properties Attachments Gets the list of attachments in the outlook message. public List<OutlookStorage.Attachment> Attachments { get; } Property Value List<OutlookStorage.Attachment> The list of attachments in the outlook message. BodyRTF Gets the body of the outlook message in RTF format. public string? BodyRTF { get; } Property Value string The body of the outlook message in RTF format. BodyText Gets the body of the outlook message in plain text format. public string? BodyText { get; } Property Value string The body of the outlook message in plain text format. From Gets the display value of the contact that sent the email. public string? From { get; } Property Value string The display value of the contact that sent the email. Messages Gets the list of sub messages in the outlook message. public List<OutlookStorage.Message> Messages { get; } Property Value List<OutlookStorage.Message> The list of sub messages in the outlook message. Recipients Gets the list of recipients in the outlook message. public List<OutlookStorage.Recipient> Recipients { get; } Property Value List<OutlookStorage.Recipient> The list of recipients in the outlook message. Subject Gets the subject of the outlook message. public string? Subject { get; } Property Value string The subject of the outlook message. Methods Disposing() Gives sub classes the chance to free resources during object disposal. protected override void Disposing() LoadStorage(IStorage?) Processes sub storages on the specified storage to capture attachment and recipient data. protected override void LoadStorage(OutlookStorage.NativeMethods.IStorage? storage) Parameters storage OutlookStorage.NativeMethods.IStorage The storage to check for attachment and recipient data. Save(Stream) Saves this OutlookStorage.Message to the specified stream. public void Save(Stream stream) Parameters stream Stream The stream to save to. Save(string) Saves this OutlookStorage.Message to the specified file name. public void Save(string fileName) Parameters fileName string Name of the file. See Also OutlookStorage"
  },
  "api/FileCurator.Formats.MSG.OutlookStorage.NativeMethods.IEnumSTATSTG.html": {
    "href": "api/FileCurator.Formats.MSG.OutlookStorage.NativeMethods.IEnumSTATSTG.html",
    "title": "Interface OutlookStorage.NativeMethods.IEnumSTATSTG | FileCurator API Reference",
    "summary": "Interface OutlookStorage.NativeMethods.IEnumSTATSTG Namespace FileCurator.Formats.MSG Assembly FileCurator.dll Enum STATSTG [Guid(\"0000000D-0000-0000-C000-000000000046\")] [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)] public interface OutlookStorage.NativeMethods.IEnumSTATSTG Methods Clone() Clones this instance. OutlookStorage.NativeMethods.IEnumSTATSTG Clone() Returns OutlookStorage.NativeMethods.IEnumSTATSTG Next(uint, STATSTG[], out uint) Nexts the specified celt. void Next(uint celt, STATSTG[] rgelt, out uint pceltFetched) Parameters celt uint The celt. rgelt STATSTG[] The rgelt. pceltFetched uint The pcelt fetched. Reset() Resets this instance. void Reset() Skip(uint) Skips the specified celt. void Skip(uint celt) Parameters celt uint The celt."
  },
  "api/FileCurator.Formats.MSG.OutlookStorage.NativeMethods.ILockBytes.html": {
    "href": "api/FileCurator.Formats.MSG.OutlookStorage.NativeMethods.ILockBytes.html",
    "title": "Interface OutlookStorage.NativeMethods.ILockBytes | FileCurator API Reference",
    "summary": "Interface OutlookStorage.NativeMethods.ILockBytes Namespace FileCurator.Formats.MSG Assembly FileCurator.dll ILock bytes [Guid(\"0000000A-0000-0000-C000-000000000046\")] [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)] public interface OutlookStorage.NativeMethods.ILockBytes Methods Flush() Flushes this instance. void Flush() LockRegion(long, long, int) Locks the region. void LockRegion(long libOffset, long cb, int dwLockType) Parameters libOffset long The library offset. cb long The cb. dwLockType int Type of the dw lock. ReadAt(long, byte[], int, int[]?) Reads at. void ReadAt(long ulOffset, byte[] pv, int cb, int[]? pcbRead) Parameters ulOffset long The ul offset. pv byte[] The pv. cb int The cb. pcbRead int[] The PCB read. SetSize(long) Sets the size. void SetSize(long cb) Parameters cb long The cb. Stat(out STATSTG, int) Stats the specified pstatstg. void Stat(out STATSTG pstatstg, int grfStatFlag) Parameters pstatstg STATSTG The pstatstg. grfStatFlag int The GRF stat flag. UnlockRegion(long, long, int) Unlocks the region. void UnlockRegion(long libOffset, long cb, int dwLockType) Parameters libOffset long The library offset. cb long The cb. dwLockType int Type of the dw lock. WriteAt(long, byte[], int, int[]?) Writes at. void WriteAt(long ulOffset, byte[] pv, int cb, int[]? pcbWritten) Parameters ulOffset long The ul offset. pv byte[] The pv. cb int The cb. pcbWritten int[] The PCB written."
  },
  "api/FileCurator.Formats.MSG.OutlookStorage.NativeMethods.IStorage.html": {
    "href": "api/FileCurator.Formats.MSG.OutlookStorage.NativeMethods.IStorage.html",
    "title": "Interface OutlookStorage.NativeMethods.IStorage | FileCurator API Reference",
    "summary": "Interface OutlookStorage.NativeMethods.IStorage Namespace FileCurator.Formats.MSG Assembly FileCurator.dll Storage [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)] [Guid(\"0000000B-0000-0000-C000-000000000046\")] public interface OutlookStorage.NativeMethods.IStorage Methods Commit(int) Commits the specified GRF commit flags. void Commit(int grfCommitFlags) Parameters grfCommitFlags int The GRF commit flags. CopyTo(int, Guid[]?, nint, IStorage) Copies to. void CopyTo(int ciidExclude, Guid[]? pIIDExclude, nint snbExclude, OutlookStorage.NativeMethods.IStorage stgDest) Parameters ciidExclude int The ciid exclude. pIIDExclude Guid[] The p iid exclude. snbExclude nint The SNB exclude. stgDest OutlookStorage.NativeMethods.IStorage The STG dest. CreateStorage(string, STGM, int, int) Creates the storage. OutlookStorage.NativeMethods.IStorage CreateStorage(string pwcsName, OutlookStorage.NativeMethods.STGM grfMode, int reserved1, int reserved2) Parameters pwcsName string Name of the PWCS. grfMode OutlookStorage.NativeMethods.STGM The GRF mode. reserved1 int The reserved1. reserved2 int The reserved2. Returns OutlookStorage.NativeMethods.IStorage CreateStream(string, STGM, int, int) Creates the stream. IStream CreateStream(string pwcsName, OutlookStorage.NativeMethods.STGM grfMode, int reserved1, int reserved2) Parameters pwcsName string Name of the PWCS. grfMode OutlookStorage.NativeMethods.STGM The GRF mode. reserved1 int The reserved1. reserved2 int The reserved2. Returns IStream DestroyElement(string) Destroys the element. void DestroyElement(string pwcsName) Parameters pwcsName string Name of the PWCS. EnumElements(int, nint, int, out IEnumSTATSTG) Enums the elements. void EnumElements(int reserved1, nint reserved2, int reserved3, out OutlookStorage.NativeMethods.IEnumSTATSTG ppVal) Parameters reserved1 int The reserved1. reserved2 nint The reserved2. reserved3 int The reserved3. ppVal OutlookStorage.NativeMethods.IEnumSTATSTG The pp value. MoveElementTo(string, IStorage, string, int) Moves the element to. void MoveElementTo(string pwcsName, OutlookStorage.NativeMethods.IStorage stgDest, string pwcsNewName, int grfFlags) Parameters pwcsName string Name of the PWCS. stgDest OutlookStorage.NativeMethods.IStorage The STG dest. pwcsNewName string New name of the PWCS. grfFlags int The GRF flags. OpenStorage(string, nint, STGM, nint, int) Opens the storage. OutlookStorage.NativeMethods.IStorage OpenStorage(string pwcsName, nint pstgPriority, OutlookStorage.NativeMethods.STGM grfMode, nint snbExclude, int reserved) Parameters pwcsName string Name of the PWCS. pstgPriority nint The PSTG priority. grfMode OutlookStorage.NativeMethods.STGM The GRF mode. snbExclude nint The SNB exclude. reserved int The reserved. Returns OutlookStorage.NativeMethods.IStorage OpenStream(string, nint, STGM, int) Opens the stream. IStream OpenStream(string pwcsName, nint reserved1, OutlookStorage.NativeMethods.STGM grfMode, int reserved2) Parameters pwcsName string Name of the PWCS. reserved1 nint The reserved1. grfMode OutlookStorage.NativeMethods.STGM The GRF mode. reserved2 int The reserved2. Returns IStream RenameElement(string, string) Renames the element. void RenameElement(string pwcsOldName, string pwcsNewName) Parameters pwcsOldName string Old name of the PWCS. pwcsNewName string New name of the PWCS. Revert() Reverts this instance. void Revert() SetClass(ref Guid) Sets the class. void SetClass(ref Guid clsid) Parameters clsid Guid The CLSID. SetElementTimes(string, FILETIME, FILETIME, FILETIME) Sets the element times. void SetElementTimes(string pwcsName, FILETIME pctime, FILETIME patime, FILETIME pmtime) Parameters pwcsName string Name of the PWCS. pctime FILETIME The pctime. patime FILETIME The patime. pmtime FILETIME The pmtime. SetStateBits(int, int) Sets the state bits. void SetStateBits(int grfStateBits, int grfMask) Parameters grfStateBits int The GRF state bits. grfMask int The GRF mask. Stat(out STATSTG, int) Stats the specified p stat STG. void Stat(out STATSTG pStatStg, int grfStatFlag) Parameters pStatStg STATSTG The p stat STG. grfStatFlag int The GRF stat flag."
  },
  "api/FileCurator.Formats.MSG.OutlookStorage.NativeMethods.STGM.html": {
    "href": "api/FileCurator.Formats.MSG.OutlookStorage.NativeMethods.STGM.html",
    "title": "Enum OutlookStorage.NativeMethods.STGM | FileCurator API Reference",
    "summary": "Enum OutlookStorage.NativeMethods.STGM Namespace FileCurator.Formats.MSG Assembly FileCurator.dll STGM? [Flags] public enum OutlookStorage.NativeMethods.STGM Fields CONVERT = 131072 The convert CREATE = 4096 The create DELETEONRELEASE = 67108864 The deleteonrelease DIRECT = 0 The direct DIRECT_SWMR = 4194304 The direc t_ SWMR FAILIFTHERE = 0 The failifthere NOSCRATCH = 1048576 The noscratch NOSNAPSHOT = 2097152 The nosnapshot PRIORITY = 262144 The priority READ = 0 The read READWRITE = 2 The readwrite SHARE_DENY_NONE = 64 The shar e_ den y_ none SHARE_DENY_READ = SHARE_EXCLUSIVE | SHARE_DENY_WRITE The shar e_ den y_ read SHARE_DENY_WRITE = 32 The shar e_ den y_ write SHARE_EXCLUSIVE = 16 The shar e_ exclusive SIMPLE = 134217728 The simple TRANSACTED = 65536 The transacted WRITE = 1 The write"
  },
  "api/FileCurator.Formats.MSG.OutlookStorage.NativeMethods.html": {
    "href": "api/FileCurator.Formats.MSG.OutlookStorage.NativeMethods.html",
    "title": "Class OutlookStorage.NativeMethods | FileCurator API Reference",
    "summary": "Class OutlookStorage.NativeMethods Namespace FileCurator.Formats.MSG Assembly FileCurator.dll Native methods protected static class OutlookStorage.NativeMethods Inheritance object OutlookStorage.NativeMethods Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields PT_APPTIME The p t_ apptime public const ushort PT_APPTIME = 7 Field Value ushort PT_BINARY The p t_ binary public const ushort PT_BINARY = 258 Field Value ushort PT_BOOLEAN The p t_ boolean public const ushort PT_BOOLEAN = 11 Field Value ushort PT_CLSID The p t_ CLSID public const ushort PT_CLSID = 72 Field Value ushort PT_CURRENCY The p t_ currency public const ushort PT_CURRENCY = 6 Field Value ushort PT_DOUBLE The p t_ double public const ushort PT_DOUBLE = 5 Field Value ushort PT_ERROR The p t_ error public const ushort PT_ERROR = 10 Field Value ushort PT_I2 The p t_ i2 public const ushort PT_I2 = 2 Field Value ushort PT_I8 The p t_ i8 public const ushort PT_I8 = 20 Field Value ushort PT_LONG The p t_ long public const ushort PT_LONG = 3 Field Value ushort PT_NULL The p t_ null public const ushort PT_NULL = 1 Field Value ushort PT_OBJECT The p t_ object public const ushort PT_OBJECT = 13 Field Value ushort PT_R4 The pt r4 public const ushort PT_R4 = 4 Field Value ushort PT_STRING8 The p t_ strin g8 public const ushort PT_STRING8 = 30 Field Value ushort PT_SYSTIME The p t_ systime public const ushort PT_SYSTIME = 64 Field Value ushort PT_UNICODE The p t_ unicode public const ushort PT_UNICODE = 31 Field Value ushort PT_UNSPECIFIED The p t_ unspecified public const ushort PT_UNSPECIFIED = 0 Field Value ushort Methods CloneStorage(IStorage, bool) Clones the storage. public static OutlookStorage.NativeMethods.IStorage? CloneStorage(OutlookStorage.NativeMethods.IStorage source, bool closeSource) Parameters source OutlookStorage.NativeMethods.IStorage The source. closeSource bool if set to true [close source]. Returns OutlookStorage.NativeMethods.IStorage CreateILockBytesOnHGlobal(nint, bool, out ILockBytes) Creates the i lock bytes on h global. public static extern int CreateILockBytesOnHGlobal(nint hGlobal, bool fDeleteOnRelease, out OutlookStorage.NativeMethods.ILockBytes ppLkbyt) Parameters hGlobal nint The h global. fDeleteOnRelease bool if set to true [f delete on release]. ppLkbyt OutlookStorage.NativeMethods.ILockBytes The pp lkbyt. Returns int StgCreateDocfileOnILockBytes(ILockBytes, STGM, uint, out IStorage) STGs the create docfile on i lock bytes. public static extern int StgCreateDocfileOnILockBytes(OutlookStorage.NativeMethods.ILockBytes plkbyt, OutlookStorage.NativeMethods.STGM grfMode, uint reserved, out OutlookStorage.NativeMethods.IStorage ppstgOpen) Parameters plkbyt OutlookStorage.NativeMethods.ILockBytes The plkbyt. grfMode OutlookStorage.NativeMethods.STGM The GRF mode. reserved uint The reserved. ppstgOpen OutlookStorage.NativeMethods.IStorage The PPSTG open. Returns int StgIsStorageFile(string) STGs the is storage file. public static extern int StgIsStorageFile(string wcsName) Parameters wcsName string Name of the WCS. Returns int StgIsStorageILockBytes(ILockBytes) STGs the is storage i lock bytes. public static extern int StgIsStorageILockBytes(OutlookStorage.NativeMethods.ILockBytes plkbyt) Parameters plkbyt OutlookStorage.NativeMethods.ILockBytes The plkbyt. Returns int StgOpenStorage(string, IStorage?, STGM, nint, int, out IStorage) STGs the open storage. public static extern int StgOpenStorage(string wcsName, OutlookStorage.NativeMethods.IStorage? pstgPriority, OutlookStorage.NativeMethods.STGM grfMode, nint snbExclude, int reserved, out OutlookStorage.NativeMethods.IStorage ppstgOpen) Parameters wcsName string Name of the WCS. pstgPriority OutlookStorage.NativeMethods.IStorage The PSTG priority. grfMode OutlookStorage.NativeMethods.STGM The GRF mode. snbExclude nint The SNB exclude. reserved int The reserved. ppstgOpen OutlookStorage.NativeMethods.IStorage The PPSTG open. Returns int StgOpenStorageOnILockBytes(ILockBytes, IStorage?, STGM, nint, uint, out IStorage) STGs the open storage on i lock bytes. public static extern void StgOpenStorageOnILockBytes(OutlookStorage.NativeMethods.ILockBytes plkbyt, OutlookStorage.NativeMethods.IStorage? pstgPriority, OutlookStorage.NativeMethods.STGM grfMode, nint snbExclude, uint reserved, out OutlookStorage.NativeMethods.IStorage ppstgOpen) Parameters plkbyt OutlookStorage.NativeMethods.ILockBytes The plkbyt. pstgPriority OutlookStorage.NativeMethods.IStorage The PSTG priority. grfMode OutlookStorage.NativeMethods.STGM The GRF mode. snbExclude nint The SNB exclude. reserved uint The reserved. ppstgOpen OutlookStorage.NativeMethods.IStorage The PPSTG open."
  },
  "api/FileCurator.Formats.MSG.OutlookStorage.Recipient.html": {
    "href": "api/FileCurator.Formats.MSG.OutlookStorage.Recipient.html",
    "title": "Class OutlookStorage.Recipient | FileCurator API Reference",
    "summary": "Class OutlookStorage.Recipient Namespace FileCurator.Formats.MSG Assembly FileCurator.dll Recipient public class OutlookStorage.Recipient : OutlookStorage, IDisposable Inheritance object OutlookStorage OutlookStorage.Recipient Implements IDisposable Inherited Members OutlookStorage.streamStatistics OutlookStorage.subStorageStatistics OutlookStorage.ReceivedTime OutlookStorage.SentTime OutlookStorage.Dispose() OutlookStorage.GetMapiProperty(string) OutlookStorage.GetMapiPropertyBytes(string) OutlookStorage.GetMapiPropertyInt16(string) OutlookStorage.GetMapiPropertyInt32(string) OutlookStorage.GetMapiPropertyString(string) OutlookStorage.GetStreamAsString(string, Encoding) OutlookStorage.GetStreamBytes(string) OutlookStorage.Disposing() OutlookStorage.LoadStorage(OutlookStorage.NativeMethods.IStorage) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Recipient(OutlookStorage) Initializes a new instance of the OutlookStorage.Recipient class. public Recipient(OutlookStorage message) Parameters message OutlookStorage The message. Properties DisplayName Gets the display name. public string? DisplayName { get; } Property Value string The display name. Email Gets the recipient email. public string? Email { get; } Property Value string The recipient email. Type Gets the recipient type. public OutlookStorage.RecipientType Type { get; } Property Value OutlookStorage.RecipientType The recipient type. See Also OutlookStorage"
  },
  "api/FileCurator.Formats.MSG.OutlookStorage.RecipientType.html": {
    "href": "api/FileCurator.Formats.MSG.OutlookStorage.RecipientType.html",
    "title": "Enum OutlookStorage.RecipientType | FileCurator API Reference",
    "summary": "Enum OutlookStorage.RecipientType Namespace FileCurator.Formats.MSG Assembly FileCurator.dll Recipient type public enum OutlookStorage.RecipientType Fields CC = 1 CC To = 0 To Unknown = 2 The unknown"
  },
  "api/FileCurator.Formats.MSG.OutlookStorage.html": {
    "href": "api/FileCurator.Formats.MSG.OutlookStorage.html",
    "title": "Class OutlookStorage | FileCurator API Reference",
    "summary": "Class OutlookStorage Namespace FileCurator.Formats.MSG Assembly FileCurator.dll Outlook storage public class OutlookStorage : IDisposable Inheritance object OutlookStorage Implements IDisposable Derived OutlookStorage.Attachment OutlookStorage.Message OutlookStorage.Recipient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields streamStatistics The statistics for all streams in the IStorage associated with this instance. public Dictionary<string, STATSTG> streamStatistics Field Value Dictionary<string, STATSTG> subStorageStatistics The statistics for all storgages in the IStorage associated with this instance. public Dictionary<string, STATSTG> subStorageStatistics Field Value Dictionary<string, STATSTG> Properties ReceivedTime Gets the received time. public DateTime? ReceivedTime { get; } Property Value DateTime? The received time. SentTime Gets the sent time. public DateTime? SentTime { get; } Property Value DateTime? The sent time. Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Disposing() Gives sub classes the chance to free resources during object disposal. protected virtual void Disposing() ~OutlookStorage() Releases unmanaged resources and performs other cleanup operations before the is reclaimed by garbage collection. protected ~OutlookStorage() GetMapiProperty(string) Gets the raw value of the MAPI property. public object? GetMapiProperty(string propIdentifier) Parameters propIdentifier string The 4 char hexadecimal prop identifier. Returns object The raw value of the MAPI property. GetMapiPropertyBytes(string) Gets the value of the MAPI property as a byte array. public byte[]? GetMapiPropertyBytes(string propIdentifier) Parameters propIdentifier string The 4 char hexadecimal prop identifier. Returns byte[] The value of the MAPI property as a byte array. GetMapiPropertyInt16(string) Gets the value of the MAPI property as a short. public short GetMapiPropertyInt16(string propIdentifier) Parameters propIdentifier string The 4 char hexadecimal prop identifier. Returns short The value of the MAPI property as a short. GetMapiPropertyInt32(string) Gets the value of the MAPI property as a integer. public int GetMapiPropertyInt32(string propIdentifier) Parameters propIdentifier string The 4 char hexadecimal prop identifier. Returns int The value of the MAPI property as a integer. GetMapiPropertyString(string) Gets the value of the MAPI property as a string. public string? GetMapiPropertyString(string propIdentifier) Parameters propIdentifier string The 4 char hexadecimal prop identifier. Returns string The value of the MAPI property as a string. GetStreamAsString(string, Encoding) Gets the data in the specified stream as a string using the specifed encoding to decode the stream data. public string GetStreamAsString(string streamName, Encoding streamEncoding) Parameters streamName string Name of the stream to get string data for. streamEncoding Encoding The encoding to decode the stream data with. Returns string The data in the specified stream as a string. GetStreamBytes(string) Gets the data in the specified stream as a byte array. public byte[] GetStreamBytes(string streamName) Parameters streamName string Name of the stream to get data for. Returns byte[] A byte array containg the stream data. LoadStorage(IStorage?) Processes sub streams and storages on the specified storage. protected virtual void LoadStorage(OutlookStorage.NativeMethods.IStorage? storage) Parameters storage OutlookStorage.NativeMethods.IStorage The storage to get sub streams and storages for. See Also IDisposable"
  },
  "api/FileCurator.Formats.MSG.html": {
    "href": "api/FileCurator.Formats.MSG.html",
    "title": "Namespace FileCurator.Formats.MSG | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.MSG Classes OutlookStorage Outlook storage OutlookStorage.Attachment Attachment OutlookStorage.CLZF Summary description for CLZF. OutlookStorage.Message Message OutlookStorage.NativeMethods Native methods OutlookStorage.Recipient Recipient Interfaces OutlookStorage.NativeMethods.IEnumSTATSTG Enum STATSTG OutlookStorage.NativeMethods.ILockBytes ILock bytes OutlookStorage.NativeMethods.IStorage Storage Enums OutlookStorage.NativeMethods.STGM STGM? OutlookStorage.RecipientType Recipient type"
  },
  "api/FileCurator.Formats.Manager.html": {
    "href": "api/FileCurator.Formats.Manager.html",
    "title": "Class Manager | FileCurator API Reference",
    "summary": "Class Manager Namespace FileCurator.Formats Assembly FileCurator.dll Format manager public class Manager Inheritance object Manager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Manager(IEnumerable<IFormat>) Initializes a new instance of the Manager class. public Manager(IEnumerable<IFormat> formats) Parameters formats IEnumerable<IFormat> The formats. Properties DefaultFormat Gets or sets the default format. public IFormat DefaultFormat { get; set; } Property Value IFormat The default format. Formats Gets or sets the formats. public IEnumerable<IFormat> Formats { get; set; } Property Value IEnumerable<IFormat> The formats. FormatsByFileType Gets or sets the formats. public IDictionary<string, IFormat> FormatsByFileType { get; set; } Property Value IDictionary<string, IFormat> The formats. FormatsByMimeType Gets or sets the formats. public IDictionary<string, IFormat> FormatsByMimeType { get; set; } Property Value IDictionary<string, IFormat> The formats. Instance Gets the instance. public static Manager? Instance { get; } Property Value Manager The instance. Methods FindFormat(Stream, string) Finds the format. public IFormat FindFormat(Stream stream, string mimeType) Parameters stream Stream The stream. mimeType string Type of the MIME. Returns IFormat The format associated with the stream. FindFormat(string, Credentials?) Finds the format. public IFormat FindFormat(string fileName, Credentials? credentials) Parameters fileName string Name of the file. credentials Credentials The credentials. Returns IFormat The format associated with the file."
  },
  "api/FileCurator.Formats.Mime.MimeFormat.html": {
    "href": "api/FileCurator.Formats.Mime.MimeFormat.html",
    "title": "Class MimeFormat | FileCurator API Reference",
    "summary": "Class MimeFormat Namespace FileCurator.Formats.Mime Assembly FileCurator.dll Mime format public class MimeFormat : FormatBaseClass<MimeReader, MimeWriter, IMessage>, IFormat<IMessage>, IFormat Inheritance object FormatBaseClass<MimeReader, MimeWriter, IMessage> MimeFormat Implements IFormat<IMessage> IFormat Inherited Members FormatBaseClass<MimeReader, MimeWriter, IMessage>.ContentTypes FormatBaseClass<MimeReader, MimeWriter, IMessage>.DisplayName FormatBaseClass<MimeReader, MimeWriter, IMessage>.FileTypes FormatBaseClass<MimeReader, MimeWriter, IMessage>.HeaderInfo FormatBaseClass<MimeReader, MimeWriter, IMessage>.Reader FormatBaseClass<MimeReader, MimeWriter, IMessage>.Writer FormatBaseClass<MimeReader, MimeWriter, IMessage>.CanRead(string) FormatBaseClass<MimeReader, MimeWriter, IMessage>.CanRead(Stream) FormatBaseClass<MimeReader, MimeWriter, IMessage>.CanWrite(string) FormatBaseClass<MimeReader, MimeWriter, IMessage>.Read(Stream) FormatBaseClass<MimeReader, MimeWriter, IMessage>.ReadAsync(Stream) FormatBaseClass<MimeReader, MimeWriter, IMessage>.ReadBase(Stream) FormatBaseClass<MimeReader, MimeWriter, IMessage>.ReadBaseAsync(Stream) FormatBaseClass<MimeReader, MimeWriter, IMessage>.Write(Stream, IGenericFile) FormatBaseClass<MimeReader, MimeWriter, IMessage>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentTypes Gets the content types. public override string[] ContentTypes { get; } Property Value string[] The content types. DisplayName Gets or sets the display name. public override string DisplayName { get; } Property Value string The display name. FileTypes Gets or sets the file types. public override string[] FileTypes { get; } Property Value string[] The file types. See Also FormatBaseClass<TFileReader, TFileWriter, TFile>"
  },
  "api/FileCurator.Formats.Mime.MimeReader.html": {
    "href": "api/FileCurator.Formats.Mime.MimeReader.html",
    "title": "Class MimeReader | FileCurator API Reference",
    "summary": "Class MimeReader Namespace FileCurator.Formats.Mime Assembly FileCurator.dll MIME file reader public class MimeReader : ReaderBaseClass<IMessage>, IGenericFileReader<IMessage> Inheritance object ReaderBaseClass<IMessage> MimeReader Implements IGenericFileReader<IMessage> Inherited Members ReaderBaseClass<IMessage>.CanRead(string) ReaderBaseClass<IMessage>.CanRead(Stream) ReaderBaseClass<IMessage>.InternalCanRead(Stream) ReaderBaseClass<IMessage>.ReadAsync(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderIdentifier Gets the header identifier. public override byte[] HeaderIdentifier { get; } Property Value byte[] The header identifier. Methods Read(Stream) Reads the specified stream. public override IMessage Read(Stream stream) Parameters stream Stream The stream. Returns IMessage The file See Also IGenericFileReader<TFile>"
  },
  "api/FileCurator.Formats.Mime.MimeWriter.html": {
    "href": "api/FileCurator.Formats.Mime.MimeWriter.html",
    "title": "Class MimeWriter | FileCurator API Reference",
    "summary": "Class MimeWriter Namespace FileCurator.Formats.Mime Assembly FileCurator.dll MIME Writer public class MimeWriter : IGenericFileWriter Inheritance object MimeWriter Implements IGenericFileWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Write(Stream, IGenericFile) Writes the file to the specified writer. public bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. public Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise. See Also IGenericFileWriter"
  },
  "api/FileCurator.Formats.Mime.html": {
    "href": "api/FileCurator.Formats.Mime.html",
    "title": "Namespace FileCurator.Formats.Mime | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.Mime Classes MimeFormat Mime format MimeReader MIME file reader MimeWriter MIME Writer"
  },
  "api/FileCurator.Formats.PDF.PDFFormat.html": {
    "href": "api/FileCurator.Formats.PDF.PDFFormat.html",
    "title": "Class PDFFormat | FileCurator API Reference",
    "summary": "Class PDFFormat Namespace FileCurator.Formats.PDF Assembly FileCurator.dll PDF Format public class PDFFormat : FormatBaseClass<PDFReader, PDFWriter, IGenericFile>, IFormat<IGenericFile>, IFormat Inheritance object FormatBaseClass<PDFReader, PDFWriter, IGenericFile> PDFFormat Implements IFormat<IGenericFile> IFormat Inherited Members FormatBaseClass<PDFReader, PDFWriter, IGenericFile>.ContentTypes FormatBaseClass<PDFReader, PDFWriter, IGenericFile>.DisplayName FormatBaseClass<PDFReader, PDFWriter, IGenericFile>.FileTypes FormatBaseClass<PDFReader, PDFWriter, IGenericFile>.HeaderInfo FormatBaseClass<PDFReader, PDFWriter, IGenericFile>.Reader FormatBaseClass<PDFReader, PDFWriter, IGenericFile>.Writer FormatBaseClass<PDFReader, PDFWriter, IGenericFile>.CanRead(string) FormatBaseClass<PDFReader, PDFWriter, IGenericFile>.CanRead(Stream) FormatBaseClass<PDFReader, PDFWriter, IGenericFile>.CanWrite(string) FormatBaseClass<PDFReader, PDFWriter, IGenericFile>.Read(Stream) FormatBaseClass<PDFReader, PDFWriter, IGenericFile>.ReadAsync(Stream) FormatBaseClass<PDFReader, PDFWriter, IGenericFile>.ReadBase(Stream) FormatBaseClass<PDFReader, PDFWriter, IGenericFile>.ReadBaseAsync(Stream) FormatBaseClass<PDFReader, PDFWriter, IGenericFile>.Write(Stream, IGenericFile) FormatBaseClass<PDFReader, PDFWriter, IGenericFile>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentTypes Gets the content types. public override string[] ContentTypes { get; } Property Value string[] The content types. DisplayName Gets or sets the display name. public override string DisplayName { get; } Property Value string The display name. FileTypes Gets or sets the file types. public override string[] FileTypes { get; } Property Value string[] The file types. See Also FormatBaseClass<TFileReader, TFileWriter, TFile>"
  },
  "api/FileCurator.Formats.PDF.PDFReader.html": {
    "href": "api/FileCurator.Formats.PDF.PDFReader.html",
    "title": "Class PDFReader | FileCurator API Reference",
    "summary": "Class PDFReader Namespace FileCurator.Formats.PDF Assembly FileCurator.dll PDF Reader public class PDFReader : ReaderBaseClass<IGenericFile>, IGenericFileReader<IGenericFile> Inheritance object ReaderBaseClass<IGenericFile> PDFReader Implements IGenericFileReader<IGenericFile> Inherited Members ReaderBaseClass<IGenericFile>.CanRead(string) ReaderBaseClass<IGenericFile>.CanRead(Stream) ReaderBaseClass<IGenericFile>.InternalCanRead(Stream) ReaderBaseClass<IGenericFile>.ReadAsync(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderIdentifier Gets the header identifier. public override byte[] HeaderIdentifier { get; } Property Value byte[] The header identifier. Methods Read(Stream) Reads the specified stream. public override IGenericFile Read(Stream stream) Parameters stream Stream The stream. Returns IGenericFile The file See Also ReaderBaseClass<TFile>"
  },
  "api/FileCurator.Formats.PDF.html": {
    "href": "api/FileCurator.Formats.PDF.html",
    "title": "Namespace FileCurator.Formats.PDF | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.PDF Classes PDFFormat PDF Format PDFReader PDF Reader"
  },
  "api/FileCurator.Formats.PowerPoint.PowerPointFormat.html": {
    "href": "api/FileCurator.Formats.PowerPoint.PowerPointFormat.html",
    "title": "Class PowerPointFormat | FileCurator API Reference",
    "summary": "Class PowerPointFormat Namespace FileCurator.Formats.PowerPoint Assembly FileCurator.dll PowerPoint format public class PowerPointFormat : FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile>, IFormat<IGenericFile>, IFormat Inheritance object FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile> PowerPointFormat Implements IFormat<IGenericFile> IFormat Inherited Members FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile>.ContentTypes FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile>.DisplayName FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile>.FileTypes FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile>.HeaderInfo FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile>.Reader FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile>.Writer FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile>.CanRead(string) FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile>.CanRead(Stream) FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile>.CanWrite(string) FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile>.Read(Stream) FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile>.ReadAsync(Stream) FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile>.ReadBase(Stream) FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile>.ReadBaseAsync(Stream) FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile>.Write(Stream, IGenericFile) FormatBaseClass<PowerPointReader, PowerPointWriter, IGenericFile>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentTypes Gets the content types. public override string[] ContentTypes { get; } Property Value string[] The content types. DisplayName Gets or sets the display name. public override string DisplayName { get; } Property Value string The display name. FileTypes Gets or sets the file types. public override string[] FileTypes { get; } Property Value string[] The file types. See Also FormatBaseClass<TFileReader, TFileWriter, TFile>"
  },
  "api/FileCurator.Formats.PowerPoint.PowerPointReader.html": {
    "href": "api/FileCurator.Formats.PowerPoint.PowerPointReader.html",
    "title": "Class PowerPointReader | FileCurator API Reference",
    "summary": "Class PowerPointReader Namespace FileCurator.Formats.PowerPoint Assembly FileCurator.dll Powerpoint file reader public class PowerPointReader : ReaderBaseClass<IGenericFile>, IGenericFileReader<IGenericFile> Inheritance object ReaderBaseClass<IGenericFile> PowerPointReader Implements IGenericFileReader<IGenericFile> Inherited Members ReaderBaseClass<IGenericFile>.CanRead(string) ReaderBaseClass<IGenericFile>.CanRead(Stream) ReaderBaseClass<IGenericFile>.ReadAsync(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderIdentifier Gets the header identifier. public override byte[] HeaderIdentifier { get; } Property Value byte[] The header identifier. Methods InternalCanRead(Stream) Used to determine if a reader can actually read the file public override bool InternalCanRead(Stream stream) Parameters stream Stream The stream. Returns bool True if it can, false otherwise Read(Stream) Reads the specified stream. public override IGenericFile Read(Stream stream) Parameters stream Stream The stream. Returns IGenericFile The file See Also IGenericFileReader<TFile>"
  },
  "api/FileCurator.Formats.PowerPoint.PowerPointWriter.html": {
    "href": "api/FileCurator.Formats.PowerPoint.PowerPointWriter.html",
    "title": "Class PowerPointWriter | FileCurator API Reference",
    "summary": "Class PowerPointWriter Namespace FileCurator.Formats.PowerPoint Assembly FileCurator.dll PowerPoint file writer. public class PowerPointWriter : IGenericFileWriter Inheritance object PowerPointWriter Implements IGenericFileWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Write(Stream, IGenericFile) Writes the file to the specified writer. public bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. public Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise. See Also IGenericFileWriter"
  },
  "api/FileCurator.Formats.PowerPoint.html": {
    "href": "api/FileCurator.Formats.PowerPoint.html",
    "title": "Namespace FileCurator.Formats.PowerPoint | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.PowerPoint Classes PowerPointFormat PowerPoint format PowerPointReader Powerpoint file reader PowerPointWriter PowerPoint file writer."
  },
  "api/FileCurator.Formats.RSS.Data.Channel.html": {
    "href": "api/FileCurator.Formats.RSS.Data.Channel.html",
    "title": "Class Channel | FileCurator API Reference",
    "summary": "Class Channel Namespace FileCurator.Formats.RSS.Data Assembly FileCurator.dll Channel public class Channel : IChannel, IList<IFeedItem>, ICollection<IFeedItem>, IEnumerable<IFeedItem>, IEnumerable Inheritance object Channel Implements IChannel IList<IFeedItem> ICollection<IFeedItem> IEnumerable<IFeedItem> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Channel() Initializes a new instance of the Channel class. public Channel() Channel(IXPathNavigable) Constructor public Channel(IXPathNavigable doc) Parameters doc IXPathNavigable XML representation of the channel Properties Categories Gets the categories. public IList<string> Categories { get; } Property Value IList<string> The categories. Cloud Gets the cloud. public string? Cloud { get; set; } Property Value string The cloud. Content Gets the content. public string Content { get; } Property Value string The content. Copyright Gets the copyright. public string Copyright { get; set; } Property Value string The copyright. Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int Description Gets the description. public string? Description { get; set; } Property Value string The description. Docs Gets the docs. public string Docs { get; set; } Property Value string The docs. Explicit Gets or sets a value indicating whether this IChannel is explicit. public bool Explicit { get; set; } Property Value bool true if explicit; otherwise, false. ImageUrl Gets or sets the image URL. public string? ImageUrl { get; set; } Property Value string The image URL. IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool this[int] Gets or sets the IFeedItem at the specified index. public IFeedItem this[int index] { get; set; } Parameters index int The index. Property Value IFeedItem The IFeedItem. Items Gets the items. public IList<IFeedItem> Items { get; } Property Value IList<IFeedItem> The items. Language Gets or sets the language. public string Language { get; set; } Property Value string The language. Link Gets or sets the link. public string? Link { get; set; } Property Value string The link. PubDate Gets or sets the pub date. public DateTime PubDate { get; set; } Property Value DateTime The pub date. TTL Gets or sets the TTL. public int TTL { get; set; } Property Value int The TTL. Title Gets or sets the title. public string? Title { get; set; } Property Value string The title. WebMaster Gets or sets the web master. public string? WebMaster { get; set; } Property Value string The web master. Methods Add(IFeedItem) Adds an item to the ICollection<T>. public void Add(IFeedItem item) Parameters item IFeedItem The object to add to the ICollection<T>. Clear() Removes all items from the ICollection<T>. public void Clear() Contains(IFeedItem) Determines whether the ICollection<T> contains a specific value. public bool Contains(IFeedItem item) Parameters item IFeedItem The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. CopyTo(IFeedItem[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(IFeedItem[] array, int arrayIndex) Parameters array IFeedItem[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<IFeedItem> GetEnumerator() Returns IEnumerator<IFeedItem> An enumerator that can be used to iterate through the collection. IndexOf(IFeedItem) Determines the index of a specific item in the IList<T>. public int IndexOf(IFeedItem item) Parameters item IFeedItem The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, IFeedItem) Inserts an item to the IList<T> at the specified index. public void Insert(int index, IFeedItem item) Parameters index int The zero-based index at which item should be inserted. item IFeedItem The object to insert into the IList<T>. Remove(IFeedItem) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(IFeedItem item) Parameters item IFeedItem The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. RemoveAt(int) Removes the IList<T> item at the specified index. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove. ToString() Converts the channel to a string public override string ToString() Returns string The channel as a string See Also IChannel"
  },
  "api/FileCurator.Formats.RSS.Data.Enclosure.html": {
    "href": "api/FileCurator.Formats.RSS.Data.Enclosure.html",
    "title": "Class Enclosure | FileCurator API Reference",
    "summary": "Class Enclosure Namespace FileCurator.Formats.RSS.Data Assembly FileCurator.dll Enclosure public class Enclosure : IEnclosure Inheritance object Enclosure Implements IEnclosure Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Enclosure() Constructor public Enclosure() Enclosure(IXPathNavigable) Constructor public Enclosure(IXPathNavigable doc) Parameters doc IXPathNavigable XML element holding info for the enclosure Properties Length Size in bytes public int Length { get; set; } Property Value int Type File type public string? Type { get; set; } Property Value string Url Location of the item public string? Url { get; set; } Property Value string Methods ToString() to string item. Used for outputting the item to RSS. public override string ToString() Returns string A string formatted for RSS output See Also IEnclosure"
  },
  "api/FileCurator.Formats.RSS.Data.Feed.html": {
    "href": "api/FileCurator.Formats.RSS.Data.Feed.html",
    "title": "Class Feed | FileCurator API Reference",
    "summary": "Class Feed Namespace FileCurator.Formats.RSS.Data Assembly FileCurator.dll Individual RSS Feed public class Feed : IFeed, IGenericFile, IList<IChannel>, ICollection<IChannel>, IEnumerable<IChannel>, IEnumerable Inheritance object Feed Implements IFeed IGenericFile IList<IChannel> ICollection<IChannel> IEnumerable<IChannel> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Feed() Initializes a new instance of the Feed class. public Feed() Feed(string) Initializes a new instance of the Feed class. public Feed(string content) Parameters content string The content. Properties Channels Gets the channels. public IList<IChannel> Channels { get; } Property Value IList<IChannel> The channels. Content Gets or sets the content. public string Content { get; } Property Value string The content. Count Gets the number of elements contained in the ICollection<T>. public int Count { get; } Property Value int IsReadOnly Gets a value indicating whether the ICollection<T> is read-only. public bool IsReadOnly { get; } Property Value bool this[int] Gets or sets the IChannel at the specified index. public IChannel this[int index] { get; set; } Parameters index int The index. Property Value IChannel The IChannel. Meta Gets or sets the meta. public string Meta { get; } Property Value string The meta. Title Gets or sets the title. public string Title { get; } Property Value string The title. Methods Add(IChannel) Adds an item to the ICollection<T>. public void Add(IChannel item) Parameters item IChannel The object to add to the ICollection<T>. Clear() Removes all items from the ICollection<T>. public void Clear() Contains(IChannel) Determines whether the ICollection<T> contains a specific value. public bool Contains(IChannel item) Parameters item IChannel The object to locate in the ICollection<T>. Returns bool true if item is found in the ICollection<T>; otherwise, false. CopyTo(IChannel[], int) Copies the elements of the ICollection<T> to an Array, starting at a particular Array index. public void CopyTo(IChannel[] array, int arrayIndex) Parameters array IChannel[] The one-dimensional Array that is the destination of the elements copied from ICollection<T>. The Array must have zero-based indexing. arrayIndex int The zero-based index in array at which copying begins. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<IChannel> GetEnumerator() Returns IEnumerator<IChannel> An enumerator that can be used to iterate through the collection. IndexOf(IChannel) Determines the index of a specific item in the IList<T>. public int IndexOf(IChannel item) Parameters item IChannel The object to locate in the IList<T>. Returns int The index of item if found in the list; otherwise, -1. Insert(int, IChannel) Inserts an item to the IList<T> at the specified index. public void Insert(int index, IChannel item) Parameters index int The zero-based index at which item should be inserted. item IChannel The object to insert into the IList<T>. Remove(IChannel) Removes the first occurrence of a specific object from the ICollection<T>. public bool Remove(IChannel item) Parameters item IChannel The object to remove from the ICollection<T>. Returns bool true if item was successfully removed from the ICollection<T>; otherwise, false. This method also returns false if item is not found in the original ICollection<T>. RemoveAt(int) Removes the IList<T> item at the specified index. public void RemoveAt(int index) Parameters index int The zero-based index of the item to remove. ToString() string representation of the RSS feed. public override string ToString() Returns string An rss formatted string See Also IFeed"
  },
  "api/FileCurator.Formats.RSS.Data.FeedGuid.html": {
    "href": "api/FileCurator.Formats.RSS.Data.FeedGuid.html",
    "title": "Class FeedGuid | FileCurator API Reference",
    "summary": "Class FeedGuid Namespace FileCurator.Formats.RSS.Data Assembly FileCurator.dll Feed GUID public class FeedGuid : IFeedGuid Inheritance object FeedGuid Implements IFeedGuid Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FeedGuid() Constructor public FeedGuid() FeedGuid(IXPathNavigable) Constructor public FeedGuid(IXPathNavigable element) Parameters element IXPathNavigable XML element holding info for the enclosure Properties GuidText GUID Text public string? GuidText { get; set; } Property Value string IsPermaLink Is this a perma link? public bool IsPermaLink { get; set; } Property Value bool Methods ToString() to string item. Used for outputting the item to RSS. public override string ToString() Returns string A string formatted for RSS output See Also IFeedGuid"
  },
  "api/FileCurator.Formats.RSS.Data.FeedItem.html": {
    "href": "api/FileCurator.Formats.RSS.Data.FeedItem.html",
    "title": "Class FeedItem | FileCurator API Reference",
    "summary": "Class FeedItem Namespace FileCurator.Formats.RSS.Data Assembly FileCurator.dll Feed item public class FeedItem : IFeedItem Inheritance object FeedItem Implements IFeedItem Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FeedItem() Constructor public FeedItem() FeedItem(IXPathNavigable) Constructor public FeedItem(IXPathNavigable doc) Parameters doc IXPathNavigable XML element containing the item content Properties Author Author public string? Author { get; set; } Property Value string Categories Categories public IList<string> Categories { get; } Property Value IList<string> Content Gets the content. public string Content { get; } Property Value string The content. Description Description public string? Description { get; set; } Property Value string Enclosure Enclosure public IEnclosure? Enclosure { get; set; } Property Value IEnclosure GUID GUID for the item public virtual IFeedGuid? GUID { get; set; } Property Value IFeedGuid Link Link public string? Link { get; set; } Property Value string PubDate Publication date public DateTime PubDate { get; set; } Property Value DateTime Thumbnail Thumbnail public IThumbnail? Thumbnail { get; set; } Property Value IThumbnail Title Title public string? Title { get; set; } Property Value string Methods ToString() Outputs a string ready for RSS public override string ToString() Returns string A string formatted for RSS See Also IFeedItem"
  },
  "api/FileCurator.Formats.RSS.Data.Thumbnail.html": {
    "href": "api/FileCurator.Formats.RSS.Data.Thumbnail.html",
    "title": "Class Thumbnail | FileCurator API Reference",
    "summary": "Class Thumbnail Namespace FileCurator.Formats.RSS.Data Assembly FileCurator.dll Thumbnail public class Thumbnail : IThumbnail Inheritance object Thumbnail Implements IThumbnail Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Thumbnail() Constructor public Thumbnail() Thumbnail(IXPathNavigable) Constructor public Thumbnail(IXPathNavigable doc) Parameters doc IXPathNavigable XML element holding info for the enclosure Properties Height Image height public int Height { get; set; } Property Value int Url Location of the item public string? Url { get; set; } Property Value string Width Image width public int Width { get; set; } Property Value int Methods ToString() to string item. Used for outputting the item to RSS. public override string ToString() Returns string A string formatted for RSS output See Also IThumbnail"
  },
  "api/FileCurator.Formats.RSS.Data.Utils.html": {
    "href": "api/FileCurator.Formats.RSS.Data.Utils.html",
    "title": "Class Utils | FileCurator API Reference",
    "summary": "Class Utils Namespace FileCurator.Formats.RSS.Data Assembly FileCurator.dll Utility class used by RSS classes. public static class Utils Inheritance object Utils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods StripIllegalCharacters(string) Strips illegal characters from RSS items public static string StripIllegalCharacters(string original) Parameters original string Original text Returns string string stripped of certain characters."
  },
  "api/FileCurator.Formats.RSS.Data.html": {
    "href": "api/FileCurator.Formats.RSS.Data.html",
    "title": "Namespace FileCurator.Formats.RSS.Data | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.RSS.Data Classes Channel Channel Enclosure Enclosure Feed Individual RSS Feed FeedGuid Feed GUID FeedItem Feed item Thumbnail Thumbnail Utils Utility class used by RSS classes."
  },
  "api/FileCurator.Formats.RSS.RSSFormat.html": {
    "href": "api/FileCurator.Formats.RSS.RSSFormat.html",
    "title": "Class RSSFormat | FileCurator API Reference",
    "summary": "Class RSSFormat Namespace FileCurator.Formats.RSS Assembly FileCurator.dll RSS Format public class RSSFormat : FormatBaseClass<RSSReader, RSSWriter, IFeed>, IFormat<IFeed>, IFormat Inheritance object FormatBaseClass<RSSReader, RSSWriter, IFeed> RSSFormat Implements IFormat<IFeed> IFormat Inherited Members FormatBaseClass<RSSReader, RSSWriter, IFeed>.ContentTypes FormatBaseClass<RSSReader, RSSWriter, IFeed>.DisplayName FormatBaseClass<RSSReader, RSSWriter, IFeed>.FileTypes FormatBaseClass<RSSReader, RSSWriter, IFeed>.HeaderInfo FormatBaseClass<RSSReader, RSSWriter, IFeed>.Reader FormatBaseClass<RSSReader, RSSWriter, IFeed>.Writer FormatBaseClass<RSSReader, RSSWriter, IFeed>.CanRead(string) FormatBaseClass<RSSReader, RSSWriter, IFeed>.CanRead(Stream) FormatBaseClass<RSSReader, RSSWriter, IFeed>.CanWrite(string) FormatBaseClass<RSSReader, RSSWriter, IFeed>.Read(Stream) FormatBaseClass<RSSReader, RSSWriter, IFeed>.ReadAsync(Stream) FormatBaseClass<RSSReader, RSSWriter, IFeed>.ReadBase(Stream) FormatBaseClass<RSSReader, RSSWriter, IFeed>.ReadBaseAsync(Stream) FormatBaseClass<RSSReader, RSSWriter, IFeed>.Write(Stream, IGenericFile) FormatBaseClass<RSSReader, RSSWriter, IFeed>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentTypes Gets the content types. public override string[] ContentTypes { get; } Property Value string[] The content types. DisplayName Gets the display name. public override string DisplayName { get; } Property Value string The display name. FileTypes Gets the file types. public override string[] FileTypes { get; } Property Value string[] The file types. See Also FormatBaseClass<TFileReader, TFileWriter, TFile>"
  },
  "api/FileCurator.Formats.RSS.RSSReader.html": {
    "href": "api/FileCurator.Formats.RSS.RSSReader.html",
    "title": "Class RSSReader | FileCurator API Reference",
    "summary": "Class RSSReader Namespace FileCurator.Formats.RSS Assembly FileCurator.dll RSS Reader public class RSSReader : ReaderBaseClass<IFeed>, IGenericFileReader<IFeed> Inheritance object ReaderBaseClass<IFeed> RSSReader Implements IGenericFileReader<IFeed> Inherited Members ReaderBaseClass<IFeed>.CanRead(string) ReaderBaseClass<IFeed>.CanRead(Stream) ReaderBaseClass<IFeed>.ReadAsync(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderIdentifier Gets the header identifier. public override byte[] HeaderIdentifier { get; } Property Value byte[] The header identifier. Methods InternalCanRead(Stream) Used to determine if a reader can actually read the file public override bool InternalCanRead(Stream stream) Parameters stream Stream The stream. Returns bool True if it can, false otherwise Read(Stream) Reads the specified stream. public override IFeed Read(Stream stream) Parameters stream Stream The stream. Returns IFeed The file See Also IGenericFileReader<TFile>"
  },
  "api/FileCurator.Formats.RSS.RSSWriter.html": {
    "href": "api/FileCurator.Formats.RSS.RSSWriter.html",
    "title": "Class RSSWriter | FileCurator API Reference",
    "summary": "Class RSSWriter Namespace FileCurator.Formats.RSS Assembly FileCurator.dll RSS Writer public class RSSWriter : IGenericFileWriter Inheritance object RSSWriter Implements IGenericFileWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Write(Stream, IGenericFile) Writes the file to the specified writer. public bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. public Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise. See Also IGenericFileWriter"
  },
  "api/FileCurator.Formats.RSS.html": {
    "href": "api/FileCurator.Formats.RSS.html",
    "title": "Namespace FileCurator.Formats.RSS | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.RSS Classes RSSFormat RSS Format RSSReader RSS Reader RSSWriter RSS Writer"
  },
  "api/FileCurator.Formats.Txt.TxtFormat.html": {
    "href": "api/FileCurator.Formats.Txt.TxtFormat.html",
    "title": "Class TxtFormat | FileCurator API Reference",
    "summary": "Class TxtFormat Namespace FileCurator.Formats.Txt Assembly FileCurator.dll Text format public class TxtFormat : FormatBaseClass<TxtReader, TxtWriter, IGenericFile>, IFormat<IGenericFile>, IFormat Inheritance object FormatBaseClass<TxtReader, TxtWriter, IGenericFile> TxtFormat Implements IFormat<IGenericFile> IFormat Inherited Members FormatBaseClass<TxtReader, TxtWriter, IGenericFile>.ContentTypes FormatBaseClass<TxtReader, TxtWriter, IGenericFile>.DisplayName FormatBaseClass<TxtReader, TxtWriter, IGenericFile>.FileTypes FormatBaseClass<TxtReader, TxtWriter, IGenericFile>.HeaderInfo FormatBaseClass<TxtReader, TxtWriter, IGenericFile>.Reader FormatBaseClass<TxtReader, TxtWriter, IGenericFile>.Writer FormatBaseClass<TxtReader, TxtWriter, IGenericFile>.CanRead(string) FormatBaseClass<TxtReader, TxtWriter, IGenericFile>.CanRead(Stream) FormatBaseClass<TxtReader, TxtWriter, IGenericFile>.CanWrite(string) FormatBaseClass<TxtReader, TxtWriter, IGenericFile>.Read(Stream) FormatBaseClass<TxtReader, TxtWriter, IGenericFile>.ReadAsync(Stream) FormatBaseClass<TxtReader, TxtWriter, IGenericFile>.ReadBase(Stream) FormatBaseClass<TxtReader, TxtWriter, IGenericFile>.ReadBaseAsync(Stream) FormatBaseClass<TxtReader, TxtWriter, IGenericFile>.Write(Stream, IGenericFile) FormatBaseClass<TxtReader, TxtWriter, IGenericFile>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentTypes Gets the content types. public override string[] ContentTypes { get; } Property Value string[] The content types. DisplayName Gets or sets the display name. public override string DisplayName { get; } Property Value string The display name. FileTypes Gets or sets the file types. public override string[] FileTypes { get; } Property Value string[] The file types. See Also FormatBaseClass<TFileReader, TFileWriter, TFile>"
  },
  "api/FileCurator.Formats.Txt.TxtReader.html": {
    "href": "api/FileCurator.Formats.Txt.TxtReader.html",
    "title": "Class TxtReader | FileCurator API Reference",
    "summary": "Class TxtReader Namespace FileCurator.Formats.Txt Assembly FileCurator.dll TXT file reader public class TxtReader : ReaderBaseClass<IGenericFile>, IGenericFileReader<IGenericFile> Inheritance object ReaderBaseClass<IGenericFile> TxtReader Implements IGenericFileReader<IGenericFile> Inherited Members ReaderBaseClass<IGenericFile>.CanRead(string) ReaderBaseClass<IGenericFile>.CanRead(Stream) ReaderBaseClass<IGenericFile>.InternalCanRead(Stream) ReaderBaseClass<IGenericFile>.ReadAsync(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderIdentifier Gets the header identifier. public override byte[] HeaderIdentifier { get; } Property Value byte[] The header identifier. Methods Read(Stream) Reads the specified stream. public override IGenericFile Read(Stream stream) Parameters stream Stream The stream. Returns IGenericFile The file See Also IGenericFileReader<TFile>"
  },
  "api/FileCurator.Formats.Txt.TxtWriter.html": {
    "href": "api/FileCurator.Formats.Txt.TxtWriter.html",
    "title": "Class TxtWriter | FileCurator API Reference",
    "summary": "Class TxtWriter Namespace FileCurator.Formats.Txt Assembly FileCurator.dll Txt Writer public class TxtWriter : IGenericFileWriter Inheritance object TxtWriter Implements IGenericFileWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Write(Stream, IGenericFile) Writes the file to the specified writer. public bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. public Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise. See Also IGenericFileWriter"
  },
  "api/FileCurator.Formats.Txt.html": {
    "href": "api/FileCurator.Formats.Txt.html",
    "title": "Namespace FileCurator.Formats.Txt | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.Txt Classes TxtFormat Text format TxtReader TXT file reader TxtWriter Txt Writer"
  },
  "api/FileCurator.Formats.VCalendar.VCalendarFormat.html": {
    "href": "api/FileCurator.Formats.VCalendar.VCalendarFormat.html",
    "title": "Class VCalendarFormat | FileCurator API Reference",
    "summary": "Class VCalendarFormat Namespace FileCurator.Formats.VCalendar Assembly FileCurator.dll VCal format public class VCalendarFormat : FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar>, IFormat<ICalendar>, IFormat Inheritance object FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar> VCalendarFormat Implements IFormat<ICalendar> IFormat Inherited Members FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar>.ContentTypes FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar>.DisplayName FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar>.FileTypes FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar>.HeaderInfo FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar>.Reader FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar>.Writer FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar>.CanRead(string) FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar>.CanRead(Stream) FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar>.CanWrite(string) FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar>.Read(Stream) FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar>.ReadAsync(Stream) FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar>.ReadBase(Stream) FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar>.ReadBaseAsync(Stream) FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar>.Write(Stream, IGenericFile) FormatBaseClass<VCalendarReader, VCalendarWriter, ICalendar>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentTypes Gets the content types. public override string[] ContentTypes { get; } Property Value string[] The content types. DisplayName Gets the display name. public override string DisplayName { get; } Property Value string The display name. FileTypes Gets the file types. public override string[] FileTypes { get; } Property Value string[] The file types. See Also FormatBaseClass<TFileReader, TFileWriter, TFile>"
  },
  "api/FileCurator.Formats.VCalendar.VCalendarReader.html": {
    "href": "api/FileCurator.Formats.VCalendar.VCalendarReader.html",
    "title": "Class VCalendarReader | FileCurator API Reference",
    "summary": "Class VCalendarReader Namespace FileCurator.Formats.VCalendar Assembly FileCurator.dll VCal reader public class VCalendarReader : ReaderBaseClass<ICalendar>, IGenericFileReader<ICalendar> Inheritance object ReaderBaseClass<ICalendar> VCalendarReader Implements IGenericFileReader<ICalendar> Inherited Members ReaderBaseClass<ICalendar>.CanRead(string) ReaderBaseClass<ICalendar>.CanRead(Stream) ReaderBaseClass<ICalendar>.InternalCanRead(Stream) ReaderBaseClass<ICalendar>.ReadAsync(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderIdentifier Gets the header identifier. public override byte[] HeaderIdentifier { get; } Property Value byte[] The header identifier. Methods Read(Stream) Reads the specified stream. public override ICalendar Read(Stream stream) Parameters stream Stream The stream. Returns ICalendar The file See Also IGenericFileReader<TFile>"
  },
  "api/FileCurator.Formats.VCalendar.VCalendarWriter.html": {
    "href": "api/FileCurator.Formats.VCalendar.VCalendarWriter.html",
    "title": "Class VCalendarWriter | FileCurator API Reference",
    "summary": "Class VCalendarWriter Namespace FileCurator.Formats.VCalendar Assembly FileCurator.dll VCal writer public class VCalendarWriter : IGenericFileWriter Inheritance object VCalendarWriter Implements IGenericFileWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Write(Stream, IGenericFile) Writes the file to the specified writer. public bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. public Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise. See Also IGenericFileWriter"
  },
  "api/FileCurator.Formats.VCalendar.html": {
    "href": "api/FileCurator.Formats.VCalendar.html",
    "title": "Namespace FileCurator.Formats.VCalendar | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.VCalendar Classes VCalendarFormat VCal format VCalendarReader VCal reader VCalendarWriter VCal writer"
  },
  "api/FileCurator.Formats.VCard.VCardFormat.html": {
    "href": "api/FileCurator.Formats.VCard.VCardFormat.html",
    "title": "Class VCardFormat | FileCurator API Reference",
    "summary": "Class VCardFormat Namespace FileCurator.Formats.VCard Assembly FileCurator.dll VCard format public class VCardFormat : FormatBaseClass<VCardReader, VCardWriter, ICard>, IFormat<ICard>, IFormat Inheritance object FormatBaseClass<VCardReader, VCardWriter, ICard> VCardFormat Implements IFormat<ICard> IFormat Inherited Members FormatBaseClass<VCardReader, VCardWriter, ICard>.ContentTypes FormatBaseClass<VCardReader, VCardWriter, ICard>.DisplayName FormatBaseClass<VCardReader, VCardWriter, ICard>.FileTypes FormatBaseClass<VCardReader, VCardWriter, ICard>.HeaderInfo FormatBaseClass<VCardReader, VCardWriter, ICard>.Reader FormatBaseClass<VCardReader, VCardWriter, ICard>.Writer FormatBaseClass<VCardReader, VCardWriter, ICard>.CanRead(string) FormatBaseClass<VCardReader, VCardWriter, ICard>.CanRead(Stream) FormatBaseClass<VCardReader, VCardWriter, ICard>.CanWrite(string) FormatBaseClass<VCardReader, VCardWriter, ICard>.Read(Stream) FormatBaseClass<VCardReader, VCardWriter, ICard>.ReadAsync(Stream) FormatBaseClass<VCardReader, VCardWriter, ICard>.ReadBase(Stream) FormatBaseClass<VCardReader, VCardWriter, ICard>.ReadBaseAsync(Stream) FormatBaseClass<VCardReader, VCardWriter, ICard>.Write(Stream, IGenericFile) FormatBaseClass<VCardReader, VCardWriter, ICard>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentTypes Gets the content types. public override string[] ContentTypes { get; } Property Value string[] The content types. DisplayName Gets the display name. public override string DisplayName { get; } Property Value string The display name. FileTypes Gets the file types. public override string[] FileTypes { get; } Property Value string[] The file types. See Also FormatBaseClass<TFileReader, TFileWriter, TFile>"
  },
  "api/FileCurator.Formats.VCard.VCardReader.html": {
    "href": "api/FileCurator.Formats.VCard.VCardReader.html",
    "title": "Class VCardReader | FileCurator API Reference",
    "summary": "Class VCardReader Namespace FileCurator.Formats.VCard Assembly FileCurator.dll Vcard reader public class VCardReader : ReaderBaseClass<ICard>, IGenericFileReader<ICard> Inheritance object ReaderBaseClass<ICard> VCardReader Implements IGenericFileReader<ICard> Inherited Members ReaderBaseClass<ICard>.CanRead(string) ReaderBaseClass<ICard>.CanRead(Stream) ReaderBaseClass<ICard>.InternalCanRead(Stream) ReaderBaseClass<ICard>.ReadAsync(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderIdentifier Gets the header identifier. public override byte[] HeaderIdentifier { get; } Property Value byte[] The header identifier. Methods Read(Stream) Reads the specified stream. public override ICard Read(Stream stream) Parameters stream Stream The stream. Returns ICard The file See Also ReaderBaseClass<TFile>"
  },
  "api/FileCurator.Formats.VCard.VCardWriter.html": {
    "href": "api/FileCurator.Formats.VCard.VCardWriter.html",
    "title": "Class VCardWriter | FileCurator API Reference",
    "summary": "Class VCardWriter Namespace FileCurator.Formats.VCard Assembly FileCurator.dll VCard writer public class VCardWriter : IGenericFileWriter Inheritance object VCardWriter Implements IGenericFileWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Write(Stream, IGenericFile) Writes the file to the specified writer. public bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. public Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise. See Also IGenericFileWriter"
  },
  "api/FileCurator.Formats.VCard.html": {
    "href": "api/FileCurator.Formats.VCard.html",
    "title": "Namespace FileCurator.Formats.VCard | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.VCard Classes VCardFormat VCard format VCardReader Vcard reader VCardWriter VCard writer"
  },
  "api/FileCurator.Formats.Word.WordFormat.html": {
    "href": "api/FileCurator.Formats.Word.WordFormat.html",
    "title": "Class WordFormat | FileCurator API Reference",
    "summary": "Class WordFormat Namespace FileCurator.Formats.Word Assembly FileCurator.dll Word format public class WordFormat : FormatBaseClass<WordReader, WordWriter, IGenericFile>, IFormat<IGenericFile>, IFormat Inheritance object FormatBaseClass<WordReader, WordWriter, IGenericFile> WordFormat Implements IFormat<IGenericFile> IFormat Inherited Members FormatBaseClass<WordReader, WordWriter, IGenericFile>.ContentTypes FormatBaseClass<WordReader, WordWriter, IGenericFile>.DisplayName FormatBaseClass<WordReader, WordWriter, IGenericFile>.FileTypes FormatBaseClass<WordReader, WordWriter, IGenericFile>.HeaderInfo FormatBaseClass<WordReader, WordWriter, IGenericFile>.Reader FormatBaseClass<WordReader, WordWriter, IGenericFile>.Writer FormatBaseClass<WordReader, WordWriter, IGenericFile>.CanRead(string) FormatBaseClass<WordReader, WordWriter, IGenericFile>.CanRead(Stream) FormatBaseClass<WordReader, WordWriter, IGenericFile>.CanWrite(string) FormatBaseClass<WordReader, WordWriter, IGenericFile>.Read(Stream) FormatBaseClass<WordReader, WordWriter, IGenericFile>.ReadAsync(Stream) FormatBaseClass<WordReader, WordWriter, IGenericFile>.ReadBase(Stream) FormatBaseClass<WordReader, WordWriter, IGenericFile>.ReadBaseAsync(Stream) FormatBaseClass<WordReader, WordWriter, IGenericFile>.Write(Stream, IGenericFile) FormatBaseClass<WordReader, WordWriter, IGenericFile>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentTypes Gets the content types. public override string[] ContentTypes { get; } Property Value string[] The content types. DisplayName Gets or sets the display name. public override string DisplayName { get; } Property Value string The display name. FileTypes Gets or sets the file types. public override string[] FileTypes { get; } Property Value string[] The file types. See Also FormatBaseClass<TFileReader, TFileWriter, TFile>"
  },
  "api/FileCurator.Formats.Word.WordReader.html": {
    "href": "api/FileCurator.Formats.Word.WordReader.html",
    "title": "Class WordReader | FileCurator API Reference",
    "summary": "Class WordReader Namespace FileCurator.Formats.Word Assembly FileCurator.dll Word reader public class WordReader : ReaderBaseClass<IGenericFile>, IGenericFileReader<IGenericFile> Inheritance object ReaderBaseClass<IGenericFile> WordReader Implements IGenericFileReader<IGenericFile> Inherited Members ReaderBaseClass<IGenericFile>.CanRead(string) ReaderBaseClass<IGenericFile>.CanRead(Stream) ReaderBaseClass<IGenericFile>.ReadAsync(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderIdentifier Gets the header identifier. public override byte[] HeaderIdentifier { get; } Property Value byte[] The header identifier. Methods InternalCanRead(Stream) Used to determine if a reader can actually read the file public override bool InternalCanRead(Stream stream) Parameters stream Stream The stream. Returns bool True if it can, false otherwise Read(Stream) Reads the specified stream. public override IGenericFile Read(Stream stream) Parameters stream Stream The stream. Returns IGenericFile The file See Also IGenericFileReader<TFile>"
  },
  "api/FileCurator.Formats.Word.WordWriter.html": {
    "href": "api/FileCurator.Formats.Word.WordWriter.html",
    "title": "Class WordWriter | FileCurator API Reference",
    "summary": "Class WordWriter Namespace FileCurator.Formats.Word Assembly FileCurator.dll Word writer public class WordWriter : IGenericFileWriter Inheritance object WordWriter Implements IGenericFileWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Write(Stream, IGenericFile) Writes the file to the specified writer. public bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. public Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise. See Also IGenericFileWriter"
  },
  "api/FileCurator.Formats.Word.html": {
    "href": "api/FileCurator.Formats.Word.html",
    "title": "Namespace FileCurator.Formats.Word | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.Word Classes WordFormat Word format WordReader Word reader WordWriter Word writer"
  },
  "api/FileCurator.Formats.XML.XMLFormat.html": {
    "href": "api/FileCurator.Formats.XML.XMLFormat.html",
    "title": "Class XMLFormat | FileCurator API Reference",
    "summary": "Class XMLFormat Namespace FileCurator.Formats.XML Assembly FileCurator.dll XML Format public class XMLFormat : FormatBaseClass<XMLReader, XMLWriter, IGenericFile>, IFormat<IGenericFile>, IFormat Inheritance object FormatBaseClass<XMLReader, XMLWriter, IGenericFile> XMLFormat Implements IFormat<IGenericFile> IFormat Inherited Members FormatBaseClass<XMLReader, XMLWriter, IGenericFile>.ContentTypes FormatBaseClass<XMLReader, XMLWriter, IGenericFile>.DisplayName FormatBaseClass<XMLReader, XMLWriter, IGenericFile>.FileTypes FormatBaseClass<XMLReader, XMLWriter, IGenericFile>.HeaderInfo FormatBaseClass<XMLReader, XMLWriter, IGenericFile>.Reader FormatBaseClass<XMLReader, XMLWriter, IGenericFile>.Writer FormatBaseClass<XMLReader, XMLWriter, IGenericFile>.CanRead(string) FormatBaseClass<XMLReader, XMLWriter, IGenericFile>.CanRead(Stream) FormatBaseClass<XMLReader, XMLWriter, IGenericFile>.CanWrite(string) FormatBaseClass<XMLReader, XMLWriter, IGenericFile>.Read(Stream) FormatBaseClass<XMLReader, XMLWriter, IGenericFile>.ReadAsync(Stream) FormatBaseClass<XMLReader, XMLWriter, IGenericFile>.ReadBase(Stream) FormatBaseClass<XMLReader, XMLWriter, IGenericFile>.ReadBaseAsync(Stream) FormatBaseClass<XMLReader, XMLWriter, IGenericFile>.Write(Stream, IGenericFile) FormatBaseClass<XMLReader, XMLWriter, IGenericFile>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentTypes Gets the content types. public override string[] ContentTypes { get; } Property Value string[] The content types. DisplayName Gets the display name. public override string DisplayName { get; } Property Value string The display name. FileTypes Gets the file types. public override string[] FileTypes { get; } Property Value string[] The file types. See Also FormatBaseClass<TFileReader, TFileWriter, TFile>"
  },
  "api/FileCurator.Formats.XML.XMLReader.html": {
    "href": "api/FileCurator.Formats.XML.XMLReader.html",
    "title": "Class XMLReader | FileCurator API Reference",
    "summary": "Class XMLReader Namespace FileCurator.Formats.XML Assembly FileCurator.dll XML Reader public class XMLReader : ReaderBaseClass<IGenericFile>, IGenericFileReader<IGenericFile> Inheritance object ReaderBaseClass<IGenericFile> XMLReader Implements IGenericFileReader<IGenericFile> Inherited Members ReaderBaseClass<IGenericFile>.CanRead(string) ReaderBaseClass<IGenericFile>.CanRead(Stream) ReaderBaseClass<IGenericFile>.InternalCanRead(Stream) ReaderBaseClass<IGenericFile>.ReadAsync(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderIdentifier Gets the header identifier. public override byte[] HeaderIdentifier { get; } Property Value byte[] The header identifier. Methods Read(Stream) Reads the specified stream. public override IGenericFile Read(Stream stream) Parameters stream Stream The stream. Returns IGenericFile The file See Also IGenericFileReader<TFile>"
  },
  "api/FileCurator.Formats.XML.XMLWriter.html": {
    "href": "api/FileCurator.Formats.XML.XMLWriter.html",
    "title": "Class XMLWriter | FileCurator API Reference",
    "summary": "Class XMLWriter Namespace FileCurator.Formats.XML Assembly FileCurator.dll XML Writer public class XMLWriter : IGenericFileWriter Inheritance object XMLWriter Implements IGenericFileWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Write(Stream, IGenericFile) Writes the file to the specified writer. public bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. public Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise. See Also IGenericFileWriter"
  },
  "api/FileCurator.Formats.XML.html": {
    "href": "api/FileCurator.Formats.XML.html",
    "title": "Namespace FileCurator.Formats.XML | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats.XML Classes XMLFormat XML Format XMLReader XML Reader XMLWriter XML Writer"
  },
  "api/FileCurator.Formats.html": {
    "href": "api/FileCurator.Formats.html",
    "title": "Namespace FileCurator.Formats | FileCurator API Reference",
    "summary": "Namespace FileCurator.Formats Classes Manager Format manager"
  },
  "api/FileCurator.HelperMethods.InternalHttpClientFactory.html": {
    "href": "api/FileCurator.HelperMethods.InternalHttpClientFactory.html",
    "title": "Class InternalHttpClientFactory | FileCurator API Reference",
    "summary": "Class InternalHttpClientFactory Namespace FileCurator.HelperMethods Assembly FileCurator.dll Internal HTTP Client Factory public class InternalHttpClientFactory : IDisposable Inheritance object InternalHttpClientFactory Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() GetClient(Credentials?) Gets the client. public HttpClient GetClient(Credentials? credentials) Parameters credentials Credentials The credentials. Returns HttpClient See Also IDisposable IDisposable"
  },
  "api/FileCurator.HelperMethods.Word.WordDocumentAssembler.html": {
    "href": "api/FileCurator.HelperMethods.Word.WordDocumentAssembler.html",
    "title": "Class WordDocumentAssembler | FileCurator API Reference",
    "summary": "Class WordDocumentAssembler Namespace FileCurator.HelperMethods.Word Assembly FileCurator.dll Document assembly helper class public sealed class WordDocumentAssembler : SafeDisposableBaseClass, IDisposable Inheritance object SafeDisposableBaseClass WordDocumentAssembler Implements IDisposable Inherited Members SafeDisposableBaseClass.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods AppendPageBreak() Appends a page break to the end of the document. public WordDocumentAssembler? AppendPageBreak() Returns WordDocumentAssembler This AppendTable(List<List<string>>) Appends a table to the document public WordDocumentAssembler AppendTable(List<List<string>> Table) Parameters Table List<List<string>> The table. Returns WordDocumentAssembler This CombineDocuments(List<string>) Combines the documents specified and combines them in this document with a page break between each one. public WordDocumentAssembler CombineDocuments(List<string> docLocations) Parameters docLocations List<string> The document locations. Returns WordDocumentAssembler This Create(string) Creates the document at the specified path. public static WordDocumentAssembler? Create(string path) Parameters path string The path. Returns WordDocumentAssembler The new document assembler object Dispose(bool) Function to override in order to dispose objects protected override void Dispose(bool Managed) Parameters Managed bool If true, managed and unmanaged objects should be disposed. Otherwise unmanaged objects only. Open(string) Opens the document at the specified path specified path. public static WordDocumentAssembler? Open(string path) Parameters path string The path. Returns WordDocumentAssembler The new document assembler object ReplaceContent<T>(T, Dictionary<string, Func<T, string>>) Replaces the content/template fields with the content in the replacements dictionary. public WordDocumentAssembler ReplaceContent<T>(T objectArgs, Dictionary<string, Func<T, string>> replacements) Parameters objectArgs T The object arguments replacements Dictionary<string, Func<T, string>> The replacements. Returns WordDocumentAssembler Type Parameters T Data type for the Object Args See Also SafeDisposableBaseClass"
  },
  "api/FileCurator.HelperMethods.Word.html": {
    "href": "api/FileCurator.HelperMethods.Word.html",
    "title": "Namespace FileCurator.HelperMethods.Word | FileCurator API Reference",
    "summary": "Namespace FileCurator.HelperMethods.Word Classes WordDocumentAssembler Document assembly helper class"
  },
  "api/FileCurator.HelperMethods.html": {
    "href": "api/FileCurator.HelperMethods.html",
    "title": "Namespace FileCurator.HelperMethods | FileCurator API Reference",
    "summary": "Namespace FileCurator.HelperMethods Classes InternalHttpClientFactory Internal HTTP Client Factory"
  },
  "api/FileCurator.Interfaces.IDirectory.html": {
    "href": "api/FileCurator.Interfaces.IDirectory.html",
    "title": "Interface IDirectory | FileCurator API Reference",
    "summary": "Interface IDirectory Namespace FileCurator.Interfaces Assembly FileCurator.dll Represents a directory public interface IDirectory : IComparable<IDirectory>, IEnumerable<IFile>, IEnumerable, IComparable, IEquatable<IDirectory> Inherited Members IComparable<IDirectory>.CompareTo(IDirectory) IEnumerable<IFile>.GetEnumerator() IComparable.CompareTo(object) IEquatable<IDirectory>.Equals(IDirectory) Properties Accessed Last time it was accessed DateTime Accessed { get; } Property Value DateTime Created When it was created DateTime Created { get; } Property Value DateTime Exists Does the directory exist bool Exists { get; } Property Value bool FullName Full path to the directory string FullName { get; } Property Value string Modified When it was last modified DateTime Modified { get; } Property Value DateTime Name Name of the directory string Name { get; } Property Value string Parent Parent directory IDirectory? Parent { get; } Property Value IDirectory Root Root directory IDirectory? Root { get; } Property Value IDirectory Size Size of the contents of the directory in bytes long Size { get; } Property Value long Methods CopyTo(IDirectory, CopyOptions) Copies the directory to the specified parent directory IDirectory CopyTo(IDirectory directory, CopyOptions options = CopyOptions.CopyAlways) Parameters directory IDirectory Directory to copy to options CopyOptions Copy options Returns IDirectory CopyToAsync(IDirectory, CopyOptions) Copies the directory to the specified parent directory Task<IDirectory> CopyToAsync(IDirectory directory, CopyOptions options = CopyOptions.CopyAlways) Parameters directory IDirectory Directory to copy to options CopyOptions Copy options Returns Task<IDirectory> Create() Creates the directory if it does not currently exist IDirectory Create() Returns IDirectory CreateAsync() Creates the directory if it does not currently exist Task<IDirectory> CreateAsync() Returns Task<IDirectory> Delete() Deletes the directory IDirectory Delete() Returns IDirectory DeleteAsync() Deletes the directory Task<IDirectory> DeleteAsync() Returns Task<IDirectory> EnumerateDirectories(Predicate<IDirectory>, SearchOption) Enumerates sub directories (defaults to top level sub directories) IEnumerable<IDirectory> EnumerateDirectories(Predicate<IDirectory> predicate, SearchOption options = SearchOption.TopDirectoryOnly) Parameters predicate Predicate<IDirectory> Predicate used to filter directories options SearchOption Search options to use Returns IEnumerable<IDirectory> The list of directories EnumerateDirectories(string, SearchOption) Enumerates sub directories (defaults to top level sub directories) IEnumerable<IDirectory> EnumerateDirectories(string searchPattern = \"*\", SearchOption options = SearchOption.TopDirectoryOnly) Parameters searchPattern string Search pattern to use options SearchOption Search options to use Returns IEnumerable<IDirectory> The list of directories EnumerateFiles(Predicate<IFile>, SearchOption) Enumerates files within the directory (defaults to top level directory and not the sub directories) IEnumerable<IFile> EnumerateFiles(Predicate<IFile> predicate, SearchOption options = SearchOption.TopDirectoryOnly) Parameters predicate Predicate<IFile> Predicate used to filter files options SearchOption Search options to use Returns IEnumerable<IFile> The list of files EnumerateFiles(string, SearchOption) Enumerates files within the directory (defaults to top level directory and not the sub directories) IEnumerable<IFile> EnumerateFiles(string searchPattern = \"*\", SearchOption options = SearchOption.TopDirectoryOnly) Parameters searchPattern string Search pattern to use options SearchOption Search options to use Returns IEnumerable<IFile> The list of files MoveTo(IDirectory) Moves the directory to the specified parent directory IDirectory MoveTo(IDirectory directory) Parameters directory IDirectory Directory to move to Returns IDirectory MoveToAsync(IDirectory) Moves the directory to the specified parent directory Task<IDirectory> MoveToAsync(IDirectory directory) Parameters directory IDirectory Directory to move to Returns Task<IDirectory> Rename(string) Renames the directory IDirectory Rename(string name) Parameters name string The new name of the directory Returns IDirectory RenameAsync(string) Renames the directory Task<IDirectory> RenameAsync(string name) Parameters name string The new name of the directory Returns Task<IDirectory> See Also IComparable<T> IEnumerable<T> IComparable IEquatable<T>"
  },
  "api/FileCurator.Interfaces.IFile.html": {
    "href": "api/FileCurator.Interfaces.IFile.html",
    "title": "Interface IFile | FileCurator API Reference",
    "summary": "Interface IFile Namespace FileCurator.Interfaces Assembly FileCurator.dll Represents an individual file public interface IFile : IComparable<IFile>, IComparable, IEquatable<IFile> Inherited Members IComparable<IFile>.CompareTo(IFile) IComparable.CompareTo(object) IEquatable<IFile>.Equals(IFile) Properties Accessed Last time the file was accessed DateTime Accessed { get; } Property Value DateTime Created When the file was created DateTime Created { get; } Property Value DateTime Directory Directory the file is in IDirectory? Directory { get; } Property Value IDirectory Exists Does the file exist currently bool Exists { get; } Property Value bool Extension File extension string Extension { get; } Property Value string FullName Full path to the file string FullName { get; } Property Value string Length Size of the file in bytes long Length { get; } Property Value long Modified When the file was last modified DateTime Modified { get; } Property Value DateTime Name File name string Name { get; } Property Value string Methods CopyTo(IDirectory, bool) Copies the file to another directory IFile? CopyTo(IDirectory directory, bool overwrite) Parameters directory IDirectory Directory to copy the file to overwrite bool Should the file overwrite another file if found Returns IFile The newly created file CopyToAsync(IDirectory, bool) Copies the file to another directory Task<IFile?> CopyToAsync(IDirectory directory, bool overwrite) Parameters directory IDirectory Directory to copy the file to overwrite bool Should the file overwrite another file if found Returns Task<IFile> The newly created file Delete() Deletes the file string Delete() Returns string Any response for deleting the resource (usually FTP, HTTP, etc) DeleteAsync() Deletes the file Task<string> DeleteAsync() Returns Task<string> Any response for deleting the resource (usually FTP, HTTP, etc) MoveTo(IDirectory) Moves the file to another directory IFile MoveTo(IDirectory directory) Parameters directory IDirectory Directory to move the file to Returns IFile MoveToAsync(IDirectory) Moves the file to another directory Task<IFile> MoveToAsync(IDirectory directory) Parameters directory IDirectory Directory to move the file to Returns Task<IFile> Parse() Parses this instance. IGenericFile Parse() Returns IGenericFile The parsed file Exceptions ArgumentException Could not find file format that returns the specified object type ParseAsync() Parses this instance. Task<IGenericFile> ParseAsync() Returns Task<IGenericFile> The parsed file Exceptions ArgumentException Could not find file format that returns the specified object type ParseAsync<TFile>() Parses this instance. Task<TFile> ParseAsync<TFile>() where TFile : IGenericFile Returns Task<TFile> The parsed file Type Parameters TFile The type of the file object expected. Exceptions ArgumentException Could not find file format that returns the specified object type Parse<TFile>() Parses this instance. TFile Parse<TFile>() where TFile : IGenericFile Returns TFile The parsed file Type Parameters TFile The type of the file object expected. Exceptions ArgumentException Could not find file format that returns the specified object type Read() Reads the file to the end as a string string Read() Returns string A string containing the contents of the file ReadAsync() Reads the file to the end as a string Task<string> ReadAsync() Returns Task<string> A string containing the contents of the file ReadBinary() Reads the file to the end as a byte array byte[] ReadBinary() Returns byte[] A byte array containing the contents of the file ReadBinaryAsync() Reads the file to the end as a byte array Task<byte[]> ReadBinaryAsync() Returns Task<byte[]> A byte array containing the contents of the file Rename(string) Renames the file IFile Rename(string newName) Parameters newName string New file name Returns IFile RenameAsync(string) Renames the file Task<IFile> RenameAsync(string newName) Parameters newName string New file name Returns Task<IFile> Write(IGenericFile, FileMode) Writes the specified data. bool Write(IGenericFile data, FileMode mode = FileMode.Create) Parameters data IGenericFile The data. mode FileMode The mode. Returns bool True if it was written successfully, false otherwise. Write(byte[], FileMode) Writes content to the file byte[] Write(byte[] content, FileMode mode = FileMode.Create) Parameters content byte[] Content to write mode FileMode File mode Returns byte[] The result of the write or original content Write(string, FileMode, Encoding?) Writes content to the file string Write(string content, FileMode mode = FileMode.Create, Encoding? encoding = null) Parameters content string Content to write mode FileMode File mode encoding Encoding Encoding that the content should be saved as (default is UTF8) Returns string The result of the write or original content WriteAsync(IGenericFile, FileMode) Writes the specified data. Task<bool> WriteAsync(IGenericFile data, FileMode mode = FileMode.Create) Parameters data IGenericFile The data. mode FileMode The mode. Returns Task<bool> True if it was written successfully, false otherwise. WriteAsync(byte[], FileMode) Writes content to the file Task<byte[]> WriteAsync(byte[] content, FileMode mode = FileMode.Create) Parameters content byte[] Content to write mode FileMode File mode Returns Task<byte[]> The result of the write or original content WriteAsync(string, FileMode, Encoding?) Writes content to the file Task<string> WriteAsync(string content, FileMode mode = FileMode.Create, Encoding? encoding = null) Parameters content string Content to write mode FileMode File mode encoding Encoding Encoding that the content should be saved as (default is UTF8) Returns Task<string> The result of the write or original content"
  },
  "api/FileCurator.Interfaces.IFileSystem.html": {
    "href": "api/FileCurator.Interfaces.IFileSystem.html",
    "title": "Interface IFileSystem | FileCurator API Reference",
    "summary": "Interface IFileSystem Namespace FileCurator.Interfaces Assembly FileCurator.dll Interface for the file system public interface IFileSystem Properties Name Name of the file system string Name { get; } Property Value string Order Gets the order (lower numbers occur first). int Order { get; } Property Value int The order. Methods CanHandle(string) Returns true if it can handle the path, false otherwise bool CanHandle(string path) Parameters path string The path to check against Returns bool True if it can handle the path, false otherwise Directory(string, Credentials?) Gets the directory representation for the directory IDirectory Directory(string path, Credentials? credentials = null) Parameters path string Path to the directory credentials Credentials The credentials. Returns IDirectory The directory object File(string, Credentials?) Gets the class representation for the file IFile File(string path, Credentials? credentials = null) Parameters path string Path to the file credentials Credentials The credentials. Returns IFile The file object"
  },
  "api/FileCurator.Interfaces.html": {
    "href": "api/FileCurator.Interfaces.html",
    "title": "Namespace FileCurator.Interfaces | FileCurator API Reference",
    "summary": "Namespace FileCurator.Interfaces Interfaces IDirectory Represents a directory IFile Represents an individual file IFileSystem Interface for the file system"
  },
  "api/FileCurator.Module.FileCuratorModule.html": {
    "href": "api/FileCurator.Module.FileCuratorModule.html",
    "title": "Class FileCuratorModule | FileCurator API Reference",
    "summary": "Class FileCuratorModule Namespace FileCurator.Module Assembly FileCurator.dll File curator module public class FileCuratorModule : IModule Inheritance object FileCuratorModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Order to run it in public int Order { get; } Property Value int Methods Load(IServiceCollection?) Loads the module public void Load(IServiceCollection? bootstrapper) Parameters bootstrapper IServiceCollection The bootstrapper."
  },
  "api/FileCurator.Module.html": {
    "href": "api/FileCurator.Module.html",
    "title": "Namespace FileCurator.Module | FileCurator API Reference",
    "summary": "Namespace FileCurator.Module Classes FileCuratorModule File curator module"
  },
  "api/FileCurator.Windows.Formats.MSG.MSGFormat.html": {
    "href": "api/FileCurator.Windows.Formats.MSG.MSGFormat.html",
    "title": "Class MSGFormat | FileCurator API Reference",
    "summary": "Class MSGFormat Namespace FileCurator.Windows.Formats.MSG Assembly FileCurator.dll MSG Format public class MSGFormat : FormatBaseClass<MSGReader, MSGWriter, IMessage>, IFormat<IMessage>, IFormat Inheritance object FormatBaseClass<MSGReader, MSGWriter, IMessage> MSGFormat Implements IFormat<IMessage> IFormat Inherited Members FormatBaseClass<MSGReader, MSGWriter, IMessage>.ContentTypes FormatBaseClass<MSGReader, MSGWriter, IMessage>.DisplayName FormatBaseClass<MSGReader, MSGWriter, IMessage>.FileTypes FormatBaseClass<MSGReader, MSGWriter, IMessage>.HeaderInfo FormatBaseClass<MSGReader, MSGWriter, IMessage>.Reader FormatBaseClass<MSGReader, MSGWriter, IMessage>.Writer FormatBaseClass<MSGReader, MSGWriter, IMessage>.CanRead(string) FormatBaseClass<MSGReader, MSGWriter, IMessage>.CanRead(Stream) FormatBaseClass<MSGReader, MSGWriter, IMessage>.CanWrite(string) FormatBaseClass<MSGReader, MSGWriter, IMessage>.Read(Stream) FormatBaseClass<MSGReader, MSGWriter, IMessage>.ReadAsync(Stream) FormatBaseClass<MSGReader, MSGWriter, IMessage>.ReadBase(Stream) FormatBaseClass<MSGReader, MSGWriter, IMessage>.ReadBaseAsync(Stream) FormatBaseClass<MSGReader, MSGWriter, IMessage>.Write(Stream, IGenericFile) FormatBaseClass<MSGReader, MSGWriter, IMessage>.WriteAsync(Stream, IGenericFile) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ContentTypes Gets the content types. public override string[] ContentTypes { get; } Property Value string[] The content types. DisplayName Gets the display name. public override string DisplayName { get; } Property Value string The display name. FileTypes Gets the file types. public override string[] FileTypes { get; } Property Value string[] The file types. See Also FormatBaseClass<TFileReader, TFileWriter, TFile>"
  },
  "api/FileCurator.Windows.Formats.MSG.MSGReader.html": {
    "href": "api/FileCurator.Windows.Formats.MSG.MSGReader.html",
    "title": "Class MSGReader | FileCurator API Reference",
    "summary": "Class MSGReader Namespace FileCurator.Windows.Formats.MSG Assembly FileCurator.dll MSG Reader public class MSGReader : ReaderBaseClass<IMessage>, IGenericFileReader<IMessage> Inheritance object ReaderBaseClass<IMessage> MSGReader Implements IGenericFileReader<IMessage> Inherited Members ReaderBaseClass<IMessage>.CanRead(string) ReaderBaseClass<IMessage>.CanRead(Stream) ReaderBaseClass<IMessage>.InternalCanRead(Stream) ReaderBaseClass<IMessage>.ReadAsync(Stream) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HeaderIdentifier Gets the header identifier. public override byte[] HeaderIdentifier { get; } Property Value byte[] The header identifier. Methods Read(Stream) Reads the specified stream. public override IMessage Read(Stream stream) Parameters stream Stream The stream. Returns IMessage The file See Also ReaderBaseClass<TFile>"
  },
  "api/FileCurator.Windows.Formats.MSG.MSGWriter.html": {
    "href": "api/FileCurator.Windows.Formats.MSG.MSGWriter.html",
    "title": "Class MSGWriter | FileCurator API Reference",
    "summary": "Class MSGWriter Namespace FileCurator.Windows.Formats.MSG Assembly FileCurator.dll MSG Writer public class MSGWriter : IGenericFileWriter Inheritance object MSGWriter Implements IGenericFileWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Write(Stream, IGenericFile) Writes the file to the specified writer. public bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. public Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise. See Also IGenericFileWriter"
  },
  "api/FileCurator.Windows.Formats.MSG.html": {
    "href": "api/FileCurator.Windows.Formats.MSG.html",
    "title": "Namespace FileCurator.Windows.Formats.MSG | FileCurator API Reference",
    "summary": "Namespace FileCurator.Windows.Formats.MSG Classes MSGFormat MSG Format MSGReader MSG Reader MSGWriter MSG Writer"
  },
  "api/FileCurator.Windows.Formats.PDF.PDFWriter.html": {
    "href": "api/FileCurator.Windows.Formats.PDF.PDFWriter.html",
    "title": "Class PDFWriter | FileCurator API Reference",
    "summary": "Class PDFWriter Namespace FileCurator.Windows.Formats.PDF Assembly FileCurator.dll PDF writer public class PDFWriter : IGenericFileWriter Inheritance object PDFWriter Implements IGenericFileWriter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Write(Stream, IGenericFile) Writes the file to the specified writer. public bool Write(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns bool True if it writes successfully, false otherwise. WriteAsync(Stream, IGenericFile) Writes the file to the specified writer. public Task<bool> WriteAsync(Stream writer, IGenericFile file) Parameters writer Stream The writer. file IGenericFile The file. Returns Task<bool> True if it writes successfully, false otherwise. See Also IGenericFileWriter"
  },
  "api/FileCurator.Windows.Formats.PDF.html": {
    "href": "api/FileCurator.Windows.Formats.PDF.html",
    "title": "Namespace FileCurator.Windows.Formats.PDF | FileCurator API Reference",
    "summary": "Namespace FileCurator.Windows.Formats.PDF Classes PDFWriter PDF writer"
  },
  "api/FileCurator.html": {
    "href": "api/FileCurator.html",
    "title": "Namespace FileCurator | FileCurator API Reference",
    "summary": "Namespace FileCurator Classes Credentials Credentials info DirectoryInfo Directory info class FileInfo File info class FileSystem Main class for FileCurator"
  },
  "api/Microsoft.Extensions.DependencyInjection.FileCuratorCanisterExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.FileCuratorCanisterExtensions.html",
    "title": "Class FileCuratorCanisterExtensions | FileCurator API Reference",
    "summary": "Class FileCuratorCanisterExtensions Namespace Microsoft.Extensions.DependencyInjection Assembly FileCurator.dll Canister registration extension public static class FileCuratorCanisterExtensions Inheritance object FileCuratorCanisterExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterFileCurator(ICanisterConfiguration?) Registers the big book of data types. public static ICanisterConfiguration? RegisterFileCurator(this ICanisterConfiguration? bootstrapper) Parameters bootstrapper ICanisterConfiguration The bootstrapper. Returns ICanisterConfiguration The bootstrapper RegisterFileCurator(IServiceCollection?) Registers the FileCurator services with the specified service collection. public static IServiceCollection? RegisterFileCurator(this IServiceCollection? services) Parameters services IServiceCollection The service collection to register the services with. Returns IServiceCollection The updated service collection."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | FileCurator API Reference",
    "summary": "Namespace Microsoft.Extensions.DependencyInjection Classes FileCuratorCanisterExtensions Canister registration extension"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | FileCurator API Reference",
    "summary": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | FileCurator API Reference",
    "summary": "Code using BigBook; using FileCurator.Formats.Data.Interfaces; using Microsoft.Extensions.DependencyInjection; namespace FileCurator.Example { /// <summary> /// Example program to show how to use the FileCurator library /// </summary> internal class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> private static void Main(string[] args) { // Create a service provider. var ServiceProvider = new ServiceCollection().AddCanisterModules()?.BuildServiceProvider(); // Let's load a generic file and view it's details. var MyFile = new FileInfo(\"./MyFile.txt\"); Console.WriteLine(\"File Info:\"); Console.WriteLine($\"File: {MyFile.FullName}\"); Console.WriteLine($\"File Exists: {MyFile.Exists}\"); Console.WriteLine($\"File Extension: {MyFile.Extension}\"); Console.WriteLine($\"File Name: {MyFile.Name}\"); Console.WriteLine($\"File length: {MyFile.Length}\"); Console.WriteLine(); // We can also parse the file and view it's contents. var PDFContent = new FileInfo(\"./TestPDF.pdf\").Parse<IGenericFile>(); Console.WriteLine(\"PDF Content:\"); Console.WriteLine(PDFContent.Content); Console.WriteLine(); // Including more structured files like CSVs. This will parse the CSV into a table. var CSVContent = new FileInfo(\"./TestCSV.csv\").Parse<ITable>(); Console.WriteLine(\"CSV Content:\"); Console.WriteLine(CSVContent.Content); Console.WriteLine($\"Columns: {CSVContent.Columns.ToString(x => x)}\"); Console.WriteLine($\"Rows: {CSVContent.Rows.ToString(x => x.Cells.ToString(x => x.Content, \", \"), \"\\n\")}\"); Console.WriteLine(); // We can also write structured content to a file. var NewCSVFile = new FileInfo(\"./NewCSV.csv\"); NewCSVFile.Write(CSVContent); // And then read it as a string. Console.WriteLine(NewCSVFile.Read()); } } } Output File Info: File: C:\\*********\\MyFile.txt File Exists: True File Extension: .txt File Name: MyFile.txt File length: 24 PDF Content: This is a test docx CSV Content: Header 1 Header 2 Header 3 Header 4 Header 5 Header 6 This is a test CSV file Tons of data in here is super important Columns: Header 1,Header 2,Header 3,Header 4,Header 5,Header 6 Rows: This, is, a, test, CSV, file Tons, of, data, in here, is, super important \"Header 1\",\"Header 2\",\"Header 3\",\"Header 4\",\"Header 5\",\"Header 6\" \"This\",\"is\",\"a\",\"test\",\"CSV\",\"file\" \"Tons\",\"of\",\"data\",\"in here\",\"is\",\"super\" \"important\""
  },
  "index.html": {
    "href": "index.html",
    "title": "FileCurator | FileCurator API Reference",
    "summary": "FileCurator FileCurator is a library used to simplify file access and management on your system. It aims to make accessing a local file as simple as accessing a URL or 3rd party system like Dropbox. Basic Usage The system relies on your app's ServiceCollection in order to wire itself up correctly. In order to use the system you need to add the following line to your application's startup code: services.RegisterFileCurator(); Or if you're using Canister: services.AddCanisterModules(); This line is required prior to using the extension methods, FileInfo, and DirectoryInfo classes for the first time. Once it is set up, you can call the classes provided: var MyFile = new FileInfo(\"~/MyFile.txt\"); MyFile = new FileInfo(\"./MyFile.txt\"); MyFile = new FileInfo(\"MyFile.txt\"); MyFile = new FileInfo(\"http://www.google.com\"); MyFile = new FileInfo(\"resource://MyDLL/MyDLL.Resources.MyFile.txt\"); The FileInfo and DirectoryInfo classes take a string for the file path as well as a user name, password, and domain, assuming the file system you are trying to reach requires it. It translates ~ and . to be the local base directory. From there you will have access to the file's contents and information. Similarly you can pass in web addresses or the location of embedded resource files and will be able to read them accordingly. Embedded Resources For embedded resources, the syntax is: resource://MyDLL/MyDLL.Resources.Directory.MyFile.txt Where resource:// lets the system know you want to retrieve an embedded resource. MyDLL is the name of the Assembly that the resource is found in. And MyFile.txt is the name of the file. Depending on where you placed the file the path inside the project will be the Resources.Directory portion of the above example. In the above case it was placed in the /Resources/Directory folder inside the assembly. Instead of slashes the system separates them with a period instead. If you placed the resources at the base of the project, then the Resouces.Directory portion can be left out and it would just be: resource://MyDLL/MyDLL.MyFile.txt Adding File Systems The system comes with a couple of built in file systems for dealing with local files, however you may wish to add other targets as well. In order to do this all that you need to do is create a class that inherits from IFileSystem, a class that inherits from IFile, and one for IDirectory. From there the system will find the new provider and use it when called. Overriding File Systems By default the system comes with a couple of file systems for dealing with local files. However it is possible to override these by simply creating a class that inherits from IFileSystem and setting the correct Name to match the one that you wish to override. There is a base class called LocalFileSystemBase that can help with most of the functions for the file system as well. For instance to override the \"Relative Local\" system with your own you would do the following: public class MyLocalFileSystem : LocalFileSystemBase { /// <summary> /// Name of the file system /// </summary> public override string Name { get { return \"Relative Local\"; } } /// <summary> /// Relative starter /// </summary> protected override string HandleRegexString { get { return @\"^[~|\\.]\"; } } /// <summary> /// Gets the absolute path of the variable passed in /// </summary> /// <param name=\"path\">Path to convert to absolute</param> /// <returns>The absolute path of the path passed in</returns> protected override string AbsolutePath(string path) { ... } } From there the system will override the default \"Relative Local\" provider with your own. Parsing Files FileCurator also has a number of file formats that it understands and can parse: CSV TSV Tab delimited Excel (XLSX files only) HTML files ICS (iCalendar files) EML MHT PowerPoint (PPTX and PPSX) RSS VCS (vCal files) VCF (vCard files) Word (DOCX files only) XML PDF MSG files And of course TXT files In order to parse a file you would do the following: var MyFile = new FileInfo(\"~/MyFile.txt\").Parse(); The above code opens the MyFile.txt document and parses it into a IGenericFile object. This object contains a Content property, a Title property, and a Meta property. For the above text file, only the Content property is filled in. However you can also do this: var MyEmail = new FileInfo(\"~/MyEmail.eml\").Parse(); This will take the content of the email and place it in the Content property, the subject of the email is in Title. However you may be saying, what about To, or BCC, or From fields? That's why there is another Parse method: var MyEmail = new FileInfo(\"~/MyEmail.eml\").Parse<IMessage>(); This time we get back an IMessage object instead of an IGenericFile object. And the IMessage object has fields for To, BCC, CC, From, Sent date, etc. The Parse<>() method takes any type that inherits from IGenericFile. The built in types are: IMessage ITable IFeed ICard ICalendar And each of these correspond to a particular set of file formats: IMessage - EML, MHT, and MSG files. ITable - Delimited (CSV, TSV, etc.) and Excel files. IFeed - RSS files. ICard - vCards ICalendar - iCal and vCal files. All other file types are parsed as IGenericFile objects. And calling for an object of type A when the parser returns type B will throw an exception. So if you have no idea what the file is, it's best to just use the Parse() method instead. Writing an object to a file is similarly simple: var MyTable = new GenericTable(); MyTable.Columns.Add(\"Column Header 1\"); MyTable.Columns.Add(\"Column Header 2\"); MyTable.Rows.Add(new GenericRow()); MyTable.Rows[0].Cells.Add(new GenericCell(\"My Data\")); MyTable.Rows[0].Cells.Add(new GenericCell(\"Goes Here\")); new FileInfo(\"~/MyFile.xlsx\").Write(MyTable); The above code creates a table object with 2 column headers and a single row containing two cells, the first contains \"My Data\" and the second contains \"Goes Here\". The FileInfo object then takes the extension of the file that you are saving to and sends it to the proper format handler for writing the data to disk. In the above case it would be the Excel handler. You can similarly take the ITable object and save it as a CSV: new FileInfo(\"~/MyFile.csv\").Write(MyTable); No other code needs to change, just the file extension and it saves it properly as a CSV. There are also extension methods to work with Streams instead of just FileInfo objects: using(var TempStream = new MemoryStream()) { TempStream.Write(new GenericFile(\"This is my content\",\"My Title\",\"\"), MimeType.Word); } The above code would write to the TempStream object a word doc that contains \"This is my content\" in the body and have a title of \"My Title\". You can similarly parse Stream objects like the FileInfo object but the only difference is that it takes in a MimeType object. This is to help it figure out what sort of file is in the stream. However for unknown files you can specify MimeType.Unknown. The system will then try its best to figure out what the file is and act accordingly. Writing Your Own Format Parser All format parsers must inherit from the IFormat interface. However there is a base class to help simplify some of the process called FormatBaseClass<TFileReader, TFileWriter, TFile>, but it is not required. As an example: /// <summary> /// Text format /// </summary> /// <seealso cref=\"BaseClasses.FormatBaseClass{TxtReader, TxtWriter, IGenericFile}\"/> public class TxtFormat : FormatBaseClass<TxtReader, TxtWriter, IGenericFile> { /// <summary> /// Gets the content types. /// </summary> /// <value>The content types.</value> public override string[] ContentTypes => new[] { \"TEXT/PLAIN\" }; /// <summary> /// Gets or sets the display name. /// </summary> /// <value>The display name.</value> public override string DisplayName => \"Text\"; /// <summary> /// Gets or sets the file types. /// </summary> /// <value>The file types.</value> public override string[] FileTypes => new[] { \"TXT\" }; } The above class is the TXT file parser. It also has a reader class: /// <summary> /// TXT file reader /// </summary> /// <seealso cref=\"Interfaces.IGenericFileReader{IGenericFile}\"/> public class TxtReader : ReaderBaseClass<IGenericFile> { /// <summary> /// Gets the header identifier. /// </summary> /// <value>The header identifier.</value> public override byte[] HeaderIdentifier => new byte[0]; /// <summary> /// Reads the specified stream. /// </summary> /// <param name=\"stream\">The stream.</param> /// <returns>The file</returns> public override IGenericFile Read(Stream stream) { return new GenericFile(stream.ReadAll(), \"\", \"\"); } } And a writer class: /// <summary> /// Txt Writer /// </summary> /// <seealso cref=\"IGenericFileWriter\"/> public class TxtWriter : IGenericFileWriter { /// <summary> /// Writes the file to the specified writer. /// </summary> /// <param name=\"writer\">The writer.</param> /// <param name=\"file\">The file.</param> /// <returns>True if it writes successfully, false otherwise.</returns> public bool Write(Stream writer, IGenericFile file) { var TempData = Encoding.UTF8.GetBytes(file.ToString()); writer.Write(TempData, 0, TempData.Length); return true; } } You can create something similar for your formats as well. From there the system will automatically pick up your format and use it when appropriate. You can also override the existing formats with your own. You just need to state the content type and file types that you wish to intercept and it will use your items instead of the corresponding items in FileCurator. Installation The library is available via Nuget with the package name \"FileCurator\". To install it run the following command in the Package Manager Console: Install-Package FileCurator Build Process In order to build the library you will require the following as a minimum: Visual Studio 2022 Other than that, just clone the project and you should be able to load the solution and build without too much effort."
  }
}